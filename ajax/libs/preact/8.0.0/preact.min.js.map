{"version":3,"sources":["../src/vnode.js","../src/h.js","../src/util.js","../src/clone-element.js","../src/constants.js","../src/render-queue.js","../src/vdom/index.js","../src/dom/index.js","../src/vdom/diff.js","../src/vdom/component-recycler.js","../src/vdom/component.js","../src/options.js","../src/component.js","../src/render.js","../src/preact.js"],"names":["VNode","h","nodeName","attributes","lastSimple","child","simple","i","children","EMPTY_CHILDREN","arguments","length","stack","push","pop","undefined","String","p","key","options","vnode","extend","obj","props","cloneElement","slice","call","enqueueRender","component","items","list","_dirty","renderComponent","isSameNodeType","node","hydrating","isNamedNode","normalizedNodeName","toLowerCase","defaultProps","name","style","cssText","value","old","IS_NON_DIMENSIONAL","test","innerHTML","__html","useCapture","replace","substring","addEventListener","eventProxy","removeEventListener","_listeners","isSvg","setProperty","removeAttribute","ns","removeAttributeNS","setAttributeNS","setAttribute","className","e","this","type","event","c","mounts","diff","dom","context","mountAll","parent","componentRoot","ret","parentNode","appendChild","diffLevel","flushMounts","idiff","out","splitText","_component","document","createTextNode","recollectNodeTree","q","buildComponentFromVNode","isSvgMode","vchildren","fc","nextSibling","nodeValue","diffAttributes","prevSvgMode","innerDiffNode","isHydrating","j","vchild","len","_child","originalChildren","vlen","__key","keyedLen","keyed","childrenLen","min","remove","insertBefore","unmountOnly","removeChildren","lastChild","attrs","setAccessor","inst","Ctor","prototype","render","constructor","doRender","nextBase","splice","state","componentWillReceiveProps","prevContext","prevProps","opts","syncComponentUpdates","base","isChild","rendered","cbase","isUpdate","initialChildComponent","skip","previousProps","previousState","previousContext","shouldComponentUpdate","componentWillUpdate","prevState","getChildContext","toUnmount","childProps","getNodeProps","childComponent","setComponentProps","_parentComponent","initialBase","baseParent","replaceChild","componentRef","t","unshift","componentDidUpdate","afterUpdate","_renderCallbacks","isOwner","originalComponent","isDirectOwner","unmountComponent","oldDom","createComponent","beforeUnmount","inner","ref","collectComponent","__ref","forceUpdate","callback","rerender","module","exports","preact","self"],"mappings":"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","file":"preact.min.js","sourcesContent":["/** Virtual DOM Node */\nexport function VNode() {}\n\n","import { VNode } from './vnode';\nimport options from './options';\n\n\nconst stack = [];\n\nconst EMPTY_CHILDREN = [];\n\n/** JSX/hyperscript reviver\n*\tBenchmarks: https://esbench.com/bench/57ee8f8e330ab09900a1a1a0\n *\t@see http://jasonformat.com/wtf-is-jsx\n *\t@public\n */\nexport function h(nodeName, attributes) {\n\tlet children=EMPTY_CHILDREN, lastSimple, child, simple, i;\n\tfor (i=arguments.length; i-- > 2; ) {\n\t\tstack.push(arguments[i]);\n\t}\n\tif (attributes && attributes.children!=null) {\n\t\tif (!stack.length) stack.push(attributes.children);\n\t\tdelete attributes.children;\n\t}\n\twhile (stack.length) {\n\t\tif ((child = stack.pop()) && child.pop!==undefined) {\n\t\t\tfor (i=child.length; i--; ) stack.push(child[i]);\n\t\t}\n\t\telse {\n\t\t\tif ((simple = typeof nodeName!=='function')) {\n\t\t\t\tif (typeof child==='number') child = String(child);\n\t\t\t\telse if (child===true || child===false || child==null) child = '';\n\t\t\t\telse if (typeof child!=='string') simple = false;\n\t\t\t}\n\n\t\t\tif (simple && lastSimple) {\n\t\t\t\tchildren[children.length-1] += child;\n\t\t\t}\n\t\t\telse if (children===EMPTY_CHILDREN) {\n\t\t\t\tchildren = [child];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\n\t\t\tlastSimple = simple;\n\t\t}\n\t}\n\n\tlet p = new VNode();\n\tp.nodeName = nodeName;\n\tp.children = children;\n\tp.attributes = attributes==null ? undefined : attributes;\n\tp.key = attributes==null ? undefined : attributes.key;\n\n\t// if a \"vnode hook\" is defined, pass every created VNode to it\n\tif (options.vnode!==undefined) options.vnode(p);\n\n\treturn p;\n}\n","/** Copy own-properties from `props` onto `obj`.\n *\t@returns obj\n *\t@private\n */\nexport function extend(obj, props) {\n\tfor (let i in props) obj[i] = props[i];\n\treturn obj;\n}\n\n\n","import { extend } from './util';\nimport { h } from './h';\n\nexport function cloneElement(vnode, props) {\n\treturn h(\n\t\tvnode.nodeName,\n\t\textend(extend({}, vnode.attributes), props),\n\t\targuments.length>2 ? [].slice.call(arguments, 2) : vnode.children\n\t);\n}\n","// render modes\n\nexport const NO_RENDER = 0;\nexport const SYNC_RENDER = 1;\nexport const FORCE_RENDER = 2;\nexport const ASYNC_RENDER = 3;\n\n\nexport const ATTR_KEY = '__preactattr_';\n\n// DOM properties that should NOT have \"px\" added when numeric\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\n\n","import options from './options';\nimport { renderComponent } from './vdom/component';\n\n/** Managed queue of dirty components to be re-rendered */\n\nlet items = [];\n\nexport function enqueueRender(component) {\n\tif (!component._dirty && (component._dirty = true) && items.push(component)==1) {\n\t\t(options.debounceRendering || setTimeout)(rerender);\n\t}\n}\n\n\nexport function rerender() {\n\tlet p, list = items;\n\titems = [];\n\twhile ( (p = list.pop()) ) {\n\t\tif (p._dirty) renderComponent(p);\n\t}\n}\n","import { extend } from '../util';\n\n\n/** Check if two nodes are equivalent.\n *\t@param {Element} node\n *\t@param {VNode} vnode\n *\t@private\n */\nexport function isSameNodeType(node, vnode, hydrating) {\n\tif (typeof vnode==='string' || typeof vnode==='number') {\n\t\t// return node instanceof Text;\n\t\treturn node.splitText!==undefined;\n\t\t// return typeof node.data!=='undefined';\n\t}\n\tif (typeof vnode.nodeName==='string') {\n\t// if (isString(vnode.nodeName)) {\n\t\treturn !node._componentConstructor && isNamedNode(node, vnode.nodeName);\n\t\t// return !node._componentConstructor && (node.normalizedNodeName || node.nodeName.toLowerCase())===vnode.nodeName;\n\t}\n\treturn hydrating || node._componentConstructor===vnode.nodeName;\n}\n\n\nexport function isNamedNode(node, nodeName) {\n\t// return node.normalizedNodeName===nodeName || toLowerCase(node.nodeName)===toLowerCase(nodeName);\n\t// return node.normalizedNodeName!==undefined ? node.normalizedNodeName===nodeName : node.nodeName.toLowerCase()===nodeName.toLowerCase();\n\treturn node.normalizedNodeName===nodeName || node.nodeName.toLowerCase()===nodeName.toLowerCase();\n\t// return node.nodeName===nodeName.toUpperCase();\n}\n\n\n/**\n * Reconstruct Component-style `props` from a VNode.\n * Ensures default/fallback values from `defaultProps`:\n * Own-properties of `defaultProps` not present in `vnode.attributes` are added.\n * @param {VNode} vnode\n * @returns {Object} props\n */\nexport function getNodeProps(vnode) {\n\tlet props = extend({}, vnode.attributes);\n\tprops.children = vnode.children;\n\n\t// let props = { children: vnode.children };\n\t// extend(props, vnode.attributes);\n\t// for (let i in vnode.attributes) props[i] = vnode.attributes[i];\n\n\tlet defaultProps = vnode.nodeName.defaultProps;\n\tif (defaultProps!==undefined) {\n\t\tfor (let i in defaultProps) {\n\t\t\tif (props[i]===undefined) {\n\t\t\t\tprops[i] = defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn props;\n\n\n\t/*\n\t// let props = clone(vnode.attributes);\n\tlet props = extend({}, vnode.attributes);\n\tprops.children = vnode.children;\n\n\tlet defaultProps = vnode.nodeName.defaultProps;\n\tif (defaultProps) {\n\t\tfor (let i in defaultProps) {\n\t\t\tif (props[i]===undefined) {\n\t\t\t\tprops[i] = defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\t// if (vnode.nodeName.defaultProps!=null) {\n\t// \tfor (let i in vnode.nodeName.defaultProps) {\n\t// \t\tif (props[i]===undefined) {\n\t// \t\t\tprops[i] = vnode.nodeName.defaultProps[i];\n\t// \t\t}\n\t// \t}\n\t// }\n\n\treturn props;\n\t*/\n}\n","import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n\n/** Create an element with the given nodeName.\n *\t@param {String} nodeName\n *\t@param {Boolean} [isSvg=false]\tIf `true`, creates an element within the SVG namespace.\n *\t@returns {Element} node\n */\nexport function createNode(nodeName, isSvg) {\n\tlet node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);\n\tnode.normalizedNodeName = nodeName;\n\treturn node;\n}\n\n\n/** Set a named attribute on the given Node, with special behavior for some names and event handlers.\n *\tIf `value` is `null`, the attribute/handler will be removed.\n *\t@param {Element} node\tAn element to mutate\n *\t@param {string} name\tThe name/key to set, such as an event or attribute name\n *\t@param {any} old\tThe last value that was set for this name/node pair\n *\t@param {any} value\tAn attribute value, such as a function to be used as an event handler\n *\t@param {Boolean} isSvg\tAre we currently diffing inside an svg?\n *\t@private\n */\nexport function setAccessor(node, name, old, value, isSvg) {\n\tif (name==='className') name = 'class';\n\n\n\tif (name==='key') {\n\t\t// ignore\n\t}\n\telse if (name==='ref') {\n\t\tif (old) old(null);\n\t\tif (value) value(node);\n\t}\n\telse if (name==='class' && !isSvg) {\n\t\tnode.className = value || '';\n\t}\n\telse if (name==='style') {\n\t\tif (!value || typeof value==='string' || typeof old==='string') {\n\t\t\tnode.style.cssText = value || '';\n\t\t}\n\t\tif (value && typeof value==='object') {\n\t\t\tif (typeof old!=='string') {\n\t\t\t\tfor (let i in old) if (!(i in value)) node.style[i] = '';\n\t\t\t}\n\t\t\tfor (let i in value) {\n\t\t\t\tnode.style[i] = typeof value[i]==='number' && IS_NON_DIMENSIONAL.test(i)===false ? (value[i]+'px') : value[i];\n\t\t\t}\n\t\t}\n\t}\n\telse if (name==='dangerouslySetInnerHTML') {\n\t\tif (value) node.innerHTML = value.__html || '';\n\t}\n\telse if (name[0]=='o' && name[1]=='n') {\n\t\tlet useCapture = name !== (name=name.replace(/Capture$/, ''));\n\t\tname = name.toLowerCase().substring(2);\n\t\tif (value) {\n\t\t\tif (!old) node.addEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\telse {\n\t\t\tnode.removeEventListener(name, eventProxy, useCapture);\n\t\t}\n\t\t(node._listeners || (node._listeners = {}))[name] = value;\n\t}\n\telse if (name!=='list' && name!=='type' && !isSvg && name in node) {\n\t\tsetProperty(node, name, value==null ? '' : value);\n\t\tif (value==null || value===false) node.removeAttribute(name);\n\t}\n\telse {\n\t\tlet ns = isSvg && (name !== (name = name.replace(/^xlink\\:?/, '')));\n\t\tif (value==null || value===false) {\n\t\t\tif (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());\n\t\t\telse node.removeAttribute(name);\n\t\t}\n\t\telse if (typeof value!=='object' && typeof value!=='function') {\n\t\t\tif (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);\n\t\t\telse node.setAttribute(name, value);\n\t\t}\n\t}\n}\n\n\n/** Attempt to set a DOM property to the given value.\n *\tIE & FF throw for certain property-value combinations.\n */\nfunction setProperty(node, name, value) {\n\ttry {\n\t\tnode[name] = value;\n\t} catch (e) { }\n}\n\n\n/** Proxy an event to hooked event handlers\n *\t@private\n */\nfunction eventProxy(e) {\n\treturn this._listeners[e.type](options.event && options.event(e) || e);\n}\n","import { ATTR_KEY } from '../constants';\nimport { isSameNodeType, isNamedNode } from './index';\nimport { buildComponentFromVNode } from './component';\nimport { createNode, setAccessor } from '../dom/index';\nimport { unmountComponent } from './component';\nimport options from '../options';\n\n\n/** Queue of components that have been mounted and are awaiting componentDidMount */\nexport const mounts = [];\n\n/** Diff recursion count, used to track the end of the diff cycle. */\nexport let diffLevel = 0;\n\n/** Global flag indicating if the diff is currently within an SVG */\nlet isSvgMode = false;\n\n/** Global flag indicating if the diff is performing hydration */\nlet hydrating = false;\n\n/** Invoke queued componentDidMount lifecycle methods */\nexport function flushMounts() {\n\tlet c;\n\twhile ((c=mounts.pop())) {\n\t\tif (options.afterMount) options.afterMount(c);\n\t\tif (c.componentDidMount) c.componentDidMount();\n\t}\n}\n\n\n/** Apply differences in a given vnode (and it's deep children) to a real DOM Node.\n *\t@param {Element} [dom=null]\t\tA DOM node to mutate into the shape of the `vnode`\n *\t@param {VNode} vnode\t\t\tA VNode (with descendants forming a tree) representing the desired DOM structure\n *\t@returns {Element} dom\t\t\tThe created/mutated element\n *\t@private\n */\nexport function diff(dom, vnode, context, mountAll, parent, componentRoot) {\n\t// diffLevel having been 0 here indicates initial entry into the diff (not a subdiff)\n\tif (!diffLevel++) {\n\t\t// when first starting the diff, check if we're diffing an SVG or within an SVG\n\t\tisSvgMode = parent!=null && parent.ownerSVGElement!==undefined;\n\n\t\t// hydration is inidicated by the existing element to be diffed not having a prop cache\n\t\thydrating = dom!=null && !(ATTR_KEY in dom);\n\t}\n\n\tlet ret = idiff(dom, vnode, context, mountAll, componentRoot);\n\n\t// append the element if its a new parent\n\tif (parent && ret.parentNode!==parent) parent.appendChild(ret);\n\n\t// diffLevel being reduced to 0 means we're exiting the diff\n\tif (!--diffLevel) {\n\t\thydrating = false;\n\t\t// invoke queued componentDidMount lifecycle methods\n\t\tif (!componentRoot) flushMounts();\n\t}\n\n\treturn ret;\n}\n\n\nfunction idiff(dom, vnode, context, mountAll, componentRoot) {\n\tlet out = dom,\n\t\tprevSvgMode = isSvgMode;\n\n\t// empty values (null & undefined) render as empty Text nodes\n\tif (vnode==null) vnode = '';\n\n\n\t// Fast case: Strings create/update Text nodes.\n\tif (typeof vnode==='string') {\n\n\t\t// update if it's already a Text node\n\t\tif (dom && dom.splitText!==undefined && dom.parentNode && (!dom._component || componentRoot)) {\n\t\t\tif (dom.nodeValue!=vnode) {\n\t\t\t\tdom.nodeValue = vnode;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// it wasn't a Text node: replace it with one and recycle the old Element\n\t\t\tout = document.createTextNode(vnode);\n\t\t\tif (dom) {\n\t\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\t\t\t\trecollectNodeTree(dom, true);\n\t\t\t}\n\t\t}\n\n\t\tout[ATTR_KEY] = true;\n\n\t\treturn out;\n\t}\n\n\n\t// If the VNode represents a Component, perform a component diff.\n\tif (typeof vnode.nodeName==='function') {\n\t\treturn buildComponentFromVNode(dom, vnode, context, mountAll);\n\t}\n\n\n\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tisSvgMode = vnode.nodeName==='svg' ? true : vnode.nodeName==='foreignObject' ? false : isSvgMode;\n\n\n\tif (!dom || !isNamedNode(dom, vnode.nodeName)) {\n\t\tout = createNode(vnode.nodeName, isSvgMode);\n\n\t\tif (dom) {\n\t\t\t// move children into the replacement node\n\t\t\twhile (dom.firstChild) out.appendChild(dom.firstChild);\n\n\t\t\t// if the previous Element was mounted into the DOM, replace it inline\n\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\n\t\t\t// recycle the old element (skips non-Element node types)\n\t\t\trecollectNodeTree(dom, true);\n\t\t}\n\t}\n\n\n\tlet fc = out.firstChild,\n\t\tprops = out[ATTR_KEY]!=null ? out[ATTR_KEY] : (out[ATTR_KEY] = {}),\n\t\tvchildren = vnode.children;\n\n\t// Optimization: fast-path for elements containing a single TextNode:\n\tif (!hydrating && vchildren && vchildren.length===1 && typeof vchildren[0]==='string' && fc!=null && fc.splitText!==undefined && fc.nextSibling===null) {\n\t\tif (fc.nodeValue!=vchildren[0]) {\n\t\t\tfc.nodeValue = vchildren[0];\n\t\t}\n\t}\n\t// otherwise, if there are existing or new children, diff them:\n\telse if (vchildren && vchildren.length || fc!=null) {\n\t\tinnerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML!=null);\n\t}\n\n\n\t// Apply attributes/props from VNode to the DOM Element:\n\tdiffAttributes(out, vnode.attributes, props);\n\n\n\t// invoke original ref (from before resolving Pure Functional Components):\n\n\tisSvgMode = prevSvgMode;\n\n\treturn out;\n}\n\n\n/** Apply child and attribute changes between a VNode and a DOM Node to the DOM.\n *\t@param {Element} dom\t\t\tElement whose children should be compared & mutated\n *\t@param {Array} vchildren\t\tArray of VNodes to compare to `dom.childNodes`\n *\t@param {Object} context\t\t\tImplicitly descendant context object (from most recent `getChildContext()`)\n *\t@param {Boolean} mountAll\n *\t@param {Boolean} isHydrating\tIf `true`, consumes externally created elements similar to hydration\n */\nfunction innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {\n\tlet originalChildren = dom.childNodes,\n\t\tchildren = [],\n\t\tkeyed = {},\n\t\tkeyedLen = 0,\n\t\tmin = 0,\n\t\tlen = originalChildren.length,\n\t\tchildrenLen = 0,\n\t\tvlen = vchildren ? vchildren.length : 0,\n\t\tj, c, vchild, child;\n\n\tif (len!==0) {\n\t\tfor (let i=0; i<len; i++) {\n\t\t\tlet child = originalChildren[i],\n\t\t\t\tprops = child[ATTR_KEY],\n\t\t\t\tkey = vlen && props ? child._component ? child._component.__key : props.key : null;\n\t\t\tif (key!=null) {\n\t\t\t\tkeyedLen++;\n\t\t\t\tkeyed[key] = child;\n\t\t\t}\n\t\t\telse if (props || (child.splitText!==undefined ? (isHydrating ? child.nodeValue.trim() : true) : isHydrating)) {\n\t\t\t\tchildren[childrenLen++] = child;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (vlen!==0) {\n\t\tfor (let i=0; i<vlen; i++) {\n\t\t\tvchild = vchildren[i];\n\t\t\tchild = null;\n\n\t\t\t// attempt to find a node based on key matching\n\t\t\tlet key = vchild.key;\n\t\t\tif (key!=null) {\n\t\t\t\tif (keyedLen && keyed[key]!==undefined) {\n\t\t\t\t\tchild = keyed[key];\n\t\t\t\t\tkeyed[key] = undefined;\n\t\t\t\t\tkeyedLen--;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// attempt to pluck a node of the same type from the existing children\n\t\t\telse if (!child && min<childrenLen) {\n\t\t\t\tfor (j=min; j<childrenLen; j++) {\n\t\t\t\t\tif (children[j]!==undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {\n\t\t\t\t\t\tchild = c;\n\t\t\t\t\t\tchildren[j] = undefined;\n\t\t\t\t\t\tif (j===childrenLen-1) childrenLen--;\n\t\t\t\t\t\tif (j===min) min++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// morph the matched/found/created DOM child to match vchild (deep)\n\t\t\tchild = idiff(child, vchild, context, mountAll);\n\n\t\t\tif (child && child!==dom) {\n\t\t\t\tif (i>=len) {\n\t\t\t\t\tdom.appendChild(child);\n\t\t\t\t}\n\t\t\t\telse if (child!==originalChildren[i]) {\n\t\t\t\t\tif (child===originalChildren[i+1]) {\n\t\t\t\t\t\toriginalChildren[i].remove();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tdom.insertBefore(child, originalChildren[i] || null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\tif (keyedLen) {\n\t\tfor (let i in keyed) if (keyed[i]!==undefined) recollectNodeTree(keyed[i], false);\n\t}\n\n\t// remove orphaned children\n\twhile (min<=childrenLen) {\n\t\tif ((child = children[childrenLen--])!==undefined) recollectNodeTree(child, false);\n\t}\n}\n\n\n\n/** Recursively recycle (or just unmount) a node an its descendants.\n *\t@param {Node} node\t\t\t\t\t\tDOM node to start unmount/removal from\n *\t@param {Boolean} [unmountOnly=false]\tIf `true`, only triggers unmount lifecycle, skips removal\n */\nexport function recollectNodeTree(node, unmountOnly) {\n\tlet component = node._component;\n\tif (component) {\n\t\t// if node is owned by a Component, unmount that component (ends up recursing back here)\n\t\tunmountComponent(component);\n\t}\n\telse {\n\t\t// If the node's VNode had a ref function, invoke it with null here.\n\t\t// (this is part of the React spec, and smart for unsetting references)\n\t\tif (node[ATTR_KEY]!=null && node[ATTR_KEY].ref) node[ATTR_KEY].ref(null);\n\n\t\tif (unmountOnly===false || node[ATTR_KEY]==null) {\n\t\t\tnode.remove();\n\t\t}\n\n\t\tremoveChildren(node);\n\n\t\t// Recollect/unmount all children.\n\t\t// - we use .lastChild here because it causes less reflow than .firstChild\n\t\t// - it's also cheaper than accessing the .childNodes Live NodeList\n\t}\n}\n\n\nexport function removeChildren(node) {\n\tnode = node.lastChild;\n\twhile (node) {\n\t\tlet next = node.previousSibling;\n\t\trecollectNodeTree(node, true);\n\t\tnode = next;\n\t}\n}\n\n\n/** Apply differences in attributes from a VNode to the given DOM Element.\n *\t@param {Element} dom\t\tElement with attributes to diff `attrs` against\n *\t@param {Object} attrs\t\tThe desired end-state key-value attribute pairs\n *\t@param {Object} old\t\t\tCurrent/previous attributes (from previous VNode or element's prop cache)\n */\nfunction diffAttributes(dom, attrs, old) {\n\t// remove attributes no longer present on the vnode by setting them to undefined\n\tlet name;\n\tfor (name in old) {\n\t\tif (!(attrs && attrs[name]!=null) && old[name]!=null) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);\n\t\t}\n\t}\n\n\t// add new & update changed attributes\n\tfor (name in attrs) {\n\t\tif (name!=='children' && name!=='innerHTML' && (!(name in old) || attrs[name]!==(name==='value' || name==='checked' ? dom[name] : old[name]))) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);\n\t\t}\n\t}\n}\n","import { Component } from '../component';\n\n/** Retains a pool of Components for re-use, keyed on component name.\n *\tNote: since component names are not unique or even necessarily available, these are primarily a form of sharding.\n *\t@private\n */\nconst components = {};\n\n\n/** Reclaim a component for later re-use by the recycler. */\nexport function collectComponent(component) {\n\tlet name = component.constructor.name;\n\t(components[name] || (components[name] = [])).push(component);\n}\n\n\n/** Create a component. Normalizes differences between PFC's and classful Components. */\nexport function createComponent(Ctor, props, context) {\n\tlet list = components[Ctor.name],\n\t\tinst;\n\n\tif (Ctor.prototype && Ctor.prototype.render) {\n\t\tinst = new Ctor(props, context);\n\t\tComponent.call(inst, props, context);\n\t}\n\telse {\n\t\tinst = new Component(props, context);\n\t\tinst.constructor = Ctor;\n\t\tinst.render = doRender;\n\t}\n\n\n\tif (list) {\n\t\tfor (let i=list.length; i--; ) {\n\t\t\tif (list[i].constructor===Ctor) {\n\t\t\t\tinst.nextBase = list[i].nextBase;\n\t\t\t\tlist.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn inst;\n}\n\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n","import { SYNC_RENDER, NO_RENDER, FORCE_RENDER, ASYNC_RENDER, ATTR_KEY } from '../constants';\nimport options from '../options';\nimport { extend } from '../util';\nimport { enqueueRender } from '../render-queue';\nimport { getNodeProps } from './index';\nimport { diff, mounts, diffLevel, flushMounts, recollectNodeTree, removeChildren } from './diff';\nimport { createComponent, collectComponent } from './component-recycler';\n\n\n\n/** Set a component's `props` (generally derived from JSX attributes).\n *\t@param {Object} props\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.renderSync=false]\tIf `true` and {@link options.syncComponentUpdates} is `true`, triggers synchronous rendering.\n *\t@param {boolean} [opts.render=true]\t\t\tIf `false`, no render will be triggered.\n */\nexport function setComponentProps(component, props, opts, context, mountAll) {\n\tif (component._disable) return;\n\tcomponent._disable = true;\n\n\tif ((component.__ref = props.ref)) delete props.ref;\n\tif ((component.__key = props.key)) delete props.key;\n\n\tif (!component.base || mountAll) {\n\t\tif (component.componentWillMount) component.componentWillMount();\n\t}\n\telse if (component.componentWillReceiveProps) {\n\t\tcomponent.componentWillReceiveProps(props, context);\n\t}\n\n\tif (context && context!==component.context) {\n\t\tif (!component.prevContext) component.prevContext = component.context;\n\t\tcomponent.context = context;\n\t}\n\n\tif (!component.prevProps) component.prevProps = component.props;\n\tcomponent.props = props;\n\n\tcomponent._disable = false;\n\n\tif (opts!==NO_RENDER) {\n\t\tif (opts===SYNC_RENDER || options.syncComponentUpdates!==false || !component.base) {\n\t\t\trenderComponent(component, SYNC_RENDER, mountAll);\n\t\t}\n\t\telse {\n\t\t\tenqueueRender(component);\n\t\t}\n\t}\n\n\tif (component.__ref) component.__ref(component);\n}\n\n\n\n/** Render a Component, triggering necessary lifecycle events and taking High-Order Components into account.\n *\t@param {Component} component\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.build=false]\t\tIf `true`, component will build and store a DOM node if not already associated with one.\n *\t@private\n */\nexport function renderComponent(component, opts, mountAll, isChild) {\n\tif (component._disable) return;\n\n\tlet props = component.props,\n\t\tstate = component.state,\n\t\tcontext = component.context,\n\t\tpreviousProps = component.prevProps || props,\n\t\tpreviousState = component.prevState || state,\n\t\tpreviousContext = component.prevContext || context,\n\t\tisUpdate = component.base,\n\t\tnextBase = component.nextBase,\n\t\tinitialBase = isUpdate || nextBase,\n\t\tinitialChildComponent = component._component,\n\t\tskip = false,\n\t\trendered, inst, cbase;\n\n\t// if updating\n\tif (isUpdate) {\n\t\tcomponent.props = previousProps;\n\t\tcomponent.state = previousState;\n\t\tcomponent.context = previousContext;\n\t\tif (opts!==FORCE_RENDER\n\t\t\t&& component.shouldComponentUpdate\n\t\t\t&& component.shouldComponentUpdate(props, state, context) === false) {\n\t\t\tskip = true;\n\t\t}\n\t\telse if (component.componentWillUpdate) {\n\t\t\tcomponent.componentWillUpdate(props, state, context);\n\t\t}\n\t\tcomponent.props = props;\n\t\tcomponent.state = state;\n\t\tcomponent.context = context;\n\t}\n\n\tcomponent.prevProps = component.prevState = component.prevContext = component.nextBase = null;\n\tcomponent._dirty = false;\n\n\tif (!skip) {\n\t\trendered = component.render(props, state, context);\n\n\t\t// context to pass to the child, can be updated via (grand-)parent component\n\t\tif (component.getChildContext) {\n\t\t\tcontext = extend(extend({}, context), component.getChildContext());\n\t\t}\n\n\t\tlet childComponent = rendered && rendered.nodeName,\n\t\t\ttoUnmount, base;\n\n\t\tif (typeof childComponent==='function') {\n\t\t\t// set up high order component link\n\n\t\t\tlet childProps = getNodeProps(rendered);\n\t\t\tinst = initialChildComponent;\n\n\t\t\tif (inst && inst.constructor===childComponent && childProps.key==inst.__key) {\n\t\t\t\tsetComponentProps(inst, childProps, SYNC_RENDER, context, false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttoUnmount = inst;\n\n\t\t\t\tcomponent._component = inst = createComponent(childComponent, childProps, context);\n\t\t\t\tinst.nextBase = inst.nextBase || nextBase;\n\t\t\t\tinst._parentComponent = component;\n\t\t\t\tsetComponentProps(inst, childProps, NO_RENDER, context, false);\n\t\t\t\trenderComponent(inst, SYNC_RENDER, mountAll, true);\n\t\t\t}\n\n\t\t\tbase = inst.base;\n\t\t}\n\t\telse {\n\t\t\tcbase = initialBase;\n\n\t\t\t// destroy high order component link\n\t\t\ttoUnmount = initialChildComponent;\n\t\t\tif (toUnmount) {\n\t\t\t\tcbase = component._component = null;\n\t\t\t}\n\n\t\t\tif (initialBase || opts===SYNC_RENDER) {\n\t\t\t\tif (cbase) cbase._component = null;\n\t\t\t\tbase = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true);\n\t\t\t}\n\t\t}\n\n\t\tif (initialBase && base!==initialBase && inst!==initialChildComponent) {\n\t\t\tlet baseParent = initialBase.parentNode;\n\t\t\tif (baseParent && base!==baseParent) {\n\t\t\t\tbaseParent.replaceChild(base, initialBase);\n\n\t\t\t\tif (!toUnmount) {\n\t\t\t\t\tinitialBase._component = null;\n\t\t\t\t\trecollectNodeTree(initialBase, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (toUnmount) {\n\t\t\tunmountComponent(toUnmount);\n\t\t}\n\n\t\tcomponent.base = base;\n\t\tif (base && !isChild) {\n\t\t\tlet componentRef = component,\n\t\t\t\tt = component;\n\t\t\twhile ((t=t._parentComponent)) {\n\t\t\t\t(componentRef = t).base = base;\n\t\t\t}\n\t\t\tbase._component = componentRef;\n\t\t\tbase._componentConstructor = componentRef.constructor;\n\t\t}\n\t}\n\n\tif (!isUpdate || mountAll) {\n\t\tmounts.unshift(component);\n\t}\n\telse if (!skip) {\n\t\tif (component.componentDidUpdate) {\n\t\t\tcomponent.componentDidUpdate(previousProps, previousState, previousContext);\n\t\t}\n\t\tif (options.afterUpdate) options.afterUpdate(component);\n\t}\n\n\tif (component._renderCallbacks!=null) {\n\t\twhile (component._renderCallbacks.length) component._renderCallbacks.pop().call(component);\n\t}\n\n\tif (!diffLevel && !isChild) flushMounts();\n}\n\n\n\n/** Apply the Component referenced by a VNode to the DOM.\n *\t@param {Element} dom\tThe DOM node to mutate\n *\t@param {VNode} vnode\tA Component-referencing VNode\n *\t@returns {Element} dom\tThe created/mutated element\n *\t@private\n */\nexport function buildComponentFromVNode(dom, vnode, context, mountAll) {\n\tlet c = dom && dom._component,\n\t\toriginalComponent = c,\n\t\toldDom = dom,\n\t\tisDirectOwner = c && dom._componentConstructor===vnode.nodeName,\n\t\tisOwner = isDirectOwner,\n\t\tprops = getNodeProps(vnode);\n\twhile (c && !isOwner && (c=c._parentComponent)) {\n\t\tisOwner = c.constructor===vnode.nodeName;\n\t}\n\n\tif (c && isOwner && (!mountAll || c._component)) {\n\t\tsetComponentProps(c, props, ASYNC_RENDER, context, mountAll);\n\t\tdom = c.base;\n\t}\n\telse {\n\t\tif (originalComponent && !isDirectOwner) {\n\t\t\tunmountComponent(originalComponent);\n\t\t\tdom = oldDom = null;\n\t\t}\n\n\t\tc = createComponent(vnode.nodeName, props, context);\n\t\tif (dom && !c.nextBase) {\n\t\t\tc.nextBase = dom;\n\t\t\t// passing dom/oldDom as nextBase will recycle it if unused, so bypass recycling on L241:\n\t\t\toldDom = null;\n\t\t}\n\t\tsetComponentProps(c, props, SYNC_RENDER, context, mountAll);\n\t\tdom = c.base;\n\n\t\tif (oldDom && dom!==oldDom) {\n\t\t\toldDom._component = null;\n\t\t\trecollectNodeTree(oldDom, false);\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n\n\n/** Remove a component from the DOM and recycle it.\n *\t@param {Element} dom\t\t\tA DOM node from which to unmount the given Component\n *\t@param {Component} component\tThe Component instance to unmount\n *\t@private\n */\nexport function unmountComponent(component) {\n\tif (options.beforeUnmount) options.beforeUnmount(component);\n\n\t// console.log(`${remove?'Removing':'Unmounting'} component: ${component.constructor.name}`);\n\tlet base = component.base;\n\n\tcomponent._disable = true;\n\n\tif (component.componentWillUnmount) component.componentWillUnmount();\n\n\tcomponent.base = null;\n\n\t// recursively tear down & recollect high-order component children:\n\tlet inner = component._component;\n\tif (inner) {\n\t\tunmountComponent(inner);\n\t}\n\telse if (base) {\n\t\tif (base[ATTR_KEY] && base[ATTR_KEY].ref) base[ATTR_KEY].ref(null);\n\n\t\tcomponent.nextBase = base;\n\n\t\tbase.remove();\n\t\tcollectComponent(component);\n\n\t\tremoveChildren(base);\n\t\t// removeOrphanedChildren(base.childNodes, true);\n\t}\n\n\tif (component.__ref) component.__ref(null);\n}\n","/** Global options\n *\t@public\n *\t@namespace options {Object}\n */\nexport default {\n\n\t/** If `true`, `prop` changes trigger synchronous component updates.\n\t *\t@name syncComponentUpdates\n\t *\t@type Boolean\n\t *\t@default true\n\t */\n\t//syncComponentUpdates: true,\n\n\t/** Processes all created VNodes.\n\t *\t@param {VNode} vnode\tA newly-created VNode to normalize/process\n\t */\n\t//vnode(vnode) { }\n\n\t/** Hook invoked after a component is mounted. */\n\t// afterMount(component) { }\n\n\t/** Hook invoked after the DOM is updated with a component's latest render. */\n\t// afterUpdate(component) { }\n\n\t/** Hook invoked immediately before a component is unmounted. */\n\t// beforeUnmount(component) { }\n};\n","import { FORCE_RENDER } from './constants';\nimport { extend } from './util';\nimport { renderComponent } from './vdom/component';\nimport { enqueueRender } from './render-queue';\n\n/** Base Component class, for the ES Class method of creating Components\n *\t@public\n *\n *\t@example\n *\tclass MyFoo extends Component {\n *\t\trender(props, state) {\n *\t\t\treturn <div />;\n *\t\t}\n *\t}\n */\nexport function Component(props, context) {\n\t/** @private */\n\tthis._dirty = true;\n\t// /** @public */\n\t// this._disableRendering = false;\n\t// /** @public */\n\t// this.prevState = this.prevProps = this.prevContext = this.base = this.nextBase = this._parentComponent = this._component = this.__ref = this.__key = this._linkedStates = this._renderCallbacks = null;\n\t/** @public */\n\tthis.context = context;\n\t/** @type {object} */\n\tthis.props = props;\n\t/** @type {object} */\n\tthis.state = this.state || {};\n}\n\n\nextend(Component.prototype, {\n\n\t/** Returns a `boolean` value indicating if the component should re-render when receiving the given `props` and `state`.\n\t *\t@param {object} nextProps\n\t *\t@param {object} nextState\n\t *\t@param {object} nextContext\n\t *\t@returns {Boolean} should the component re-render\n\t *\t@name shouldComponentUpdate\n\t *\t@function\n\t */\n\t// shouldComponentUpdate() {\n\t// \treturn true;\n\t// },\n\n\n\n\n\t/** Update component state by copying properties from `state` to `this.state`.\n\t *\t@param {object} state\t\tA hash of state properties to update with new values\n\t */\n\tsetState(state, callback) {\n\t\tlet s = this.state;\n\t\tif (!this.prevState) this.prevState = extend({}, s);\n\t\textend(s, typeof state==='function' ? state(s, this.props) : state);\n\t\tif (callback) (this._renderCallbacks = (this._renderCallbacks || [])).push(callback);\n\t\tenqueueRender(this);\n\t},\n\n\n\t/** Immediately perform a synchronous re-render of the component.\n\t *\t@param {function} callback\t\tA function to be called after component is re-rendered.\n\t *\t@private\n\t */\n\tforceUpdate(callback) {\n\t\tif (callback) (this._renderCallbacks = (this._renderCallbacks || [])).push(callback);\n\t\trenderComponent(this, FORCE_RENDER);\n\t},\n\n\n\t/** Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n\t *\tVirtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n\t *\t@param {object} props\t\tProps (eg: JSX attributes) received from parent element/component\n\t *\t@param {object} state\t\tThe component's current state\n\t *\t@param {object} context\t\tContext object (if a parent component has provided context)\n\t *\t@returns VNode\n\t */\n\trender() {}\n\n});\n","import { diff } from './vdom/diff';\n\n/** Render JSX into a `parent` Element.\n *\t@param {VNode} vnode\t\tA (JSX) VNode to render\n *\t@param {Element} parent\t\tDOM element to render into\n *\t@param {Element} [merge]\tAttempt to re-use an existing DOM tree rooted at `merge`\n *\t@public\n *\n *\t@example\n *\t// render a div into <body>:\n *\trender(<div id=\"hello\">hello!</div>, document.body);\n *\n *\t@example\n *\t// render a \"Thing\" component into #foo:\n *\tconst Thing = ({ name }) => <span>{ name }</span>;\n *\trender(<Thing name=\"one\" />, document.querySelector('#foo'));\n */\nexport function render(vnode, parent, merge) {\n\treturn diff(merge, vnode, {}, false, parent, false);\n}\n","import { h, h as createElement } from './h';\nimport { cloneElement } from './clone-element';\nimport { Component } from './component';\nimport { render } from './render';\nimport { rerender } from './render-queue';\nimport options from './options';\n\nexport default {\n\th,\n\tcreateElement,\n\tcloneElement,\n\tComponent,\n\trender,\n\trerender,\n\toptions\n};\n\nexport {\n\th,\n\tcreateElement,\n\tcloneElement,\n\tComponent,\n\trender,\n\trerender,\n\toptions\n};\n"]}