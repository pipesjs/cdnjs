/* Generated by Opal 0.11.0.dev */
Opal.modules["chrome-inline-macro/extension"] = function(Opal) {
  var self = Opal.top, $scope = Opal, $scopes = [Opal], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$include', '$use_dsl', '$named', '$parse_content_as', '$empty?', '$[]', '$render', '$create_anchor']);
  
  if (Opal.const_get($scopes, 'RUBY_ENGINE', true, true)['$==']("opal")) {
    } else {
    nil
  };
  self.$include(Opal.const_get([Opal.Object.$$scope], 'Asciidoctor', true, true));
  return (function($base, $super, $visibility_scopes) {
    function $ChromeUriMacro(){};
    var self = $ChromeUriMacro = $klass($base, $super, 'ChromeUriMacro', $ChromeUriMacro);

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_ChromeUriMacro_process_1;

    
    self.$use_dsl();
    self.$named("chrome");
    self.$parse_content_as("text");
    return (Opal.defn(self, '$process', TMP_ChromeUriMacro_process_1 = function $$process(parent, target, attrs) {
      var $a, self = this, text = nil;

      
      target = "" + "chrome:" + (target);
      if ((($a = (text = attrs['$[]']("text"))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        text = target};
      return self.$create_anchor(parent, text, $hash2(["type", "target"], {"type": "link", "target": target})).$render();
    }, TMP_ChromeUriMacro_process_1.$$arity = 3), nil) && 'process';
  })($scope.base, Opal.const_get([Opal.const_get($scopes, 'Extensions', true, true).$$scope], 'InlineMacroProcessor', true, true), $scopes);
};

/* Generated by Opal 0.11.0.dev */
(function(Opal) {
  var TMP_1, self = Opal.top, $scope = Opal, $scopes = [Opal], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $send = Opal.send;

  Opal.add_stubs(['$==', '$require', '$register', '$inline_macro']);
  
  if (Opal.const_get($scopes, 'RUBY_ENGINE', true, true)['$==']("opal")) {
    
    self.$require("chrome-inline-macro/extension");
    } else {
    nil
  };
  return $send(Opal.const_get($scopes, 'Extensions', true, true), 'register', ["uri_schemes"], (TMP_1 = function(){var self = TMP_1.$$s || this;

  return self.$inline_macro(Opal.const_get($scopes, 'ChromeUriMacro', true, true))}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1));
})(Opal);
