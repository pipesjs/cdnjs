/* Generated by Opal 0.11.0.dev */
Opal.modules["chart-block-macro/extension"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, $scopes = [Opal], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$==', '$include', '$use_dsl', '$named', '$name_positional_attributes', '$normalize_asset_path', '$read_asset', '$nil?', '$empty?', '$resolve_engine', '$document', '$parse', '$process', '$create_pass_block', '$on_context', '$parse_content_as', '$source', '$at_location', '$key?', '$downcase', '$[]', '$attributes', '$===', '$prepare_data', '$bar', '$line', '$step', '$spline', '$get_chart_id', '$create_chart_div', '$chart_bar_script', '$to_html', '$chart_line_script', '$chart_step_script', '$chart_spline_script', '$+', '$uuid', '$shift', '$with_index', '$map', '$unshift', '$get_chart_height', '$get_chart_width', '$to_s', '$join', '$%', '$index', '$gsub', '$each_line', '$chomp', '$push', '$split', '$each', '$open', '$chr', '$rand']);
  
  if (Opal.const_get($scopes, 'RUBY_ENGINE', true, true)['$==']("opal")) {
    } else {
    nil
  };
  self.$include(Opal.const_get([Opal.Object.$$scope], 'Asciidoctor', true, true));
  (function($base, $super, $visibility_scopes) {
    function $ChartBlockMacro(){};
    var self = $ChartBlockMacro = $klass($base, $super, 'ChartBlockMacro', $ChartBlockMacro);

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_ChartBlockMacro_process_1;

    
    self.$use_dsl();
    self.$named("chart");
    self.$name_positional_attributes("type", "width", "height");
    return (Opal.defn(self, '$process', TMP_ChartBlockMacro_process_1 = function $$process(parent, target, attrs) {
      var $a, $b, self = this, data_path = nil, read_data = nil, engine = nil, raw_data = nil, html = nil;

      
      data_path = parent.$normalize_asset_path(target, "target");
      read_data = parent.$read_asset(data_path, $hash2(["warn_on_failure", "normalize"], {"warn_on_failure": true, "normalize": true}));
      if ((($a = ((($b = read_data['$nil?']()) !== false && $b !== nil && $b != null) ? $b : read_data['$empty?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        
        engine = Opal.const_get($scopes, 'ChartBackend', true, true).$resolve_engine(attrs, parent.$document());
        raw_data = Opal.const_get($scopes, 'PlainRubyCSV', true, true).$parse(read_data);
        html = Opal.const_get($scopes, 'ChartBackend', true, true).$process(engine, attrs, raw_data);
        return self.$create_pass_block(parent, html, attrs, $hash2(["subs"], {"subs": nil}));
      };
    }, TMP_ChartBlockMacro_process_1.$$arity = 3), nil) && 'process';
  })($scope.base, Opal.const_get([Opal.const_get($scopes, 'Extensions', true, true).$$scope], 'BlockMacroProcessor', true, true), $scopes);
  (function($base, $super, $visibility_scopes) {
    function $ChartBlockProcessor(){};
    var self = $ChartBlockProcessor = $klass($base, $super, 'ChartBlockProcessor', $ChartBlockProcessor);

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_ChartBlockProcessor_process_2;

    
    self.$use_dsl();
    self.$named("chart");
    self.$on_context("literal");
    self.$name_positional_attributes("type", "width", "height");
    self.$parse_content_as("raw");
    return (Opal.defn(self, '$process', TMP_ChartBlockProcessor_process_2 = function $$process(parent, reader, attrs) {
      var self = this, engine = nil, raw_data = nil, html = nil;

      
      engine = Opal.const_get($scopes, 'ChartBackend', true, true).$resolve_engine(attrs, parent.$document());
      raw_data = Opal.const_get($scopes, 'PlainRubyCSV', true, true).$parse(reader.$source());
      html = Opal.const_get($scopes, 'ChartBackend', true, true).$process(engine, attrs, raw_data);
      return self.$create_pass_block(parent, html, attrs, $hash2(["subs"], {"subs": nil}));
    }, TMP_ChartBlockProcessor_process_2.$$arity = 3), nil) && 'process';
  })($scope.base, Opal.const_get([Opal.const_get($scopes, 'Extensions', true, true).$$scope], 'BlockProcessor', true, true), $scopes);
  (function($base, $super, $visibility_scopes) {
    function $ChartAssetsDocinfoProcessor(){};
    var self = $ChartAssetsDocinfoProcessor = $klass($base, $super, 'ChartAssetsDocinfoProcessor', $ChartAssetsDocinfoProcessor);

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_ChartAssetsDocinfoProcessor_process_3;

    
    self.$use_dsl();
    self.$at_location("header");
    Opal.cdecl($scope, 'C3JS_STYLESHEET', "<link rel=\"stylesheet\" href=\"http://cdnjs.cloudflare.com/ajax/libs/c3/0.3.0/c3.min.css\">");
    Opal.cdecl($scope, 'D3JS_SCRIPT', "<script src=\"http://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js\" charset=\"utf-8\"></script>");
    Opal.cdecl($scope, 'C3JS_SCRIPT', "<script src=\"http://cdnjs.cloudflare.com/ajax/libs/c3/0.3.0/c3.min.js\"></script>");
    Opal.cdecl($scope, 'CHARTIST_STYLESHEET', "<link rel=\"stylesheet\" href=\"http://cdn.jsdelivr.net/chartist.js/latest/chartist.min.css\">");
    Opal.cdecl($scope, 'CHARTIST_SCRIPT', "<script src=\"http://cdn.jsdelivr.net/chartist.js/latest/chartist.min.js\"></script>");
    Opal.cdecl($scope, 'CHARTJS_SCRIPT', "<script src=\"http://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js\"></script>");
    return (Opal.defn(self, '$process', TMP_ChartAssetsDocinfoProcessor_process_3 = function $$process(doc) {
      var self = this;

      return "" + "\n" + (Opal.const_get($scopes, 'C3JS_STYLESHEET', true, true)) + "\n" + (Opal.const_get($scopes, 'D3JS_SCRIPT', true, true)) + "\n" + (Opal.const_get($scopes, 'C3JS_SCRIPT', true, true)) + "\n" + (Opal.const_get($scopes, 'CHARTIST_STYLESHEET', true, true)) + "\n" + (Opal.const_get($scopes, 'CHARTIST_SCRIPT', true, true)) + "\n" + (Opal.const_get($scopes, 'CHARTJS_SCRIPT', true, true))
    }, TMP_ChartAssetsDocinfoProcessor_process_3.$$arity = 1), nil) && 'process';
  })($scope.base, Opal.const_get([Opal.const_get($scopes, 'Extensions', true, true).$$scope], 'DocinfoProcessor', true, true), $scopes);
  (function($base, $super, $visibility_scopes) {
    function $ChartBackend(){};
    var self = $ChartBackend = $klass($base, $super, 'ChartBackend', $ChartBackend);

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_ChartBackend_resolve_engine_4, TMP_ChartBackend_process_5;

    
    Opal.defs(self, '$resolve_engine', TMP_ChartBackend_resolve_engine_4 = function $$resolve_engine(attrs, document) {
      var $a, self = this;

      if ((($a = attrs['$key?']("engine")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return attrs['$[]']("engine").$downcase()
      } else if ((($a = document.$attributes()['$key?']("chart-engine")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return document.$attributes()['$[]']("chart-engine").$downcase()
        } else {
        return "c3js"
      }
    }, TMP_ChartBackend_resolve_engine_4.$$arity = 2);
    return Opal.defs(self, '$process', TMP_ChartBackend_process_5 = function $$process(engine, attrs, raw_data) {
      var $a, $b, self = this, type = nil, $case = nil, data = nil, labels = nil;

      
      type = attrs['$[]']("type");
      return (function() {$case = engine;
if ("c3js"['$===']($case)) {
      $b = Opal.const_get($scopes, 'C3jsChartBuilder', true, true).$prepare_data(raw_data), $a = Opal.to_ary($b), (data = ($a[0] == null ? nil : $a[0])), (labels = ($a[1] == null ? nil : $a[1])), $b;
      
      return (function() {$case = type;
if ("bar"['$===']($case)) {return Opal.const_get($scopes, 'C3jsChartBuilder', true, true).$bar(data, labels, attrs)}else if ("line"['$===']($case)) {return Opal.const_get($scopes, 'C3jsChartBuilder', true, true).$line(data, labels, attrs)}else if ("step"['$===']($case)) {return Opal.const_get($scopes, 'C3jsChartBuilder', true, true).$step(data, labels, attrs)}else if ("spline"['$===']($case)) {return Opal.const_get($scopes, 'C3jsChartBuilder', true, true).$spline(data, labels, attrs)}else {return Opal.const_get($scopes, 'C3jsChartBuilder', true, true).$line(data, labels, attrs)}})();;}else if ("chartist"['$===']($case)) {
      $b = Opal.const_get($scopes, 'ChartistChartBuilder', true, true).$prepare_data(raw_data), $a = Opal.to_ary($b), (data = ($a[0] == null ? nil : $a[0])), (labels = ($a[1] == null ? nil : $a[1])), $b;
      
      return (function() {$case = type;
if ("bar"['$===']($case)) {return Opal.const_get($scopes, 'ChartistChartBuilder', true, true).$bar(data, labels, attrs)}else if ("line"['$===']($case)) {return Opal.const_get($scopes, 'ChartistChartBuilder', true, true).$line(data, labels, attrs)}else {return Opal.const_get($scopes, 'ChartistChartBuilder', true, true).$line(data, labels, attrs)}})();;}else if ("chartjs"['$===']($case)) {
      $b = Opal.const_get($scopes, 'ChartjsChartBuilder', true, true).$prepare_data(raw_data), $a = Opal.to_ary($b), (data = ($a[0] == null ? nil : $a[0])), (labels = ($a[1] == null ? nil : $a[1])), $b;
      
      return (function() {$case = type;
if ("line"['$===']($case)) {return Opal.const_get($scopes, 'ChartjsChartBuilder', true, true).$line(data, labels, attrs)}else {return Opal.const_get($scopes, 'ChartjsChartBuilder', true, true).$line(data, labels, attrs)}})();;}else { return nil }})();
    }, TMP_ChartBackend_process_5.$$arity = 3);
  })($scope.base, null, $scopes);
  (function($base, $super, $visibility_scopes) {
    function $C3jsChartBuilder(){};
    var self = $C3jsChartBuilder = $klass($base, $super, 'C3jsChartBuilder', $C3jsChartBuilder);

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_C3jsChartBuilder_bar_6, TMP_C3jsChartBuilder_line_7, TMP_C3jsChartBuilder_step_8, TMP_C3jsChartBuilder_spline_9, TMP_C3jsChartBuilder_create_chart_div_10, TMP_C3jsChartBuilder_get_chart_id_11, TMP_C3jsChartBuilder_prepare_data_13, TMP_C3jsChartBuilder_chart_bar_script_14, TMP_C3jsChartBuilder_chart_line_script_15, TMP_C3jsChartBuilder_chart_step_script_16, TMP_C3jsChartBuilder_chart_spline_script_17, TMP_C3jsChartBuilder_to_html_18, TMP_C3jsChartBuilder_get_chart_height_19, TMP_C3jsChartBuilder_get_chart_width_20;

    
    Opal.defs(self, '$bar', TMP_C3jsChartBuilder_bar_6 = function $$bar(data, labels, attrs) {
      var self = this, chart_id = nil, chart_div = nil, chart_generate_script = nil;

      
      chart_id = self.$get_chart_id();
      chart_div = self.$create_chart_div(chart_id);
      chart_generate_script = self.$chart_bar_script(chart_id, data, labels, attrs);
      return self.$to_html(chart_div, chart_generate_script);
    }, TMP_C3jsChartBuilder_bar_6.$$arity = 3);
    Opal.defs(self, '$line', TMP_C3jsChartBuilder_line_7 = function $$line(data, labels, attrs) {
      var self = this, chart_id = nil, chart_div = nil, chart_generate_script = nil;

      
      chart_id = self.$get_chart_id();
      chart_div = self.$create_chart_div(chart_id);
      chart_generate_script = self.$chart_line_script(chart_id, data, labels, attrs);
      return self.$to_html(chart_div, chart_generate_script);
    }, TMP_C3jsChartBuilder_line_7.$$arity = 3);
    Opal.defs(self, '$step', TMP_C3jsChartBuilder_step_8 = function $$step(data, labels, attrs) {
      var self = this, chart_id = nil, chart_div = nil, chart_generate_script = nil;

      
      chart_id = self.$get_chart_id();
      chart_div = self.$create_chart_div(chart_id);
      chart_generate_script = self.$chart_step_script(chart_id, data, labels, attrs);
      return self.$to_html(chart_div, chart_generate_script);
    }, TMP_C3jsChartBuilder_step_8.$$arity = 3);
    Opal.defs(self, '$spline', TMP_C3jsChartBuilder_spline_9 = function $$spline(data, labels, attrs) {
      var self = this, chart_id = nil, chart_div = nil, chart_generate_script = nil;

      
      chart_id = self.$get_chart_id();
      chart_div = self.$create_chart_div(chart_id);
      chart_generate_script = self.$chart_spline_script(chart_id, data, labels, attrs);
      return self.$to_html(chart_div, chart_generate_script);
    }, TMP_C3jsChartBuilder_spline_9.$$arity = 3);
    Opal.defs(self, '$create_chart_div', TMP_C3jsChartBuilder_create_chart_div_10 = function $$create_chart_div(chart_id) {
      var self = this;

      return "" + "<div id=\"" + (chart_id) + "\"></div>"
    }, TMP_C3jsChartBuilder_create_chart_div_10.$$arity = 1);
    Opal.defs(self, '$get_chart_id', TMP_C3jsChartBuilder_get_chart_id_11 = function $$get_chart_id() {
      var self = this;

      return $rb_plus("chart", Opal.const_get($scopes, 'PlainRubyRandom', true, true).$uuid())
    }, TMP_C3jsChartBuilder_get_chart_id_11.$$arity = 0);
    Opal.defs(self, '$prepare_data', TMP_C3jsChartBuilder_prepare_data_13 = function $$prepare_data(raw_data) {
      var TMP_12, self = this, labels = nil;

      
      labels = raw_data['$[]'](0);
      raw_data.$shift();
      $send(raw_data.$map(), 'with_index', [], (TMP_12 = function(row, index){var self = TMP_12.$$s || this;
if (row == null) row = nil;if (index == null) index = nil;
      return row.$unshift("" + (index))}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12));
      return [raw_data, labels];
    }, TMP_C3jsChartBuilder_prepare_data_13.$$arity = 1);
    Opal.defs(self, '$chart_bar_script', TMP_C3jsChartBuilder_chart_bar_script_14 = function $$chart_bar_script(chart_id, data, labels, attrs) {
      var self = this, chart_height = nil, chart_width = nil;

      
      chart_height = self.$get_chart_height(attrs);
      chart_width = self.$get_chart_width(attrs);
      return "" + "\n" + "<script type=\"text/javascript\">\n" + "c3.generate({\n" + "  bindto: '#" + (chart_id) + "',\n" + "  size: { height: " + (chart_height) + ", width: " + (chart_width) + " },\n" + "  data: {\n" + "    columns: " + (data.$to_s()) + ",\n" + "    type: 'bar'\n" + "  },\n" + "  axis: {\n" + "    x: {\n" + "      type: 'category',\n" + "      categories: " + (labels.$to_s()) + "\n" + "    }\n" + "  }\n" + "});\n" + "</script>";
    }, TMP_C3jsChartBuilder_chart_bar_script_14.$$arity = 4);
    Opal.defs(self, '$chart_line_script', TMP_C3jsChartBuilder_chart_line_script_15 = function $$chart_line_script(chart_id, data, labels, attrs) {
      var self = this, chart_height = nil, chart_width = nil;

      
      chart_height = self.$get_chart_height(attrs);
      chart_width = self.$get_chart_width(attrs);
      return "" + "\n" + "<script type=\"text/javascript\">\n" + "c3.generate({\n" + "  bindto: '#" + (chart_id) + "',\n" + "  size: { height: " + (chart_height) + ", width: " + (chart_width) + " },\n" + "  data: {\n" + "    columns: " + (data.$to_s()) + "\n" + "  },\n" + "  axis: {\n" + "    x: {\n" + "      type: 'category',\n" + "      categories: " + (labels.$to_s()) + "\n" + "    }\n" + "  }\n" + "});\n" + "</script>";
    }, TMP_C3jsChartBuilder_chart_line_script_15.$$arity = 4);
    Opal.defs(self, '$chart_step_script', TMP_C3jsChartBuilder_chart_step_script_16 = function $$chart_step_script(chart_id, data, labels, attrs) {
      var self = this, chart_height = nil, chart_width = nil;

      
      chart_height = self.$get_chart_height(attrs);
      chart_width = self.$get_chart_width(attrs);
      return "" + "\n" + "<script type=\"text/javascript\">\n" + "c3.generate({\n" + "  bindto: '#" + (chart_id) + "',\n" + "  size: { height: " + (chart_height) + ", width: " + (chart_width) + " },\n" + "  data: {\n" + "    columns: " + (data.$to_s()) + ",\n" + "    type: 'step'\n" + "  },\n" + "  axis: {\n" + "    x: {\n" + "      type: 'category',\n" + "      categories: " + (labels.$to_s()) + "\n" + "    }\n" + "  }\n" + "});\n" + "</script>";
    }, TMP_C3jsChartBuilder_chart_step_script_16.$$arity = 4);
    Opal.defs(self, '$chart_spline_script', TMP_C3jsChartBuilder_chart_spline_script_17 = function $$chart_spline_script(chart_id, data, labels, attrs) {
      var self = this, chart_height = nil, chart_width = nil;

      
      chart_height = self.$get_chart_height(attrs);
      chart_width = self.$get_chart_width(attrs);
      return "" + "\n" + "<script type=\"text/javascript\">\n" + "c3.generate({\n" + "  bindto: '#" + (chart_id) + "',\n" + "  size: { height: " + (chart_height) + ", width: " + (chart_width) + " },\n" + "  data: {\n" + "    columns: " + (data.$to_s()) + ",\n" + "    type: 'spline'\n" + "  },\n" + "  axis: {\n" + "    x: {\n" + "      type: 'category',\n" + "      categories: " + (labels.$to_s()) + "\n" + "    }\n" + "  }\n" + "});\n" + "</script>";
    }, TMP_C3jsChartBuilder_chart_spline_script_17.$$arity = 4);
    Opal.defs(self, '$to_html', TMP_C3jsChartBuilder_to_html_18 = function $$to_html(chart_div, chart_script) {
      var self = this;

      return "" + "\n" + "    " + (chart_div) + "\n" + "    " + (chart_script) + "\n" + "    "
    }, TMP_C3jsChartBuilder_to_html_18.$$arity = 2);
    Opal.defs(self, '$get_chart_height', TMP_C3jsChartBuilder_get_chart_height_19 = function $$get_chart_height(attrs) {
      var $a, self = this;

      if ((($a = attrs['$key?']("height")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return attrs['$[]']("height")
        } else {
        return "400"
      }
    }, TMP_C3jsChartBuilder_get_chart_height_19.$$arity = 1);
    return Opal.defs(self, '$get_chart_width', TMP_C3jsChartBuilder_get_chart_width_20 = function $$get_chart_width(attrs) {
      var $a, self = this;

      if ((($a = attrs['$key?']("width")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return attrs['$[]']("width")
        } else {
        return "600"
      }
    }, TMP_C3jsChartBuilder_get_chart_width_20.$$arity = 1);
  })($scope.base, null, $scopes);
  (function($base, $super, $visibility_scopes) {
    function $ChartjsChartBuilder(){};
    var self = $ChartjsChartBuilder = $klass($base, $super, 'ChartjsChartBuilder', $ChartjsChartBuilder);

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_ChartjsChartBuilder_line_22, TMP_ChartjsChartBuilder_prepare_data_23, TMP_ChartjsChartBuilder_get_chart_height_24, TMP_ChartjsChartBuilder_get_chart_width_25;

    
    Opal.defs(self, '$line', TMP_ChartjsChartBuilder_line_22 = function $$line(data, labels, attrs) {
      var TMP_21, self = this, default_colors = nil, datasets = nil, chart_id = nil, chart_height = nil, chart_width = nil, chart_canvas = nil, chart_init_ctx_script = nil, chart_init_data_script = nil, chart_init_script = nil;

      
      default_colors = [$hash2(["r", "g", "b"], {"r": 220, "g": 220, "b": 220}), $hash2(["r", "g", "b"], {"r": 151, "g": 187, "b": 205})];
      datasets = $send(data, 'map', [], (TMP_21 = function(set){var self = TMP_21.$$s || this, color = nil, color_rgba = nil;
if (set == null) set = nil;
      
        color = default_colors['$[]'](data.$index(set)['$%'](2));
        color_rgba = "" + "rgba(" + (color['$[]']("r")) + "," + (color['$[]']("g")) + "," + (color['$[]']("b")) + ",1.0)";
        return "" + "\n" + "{\n" + "  fillColor: \"" + (color_rgba.$gsub("1.0", "0.2")) + "\",\n" + "  strokeColor: \"" + (color_rgba) + "\",\n" + "  pointColor: \"" + (color_rgba) + "\",\n" + "  pointHighlightStroke: \"" + (color_rgba) + "\",\n" + "  pointStrokeColor: \"#fff\",\n" + "  pointHighlightFill: \"#fff\",\n" + "  data: " + (set.$to_s()) + "\n" + "}\n" + "      ";}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21)).$join(",");
      chart_id = $rb_plus("chart", Opal.const_get($scopes, 'PlainRubyRandom', true, true).$uuid());
      chart_height = self.$get_chart_height(attrs);
      chart_width = self.$get_chart_width(attrs);
      chart_canvas = "" + "<div style=\"width:" + (chart_width) + "px; height:" + (chart_height) + "px\"><canvas id=\"" + (chart_id) + "\"></canvas></div>";
      chart_init_ctx_script = "" + "var ctx = document.getElementById(\"" + (chart_id) + "\").getContext(\"2d\");";
      chart_init_data_script = "" + "var data = {\n" + "  labels: " + (labels.$to_s()) + ",\n" + "  datasets: [\n" + "    " + (datasets) + "\n" + "  ]\n" + "};";
      chart_init_script = "var chart = new Chart(ctx).Line(data, {responsive : true});";
      return "" + "\n" + "    " + (chart_canvas) + "<script type=\"text/javascript\">window.onload = function() {\n" + "    " + (chart_init_ctx_script) + "\n" + "    " + (chart_init_data_script) + "\n" + "    " + (chart_init_script) + "\n" + "}\n" + "</script>";
    }, TMP_ChartjsChartBuilder_line_22.$$arity = 3);
    Opal.defs(self, '$prepare_data', TMP_ChartjsChartBuilder_prepare_data_23 = function $$prepare_data(raw_data) {
      var self = this, labels = nil;

      
      labels = raw_data['$[]'](0);
      raw_data.$shift();
      return [raw_data, labels];
    }, TMP_ChartjsChartBuilder_prepare_data_23.$$arity = 1);
    Opal.defs(self, '$get_chart_height', TMP_ChartjsChartBuilder_get_chart_height_24 = function $$get_chart_height(attrs) {
      var $a, self = this;

      if ((($a = attrs['$key?']("height")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return attrs['$[]']("height")
        } else {
        return "400"
      }
    }, TMP_ChartjsChartBuilder_get_chart_height_24.$$arity = 1);
    return Opal.defs(self, '$get_chart_width', TMP_ChartjsChartBuilder_get_chart_width_25 = function $$get_chart_width(attrs) {
      var $a, self = this;

      if ((($a = attrs['$key?']("width")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return attrs['$[]']("width")
        } else {
        return "600"
      }
    }, TMP_ChartjsChartBuilder_get_chart_width_25.$$arity = 1);
  })($scope.base, null, $scopes);
  (function($base, $super, $visibility_scopes) {
    function $ChartistChartBuilder(){};
    var self = $ChartistChartBuilder = $klass($base, $super, 'ChartistChartBuilder', $ChartistChartBuilder);

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_ChartistChartBuilder_bar_26, TMP_ChartistChartBuilder_line_27, TMP_ChartistChartBuilder_create_chart_div_28, TMP_ChartistChartBuilder_get_chart_id_29, TMP_ChartistChartBuilder_prepare_data_30, TMP_ChartistChartBuilder_chart_bar_script_31, TMP_ChartistChartBuilder_chart_line_script_32, TMP_ChartistChartBuilder_to_html_33, TMP_ChartistChartBuilder_get_chart_height_34, TMP_ChartistChartBuilder_get_chart_width_35;

    
    Opal.defs(self, '$bar', TMP_ChartistChartBuilder_bar_26 = function $$bar(data, labels, attrs) {
      var self = this, chart_id = nil, chart_div = nil, chart_generate_script = nil;

      
      chart_id = self.$get_chart_id();
      chart_div = self.$create_chart_div(chart_id);
      chart_generate_script = self.$chart_bar_script(chart_id, data, labels, attrs);
      return self.$to_html(chart_div, chart_generate_script);
    }, TMP_ChartistChartBuilder_bar_26.$$arity = 3);
    Opal.defs(self, '$line', TMP_ChartistChartBuilder_line_27 = function $$line(data, labels, attrs) {
      var self = this, chart_id = nil, chart_div = nil, chart_generate_script = nil;

      
      chart_id = self.$get_chart_id();
      chart_div = self.$create_chart_div(chart_id);
      chart_generate_script = self.$chart_line_script(chart_id, data, labels, attrs);
      return self.$to_html(chart_div, chart_generate_script);
    }, TMP_ChartistChartBuilder_line_27.$$arity = 3);
    Opal.defs(self, '$create_chart_div', TMP_ChartistChartBuilder_create_chart_div_28 = function $$create_chart_div(chart_id) {
      var self = this;

      return "" + "<div id=\"" + (chart_id) + "\"class=\"ct-chart\"></div>"
    }, TMP_ChartistChartBuilder_create_chart_div_28.$$arity = 1);
    Opal.defs(self, '$get_chart_id', TMP_ChartistChartBuilder_get_chart_id_29 = function $$get_chart_id() {
      var self = this;

      return $rb_plus("chart", Opal.const_get($scopes, 'PlainRubyRandom', true, true).$uuid())
    }, TMP_ChartistChartBuilder_get_chart_id_29.$$arity = 0);
    Opal.defs(self, '$prepare_data', TMP_ChartistChartBuilder_prepare_data_30 = function $$prepare_data(raw_data) {
      var self = this, labels = nil;

      
      labels = raw_data['$[]'](0);
      raw_data.$shift();
      return [raw_data, labels];
    }, TMP_ChartistChartBuilder_prepare_data_30.$$arity = 1);
    Opal.defs(self, '$chart_bar_script', TMP_ChartistChartBuilder_chart_bar_script_31 = function $$chart_bar_script(chart_id, data, labels, attrs) {
      var self = this, chart_height = nil, chart_width = nil;

      
      chart_height = self.$get_chart_height(attrs);
      chart_width = self.$get_chart_width(attrs);
      return "" + "\n" + "<script type=\"text/javascript\">\n" + "var options = {\n" + "  height: '" + (chart_height) + "',\n" + "  colors:[\"#72B3CC\", \"#8EB33B\"]\n" + "};\n" + "var data = {\n" + "  labels: " + (labels.$to_s()) + ",\n" + "  series: " + (data.$to_s()) + "\n" + "};\n" + "new Chartist.Bar('#" + (chart_id) + "', data, options);\n" + "</script>";
    }, TMP_ChartistChartBuilder_chart_bar_script_31.$$arity = 4);
    Opal.defs(self, '$chart_line_script', TMP_ChartistChartBuilder_chart_line_script_32 = function $$chart_line_script(chart_id, data, labels, attrs) {
      var self = this, chart_height = nil, chart_width = nil;

      
      chart_height = self.$get_chart_height(attrs);
      chart_width = self.$get_chart_width(attrs);
      return "" + "\n" + "<script type=\"text/javascript\">\n" + "var options = {\n" + "  height: '" + (chart_height) + "',\n" + "  width: '" + (chart_width) + "',\n" + "  colors:[\"#72B3CC\", \"#8EB33B\"]\n" + "};\n" + "var data = {\n" + "  labels: " + (labels.$to_s()) + ",\n" + "  series: " + (data.$to_s()) + "\n" + "};\n" + "new Chartist.Line('#" + (chart_id) + "', data, options);\n" + "</script>";
    }, TMP_ChartistChartBuilder_chart_line_script_32.$$arity = 4);
    Opal.defs(self, '$to_html', TMP_ChartistChartBuilder_to_html_33 = function $$to_html(chart_div, chart_script) {
      var self = this;

      return "" + "\n" + "    " + (chart_div) + "\n" + "    " + (chart_script) + "\n" + "    "
    }, TMP_ChartistChartBuilder_to_html_33.$$arity = 2);
    Opal.defs(self, '$get_chart_height', TMP_ChartistChartBuilder_get_chart_height_34 = function $$get_chart_height(attrs) {
      var $a, self = this;

      if ((($a = attrs['$key?']("height")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return attrs['$[]']("height")
        } else {
        return "400"
      }
    }, TMP_ChartistChartBuilder_get_chart_height_34.$$arity = 1);
    return Opal.defs(self, '$get_chart_width', TMP_ChartistChartBuilder_get_chart_width_35 = function $$get_chart_width(attrs) {
      var $a, self = this;

      if ((($a = attrs['$key?']("width")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return attrs['$[]']("width")
        } else {
        return "600"
      }
    }, TMP_ChartistChartBuilder_get_chart_width_35.$$arity = 1);
  })($scope.base, null, $scopes);
  (function($base, $super, $visibility_scopes) {
    function $PlainRubyCSV(){};
    var self = $PlainRubyCSV = $klass($base, $super, 'PlainRubyCSV', $PlainRubyCSV);

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_PlainRubyCSV_parse_37, TMP_PlainRubyCSV_read_39;

    
    Opal.defs(self, '$parse', TMP_PlainRubyCSV_parse_37 = function $$parse(data) {
      var TMP_36, self = this, result = nil;

      
      result = [];
      $send(data, 'each_line', [], (TMP_36 = function(line){var self = TMP_36.$$s || this, line_chomp = nil;
if (line == null) line = nil;
      
        line_chomp = line.$chomp();
        return result.$push(line_chomp.$split(","));}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36));
      return result;
    }, TMP_PlainRubyCSV_parse_37.$$arity = 1);
    return Opal.defs(self, '$read', TMP_PlainRubyCSV_read_39 = function $$read(filename) {
      var TMP_38, self = this, result = nil;

      
      result = [];
      $send(Opal.const_get($scopes, 'File', true, true).$open(filename), 'each', [], (TMP_38 = function(line){var self = TMP_38.$$s || this, line_chomp = nil;
if (line == null) line = nil;
      
        line_chomp = line.$chomp();
        return result.$push(line_chomp.$split(","));}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38));
      return result;
    }, TMP_PlainRubyCSV_read_39.$$arity = 1);
  })($scope.base, null, $scopes);
  return (function($base, $super, $visibility_scopes) {
    function $PlainRubyRandom(){};
    var self = $PlainRubyRandom = $klass($base, $super, 'PlainRubyRandom', $PlainRubyRandom);

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_PlainRubyRandom_uuid_41;

    return Opal.defs(self, '$uuid', TMP_PlainRubyRandom_uuid_41 = function $$uuid() {
      var TMP_40, self = this;

      return $send($range(0, 8, true), 'map', [], (TMP_40 = function(){var self = TMP_40.$$s || this;

      return $rb_plus(65, self.$rand(26)).$chr()}, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40)).$join()
    }, TMP_PlainRubyRandom_uuid_41.$$arity = 0)
  })($scope.base, null, $scopes);
};

/* Generated by Opal 0.11.0.dev */
(function(Opal) {
  var TMP_1, self = Opal.top, $scope = Opal, $scopes = [Opal], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $send = Opal.send;

  Opal.add_stubs(['$==', '$require', '$register', '$basebackend?', '$document', '$block_macro', '$block', '$docinfo_processor']);
  
  if (Opal.const_get($scopes, 'RUBY_ENGINE', true, true)['$==']("opal")) {
    
    self.$require("chart-block-macro/extension");
    } else {
    nil
  };
  return $send(Opal.const_get($scopes, 'Extensions', true, true), 'register', [], (TMP_1 = function(){var self = TMP_1.$$s || this, $a;

  if ((($a = self.$document()['$basebackend?']("html")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      
      self.$block_macro(Opal.const_get($scopes, 'ChartBlockMacro', true, true));
      self.$block(Opal.const_get($scopes, 'ChartBlockProcessor', true, true));
      return self.$docinfo_processor(Opal.const_get($scopes, 'ChartAssetsDocinfoProcessor', true, true));
      } else {
      return nil
    }}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1));
})(Opal);
