{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///textile.min.js","webpack:///webpack/bootstrap 63c4084f6100209b42cb","webpack:///./src/index.js","webpack:///./src/merge.js","webpack:///./src/jsonml.js","webpack:///./src/html.js","webpack:///./src/re.js","webpack:///./src/ribbon.js","webpack:///./src/textile/flow.js","webpack:///./src/builder.js","webpack:///./src/fixlinks.js","webpack:///./src/textile/phrase.js","webpack:///./src/textile/attr.js","webpack:///./src/textile/glyph.js","webpack:///./src/textile/re_ext.js","webpack:///./src/textile/list.js","webpack:///./src/textile/deflist.js","webpack:///./src/textile/table.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","textile","txt","opt","merge","defaults","parseFlow","map","toHTML","join","_require","_require2","_require3","parseHtml","breaks","setOptions","setoptions","parse","convert","html_parser","jsonml","concat","serialize","a","b","k","reIndent","ml","shiftBy","s","test","slice","i","Array","isArray","escape","text","escapeQuotes","replace","tag","shift","attributes","tagAttrs","content","length","_typeof","push","String","singletons","indexOf","Symbol","iterator","obj","constructor","allowAll","testComment","src","reComment","exec","testOpenTagBlock","reHtmlTagBlock","testOpenTag","reTag","testCloseTag","reEndTag","parseHtmlAttr","attrSrc","attr","reAttr","tokenize","whitelistTags","lazy","tokens","textMode","oktag","oktag_","nesting","nestCount","ribbon","type","COMMENT","data","pos","index","advance","token","CLOSE","isNaN","_token","SINGLE","OPEN","TEXT","valueOf","stack","curr","WS","elm","_i","head","splice","sourceLength","re","pattern","html_id","html_attr","compile","area","base","br","col","embed","hr","img","input","link","meta","option","param","wbr","_cache","punct","space","collapse","expandPatterns","ex","Error","isRegExp","r","Object","prototype","toString","flags","arguments","global","ignoreCase","multiline","source","ckey","rx","RegExp","feed","org","slot","self","save","load","n","skipWS","ws","lookbehind","nchars","startsWith","substring","extend","target","_len","args","_key","nextKey","hasOwn","paragraph","pba","linebreak","options","out","split","forEach","bit","trim","parsePhrase","list","builder","linkRefs","reLinkRef","reBlock","blockType","parseAttr","extended","reBlockGlob","reBlockExtended","reBlockNormal","reBlockExtendedPre","reBlockNormalPre","inner","cite","par","copyAttr","add","subPba","reFootnoteDef","fnid","href","allowedBlocktags","t","pre","code","_t","_p","x","pop","_t2","_x","_s","_inner","_elm","innerHTML","isBlock","innerElm","reRuler","testList","parseList","testDefList","parseDefList","testTable","parseTable","undefined","fixLinks","get","_require4","_require5","_require6","_require7","txblocks","txlisthd","txattr","ul","ol","li","div","object","script","noscript","blockquote","notextile","hasOwnProperty","initArr","arr","node","filter","l","dict","behind","boundary","rePhrase","tok","fence","phraseType","phraseConvert","mMid","mEnd","t1","charAt","reImage","reImageFenced","alt","title","single","element","reFootnote","class","reCaps","caps","reLink","reLinkFenced","match","reLinkTitle","parseGlyph","ucaps","txcite","*","**","??","_","__","-","%","+","~","^","@","blacklist","d","testBlock","name","endToken","st","o","style","remaining","isImg","isList","isPhrase","reAlign","reAlignImg","reAlignBlock","reStyles","reCSS","reLang","rm","reClassid","_rm","bits","rePaddingL","rePaddingR","align","pbaAlignLookup","reVAlign","reColSpan","reRowSpan","pbaVAlignLookup","v","<","=",">","<>","reApostrophe","reArrow","reClosingDQuote","reClosingSQuote","reCopyright","reDimsign","reDoublePrime","reEllipsis","reEmdash","reEndash","reOpenDQuote","reOpenSQuote","reRegistered","reSinglePrime","reTrademark","attr_class","attr_style","attr_lang","attr_align","attr_pad","listPad","reList","currIndex","lastIndex","_lst","itemIndex","listAttr","reItem","item","destLevel","substr","newLi","lst","isFinite","parseInt","att","start","apply","reDeflist","deflist","terms","def","parseColgroup","colgroup","isCol","span","width","reTable","rowgroups","caption","tAttr","tCurr","row","more","setRowGroup","reHead","summary","reCaption","reColgroup","reRowgroup","charToTag","reRow","th","cell","mx","table","tbody"],"mappings":"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","file":"textile.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"textile\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"textile\"] = factory();\n\telse\n\t\troot[\"textile\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"textile\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"textile\"] = factory();\n\telse\n\t\troot[\"textile\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t** Textile parser for JavaScript\n\t**\n\t** Copyright (c) 2012 Borgar Þorsteinsson (MIT License).\n\t**\n\t*/\n\t\n\tvar merge = __webpack_require__(1);\n\t\n\tvar _require = __webpack_require__(2);\n\t\n\tvar toHTML = _require.toHTML;\n\t\n\tvar _require2 = __webpack_require__(6);\n\t\n\tvar parseFlow = _require2.parseFlow;\n\t\n\tvar _require3 = __webpack_require__(3);\n\t\n\tvar parseHtml = _require3.parseHtml;\n\t\n\t\n\tfunction textile(txt, opt) {\n\t  // get a throw-away copy of options\n\t  opt = merge(merge({}, textile.defaults), opt || {});\n\t  // run the converter\n\t  return parseFlow(txt, opt).map(toHTML).join('');\n\t};\n\tmodule.exports = textile;\n\t\n\t// options\n\ttextile.defaults = {\n\t  // single-line linebreaks are converted to <br> by default\n\t  'breaks': true\n\t};\n\ttextile.setOptions = textile.setoptions = function (opt) {\n\t  merge(textile.defaults, opt);\n\t  return this;\n\t};\n\t\n\ttextile.parse = textile.convert = textile;\n\ttextile.html_parser = parseHtml;\n\t\n\ttextile.jsonml = function (txt, opt) {\n\t  // get a throw-away copy of options\n\t  opt = merge(merge({}, textile.defaults), opt || {});\n\t  // parse and return tree\n\t  return ['html'].concat(parseFlow(txt, opt));\n\t};\n\ttextile.serialize = toHTML;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\t// merge object b properties into object a\n\tmodule.exports = function merge(a, b) {\n\t  if (b) {\n\t    for (var k in b) {\n\t      a[k] = b[k];\n\t    }\n\t  }\n\t  return a;\n\t};\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\t/*\n\t** JSONML helper methods - http://www.jsonml.org/\n\t**\n\t** This provides the `JSONML` object, which contains helper\n\t** methods for rendering JSONML to HTML.\n\t**\n\t** Note that the tag ! is taken to mean comment, this is however\n\t** not specified in the JSONML spec.\n\t*/\n\t\n\tvar singletons = __webpack_require__(3).singletons;\n\t\n\t// drop or add tab levels to JsonML tree\n\tfunction reIndent(ml, shiftBy) {\n\t  // a bit obsessive, but there we are...\n\t  if (!shiftBy) {\n\t    return ml;\n\t  }\n\t  return ml.map(function (s) {\n\t    if (/^\\n\\t+/.test(s)) {\n\t      if (shiftBy < 0) {\n\t        s = s.slice(0, shiftBy);\n\t      } else {\n\t        for (var i = 0; i < shiftBy; i++) {\n\t          s += '\\t';\n\t        }\n\t      }\n\t    } else if (Array.isArray(s)) {\n\t      return reIndent(s, shiftBy);\n\t    }\n\t    return s;\n\t  });\n\t}\n\t\n\tfunction escape(text, escapeQuotes) {\n\t  return text.replace(/&(?!(#\\d{2,}|#x[\\da-fA-F]{2,}|[a-zA-Z][a-zA-Z1-4]{1,6});)/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, escapeQuotes ? '&quot;' : '\"').replace(/'/g, escapeQuotes ? '&#39;' : \"'\");\n\t}\n\t\n\tfunction toHTML(jsonml) {\n\t  jsonml = jsonml.concat();\n\t\n\t  // basic case\n\t  if (typeof jsonml === 'string') {\n\t    return escape(jsonml);\n\t  }\n\t\n\t  var tag = jsonml.shift();\n\t  var attributes = {};\n\t  var tagAttrs = '';\n\t  var content = [];\n\t\n\t  if (jsonml.length && _typeof(jsonml[0]) === 'object' && !Array.isArray(jsonml[0])) {\n\t    attributes = jsonml.shift();\n\t  }\n\t\n\t  while (jsonml.length) {\n\t    content.push(toHTML(jsonml.shift()));\n\t  }\n\t\n\t  for (var a in attributes) {\n\t    tagAttrs += attributes[a] == null ? ' ' + a : ' ' + a + '=\"' + escape(String(attributes[a]), true) + '\"';\n\t  }\n\t\n\t  // be careful about adding whitespace here for inline elements\n\t  if (tag === '!') {\n\t    return '<!--' + content.join('') + '-->';\n\t  } else if (tag in singletons || tag.indexOf(':') > -1 && !content.length) {\n\t    return '<' + tag + tagAttrs + ' />';\n\t  } else {\n\t    return '<' + tag + tagAttrs + '>' + content.join('') + '</' + tag + '>';\n\t  }\n\t}\n\t\n\tmodule.exports = {\n\t  reIndent: reIndent,\n\t  toHTML: toHTML,\n\t  escape: escape\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar re = __webpack_require__(4);\n\tvar ribbon = __webpack_require__(5);\n\t\n\tre.pattern.html_id = '[a-zA-Z][a-zA-Z\\\\d:]*';\n\tre.pattern.html_attr = '(?:\"[^\"]+\"|\\'[^\\']+\\'|[^>\\\\s]+)';\n\t\n\tvar reAttr = re.compile(/^\\s*([^=\\s]+)(?:\\s*=\\s*(\"[^\"]+\"|'[^']+'|[^>\\s]+))?/);\n\tvar reComment = re.compile(/^<!--(.+?)-->/, 's');\n\tvar reEndTag = re.compile(/^<\\/([:html_id:])([^>]*)>/);\n\tvar reTag = re.compile(/^<([:html_id:])((?:\\s[^=\\s\\/]+(?:\\s*=\\s*[:html_attr:])?)+)?\\s*(\\/?)>/);\n\tvar reHtmlTagBlock = re.compile(/^\\s*<([:html_id:](?::[a-zA-Z\\d]+)*)((?:\\s[^=\\s\\/]+(?:\\s*=\\s*[:html_attr:])?)+)?\\s*(\\/?)>/);\n\t\n\tvar singletons = {\n\t  area: 1,\n\t  base: 1,\n\t  br: 1,\n\t  col: 1,\n\t  embed: 1,\n\t  hr: 1,\n\t  img: 1,\n\t  input: 1,\n\t  link: 1,\n\t  meta: 1,\n\t  option: 1,\n\t  param: 1,\n\t  wbr: 1\n\t};\n\t\n\tfunction allowAll() {\n\t  return true;\n\t}\n\t\n\tfunction testComment(src) {\n\t  return reComment.exec(src);\n\t}\n\t\n\tfunction testOpenTagBlock(src) {\n\t  return reHtmlTagBlock.exec(src);\n\t}\n\t\n\tfunction testOpenTag(src) {\n\t  return reTag.exec(src);\n\t}\n\t\n\tfunction testCloseTag(src) {\n\t  return reEndTag.exec(src);\n\t}\n\t\n\tfunction parseHtmlAttr(attrSrc) {\n\t  // parse ATTR and add to element\n\t  var attr = {};\n\t  var m = void 0;\n\t  while (m = reAttr.exec(attrSrc)) {\n\t    attr[m[1]] = typeof m[2] === 'string' ? m[2].replace(/^([\"'])(.*)\\1$/, '$2') : null;\n\t    attrSrc = attrSrc.slice(m[0].length);\n\t  }\n\t  return attr;\n\t}\n\t\n\tvar OPEN = 'OPEN';\n\tvar CLOSE = 'CLOSE';\n\tvar SINGLE = 'SINGLE';\n\tvar TEXT = 'TEXT';\n\tvar COMMENT = 'COMMENT';\n\tvar WS = 'WS';\n\t\n\tfunction tokenize(src, whitelistTags, lazy) {\n\t  var tokens = [];\n\t  var textMode = false;\n\t  var oktag = whitelistTags ? function (tag) {\n\t    return tag in whitelistTags;\n\t  } : allowAll;\n\t  var oktag_ = oktag;\n\t  var nesting = {};\n\t  var nestCount = 0;\n\t  var m = void 0;\n\t\n\t  src = ribbon(String(src));\n\t\n\t  do {\n\t    // comment\n\t    if ((m = testComment(src)) && oktag('!')) {\n\t      tokens.push({\n\t        type: COMMENT,\n\t        data: m[1],\n\t        pos: src.index(),\n\t        src: m[0]\n\t      });\n\t      src.advance(m[0]);\n\t    }\n\t\n\t    // end tag\n\t    else if ((m = testCloseTag(src)) && oktag(m[1])) {\n\t        var token = {\n\t          type: CLOSE,\n\t          tag: m[1],\n\t          pos: src.index(),\n\t          src: m[0]\n\t        };\n\t        src.advance(m[0]);\n\t        tokens.push(token);\n\t        nesting[token.tag]--;\n\t        nestCount--;\n\t        // console.log( '/' + token.tag, nestCount, nesting );\n\t        if (lazy && (!nestCount || !nesting[token.tag] < 0 || isNaN(nesting[token.tag]))) {\n\t          return tokens;\n\t        }\n\t        // if parse is in text mode then that ends here\n\t        if (textMode) {\n\t          textMode = null;\n\t          oktag = oktag_;\n\t        }\n\t      }\n\t\n\t      // open/void tag\n\t      else if ((m = testOpenTag(src)) && oktag(m[1])) {\n\t          var _token = {\n\t            type: m[3] || m[1] in singletons ? SINGLE : OPEN,\n\t            tag: m[1],\n\t            pos: src.index(),\n\t            src: m[0]\n\t          };\n\t          if (m[2]) {\n\t            _token.attr = parseHtmlAttr(m[2]);\n\t          }\n\t          // some elements can move parser into \"text\" mode\n\t          if (m[1] === 'script' || m[1] === 'code' || m[1] === 'style') {\n\t            textMode = _token.tag;\n\t            oktag = function oktag(tag) {\n\t              return tag === textMode;\n\t            };\n\t          }\n\t          if (_token.type === OPEN) {\n\t            nestCount++;\n\t            nesting[_token.tag] = (nesting[_token.tag] || 0) + 1;\n\t            // console.log( token.tag, nestCount, nesting );\n\t          }\n\t          tokens.push(_token);\n\t          src.advance(m[0]);\n\t        }\n\t\n\t        // text content\n\t        else {\n\t            // no match, move by all \"uninteresting\" chars\n\t            m = /([^<]+|[^\\0])/.exec(src);\n\t            if (m) {\n\t              tokens.push({\n\t                type: TEXT,\n\t                data: m[0],\n\t                pos: src.index(),\n\t                src: m[0]\n\t              });\n\t            }\n\t            src.advance(m ? m[0].length || 1 : 1);\n\t          }\n\t  } while (src.valueOf());\n\t\n\t  return tokens;\n\t}\n\t\n\t// This \"indesciminately\" parses HTML text into a list of JSON-ML element\n\t// No steps are taken however to prevent things like <table><p><td> - user can still create nonsensical but \"well-formed\" markup\n\tfunction parse(tokens, lazy) {\n\t  var root = [];\n\t  var stack = [];\n\t  var curr = root;\n\t  var token = void 0;\n\t  for (var i = 0; i < tokens.length; i++) {\n\t    token = tokens[i];\n\t    if (token.type === COMMENT) {\n\t      curr.push(['!', token.data]);\n\t    } else if (token.type === TEXT || token.type === WS) {\n\t      curr.push(token.data);\n\t    } else if (token.type === SINGLE) {\n\t      curr.push(token.attr ? [token.tag, token.attr] : [token.tag]);\n\t    } else if (token.type === OPEN) {\n\t      // TODO: some things auto close other things: <td>, <li>, <p>, <table>\n\t      // https://html.spec.whatwg.org/multipage/syntax.html#syntax-tag-omission\n\t      var elm = token.attr ? [token.tag, token.attr] : [token.tag];\n\t      curr.push(elm);\n\t      stack.push(elm);\n\t      curr = elm;\n\t    } else if (token.type === CLOSE) {\n\t      if (stack.length) {\n\t        for (var _i = stack.length - 1; _i >= 0; _i--) {\n\t          var head = stack[_i];\n\t          if (head[0] === token.tag) {\n\t            stack.splice(_i);\n\t            curr = stack[stack.length - 1] || root;\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      if (!stack.length && lazy) {\n\t        root.sourceLength = token.pos + token.src.length;\n\t        return root;\n\t      }\n\t    }\n\t  }\n\t  root.sourceLength = token ? token.pos + token.src.length : 0;\n\t  return root;\n\t}\n\t\n\tmodule.exports = {\n\t  singletons: singletons,\n\t  tokenize: tokenize,\n\t  parseHtml: parse,\n\t  parseHtmlAttr: parseHtmlAttr,\n\t  testCloseTag: testCloseTag,\n\t  testOpenTagBlock: testOpenTagBlock,\n\t  testOpenTag: testOpenTag,\n\t  testComment: testComment\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/*\n\t** Regular Expression helper methods\n\t**\n\t** This provides the `re` object, which contains several helper\n\t** methods for working with big regular expressions (soup).\n\t**\n\t*/\n\t\n\tvar _cache = {};\n\t\n\tvar re = module.exports = {\n\t\n\t  pattern: {\n\t    'punct': '[!-/:-@\\\\[\\\\\\\\\\\\]-`{-~]',\n\t    'space': '\\\\s'\n\t  },\n\t\n\t  escape: function escape(src) {\n\t    return src.replace(/[\\-\\[\\]\\{\\}\\(\\)\\*\\+\\?\\.,\\\\\\^\\$\\|#\\s]/g, '\\\\$&');\n\t  },\n\t\n\t  collapse: function collapse(src) {\n\t    return src.replace(/(?:#.*?(?:\\n|$))/g, '').replace(/\\s+/g, '');\n\t  },\n\t\n\t  expandPatterns: function expandPatterns(src) {\n\t    // TODO: provide escape for patterns: \\[:pattern:] ?\n\t    return src.replace(/\\[:\\s*(\\w+)\\s*:\\]/g, function (m, k) {\n\t      var ex = re.pattern[k];\n\t      if (ex) {\n\t        return re.expandPatterns(ex);\n\t      } else {\n\t        throw new Error('Pattern ' + m + ' not found in ' + src);\n\t      }\n\t    });\n\t  },\n\t\n\t  isRegExp: function isRegExp(r) {\n\t    return Object.prototype.toString.call(r) === '[object RegExp]';\n\t  },\n\t\n\t  compile: function compile(src, flags) {\n\t    if (re.isRegExp(src)) {\n\t      if (arguments.length === 1) {\n\t        // no flags arg provided, use the RegExp one\n\t        flags = (src.global ? 'g' : '') + (src.ignoreCase ? 'i' : '') + (src.multiline ? 'm' : '');\n\t      }\n\t      src = src.source;\n\t    }\n\t    // don't do the same thing twice\n\t    var ckey = src + (flags || '');\n\t    if (ckey in _cache) {\n\t      return _cache[ckey];\n\t    }\n\t    // allow classes\n\t    var rx = re.expandPatterns(src);\n\t    // allow verbose expressions\n\t    if (flags && /x/.test(flags)) {\n\t      rx = re.collapse(rx);\n\t    }\n\t    // allow dotall expressions\n\t    if (flags && /s/.test(flags)) {\n\t      rx = rx.replace(/([^\\\\])\\./g, '$1[^\\\\0]');\n\t    }\n\t    // TODO: test if MSIE and add replace \\s with [\\s\\u00a0] if it is?\n\t    // clean flags and output new regexp\n\t    flags = (flags || '').replace(/[^gim]/g, '');\n\t    return _cache[ckey] = new RegExp(rx, flags);\n\t  }\n\t\n\t};\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function ribbon(feed) {\n\t  var org = String(feed);\n\t  var slot = void 0;\n\t  var pos = 0;\n\t  var self = {\n\t\n\t    index: function index() {\n\t      return pos;\n\t    },\n\t\n\t    save: function save() {\n\t      slot = pos;\n\t      return self;\n\t    },\n\t\n\t    load: function load() {\n\t      pos = slot;\n\t      feed = org.slice(pos);\n\t      return self;\n\t    },\n\t\n\t    advance: function advance(n) {\n\t      pos += typeof n === 'string' ? n.length : n;\n\t      feed = org.slice(pos);\n\t      return feed;\n\t    },\n\t\n\t    skipWS: function skipWS() {\n\t      var ws = /^\\s+/.exec(feed);\n\t      if (ws) {\n\t        pos += ws[0].length;\n\t        feed = org.slice(pos);\n\t        return ws[0];\n\t      }\n\t      return '';\n\t    },\n\t\n\t    lookbehind: function lookbehind(nchars) {\n\t      nchars = nchars == null ? 1 : nchars;\n\t      return org.slice(pos - nchars, pos);\n\t    },\n\t\n\t    startsWith: function startsWith(s) {\n\t      return feed.substring(0, s.length) === s;\n\t    },\n\t\n\t    slice: function slice(a, b) {\n\t      return b != null ? feed.slice(a, b) : feed.slice(a);\n\t    },\n\t\n\t    valueOf: function valueOf() {\n\t      return feed;\n\t    },\n\t\n\t    toString: function toString() {\n\t      return feed;\n\t    }\n\t\n\t  };\n\t\n\t  return self;\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t** textile flow content parser\n\t*/\n\tvar builder = __webpack_require__(7);\n\tvar ribbon = __webpack_require__(5);\n\tvar re = __webpack_require__(4);\n\tvar fixLinks = __webpack_require__(8);\n\t\n\tvar _require = __webpack_require__(3);\n\t\n\tvar parseHtml = _require.parseHtml;\n\tvar tokenize = _require.tokenize;\n\tvar parseHtmlAttr = _require.parseHtmlAttr;\n\tvar singletons = _require.singletons;\n\tvar testComment = _require.testComment;\n\tvar testOpenTagBlock = _require.testOpenTagBlock;\n\t\n\tvar _require2 = __webpack_require__(9);\n\t\n\tvar parsePhrase = _require2.parsePhrase;\n\t\n\tvar _require3 = __webpack_require__(10);\n\t\n\tvar copyAttr = _require3.copyAttr;\n\tvar parseAttr = _require3.parseAttr;\n\t\n\tvar _require4 = __webpack_require__(13);\n\t\n\tvar testList = _require4.testList;\n\tvar parseList = _require4.parseList;\n\t\n\tvar _require5 = __webpack_require__(14);\n\t\n\tvar testDefList = _require5.testDefList;\n\tvar parseDefList = _require5.parseDefList;\n\t\n\tvar _require6 = __webpack_require__(15);\n\t\n\tvar testTable = _require6.testTable;\n\tvar parseTable = _require6.parseTable;\n\t\n\tvar _require7 = __webpack_require__(12);\n\t\n\tvar txblocks = _require7.txblocks;\n\tvar txlisthd = _require7.txlisthd;\n\tvar txattr = _require7.txattr;\n\t\n\tre.pattern.txblocks = txblocks;\n\tre.pattern.txlisthd = txlisthd;\n\tre.pattern.txattr = txattr;\n\t\n\t// HTML tags allowed in the document (root) level that trigger HTML parsing\n\tvar allowedBlocktags = {\n\t  'p': 0,\n\t  'hr': 0,\n\t  'ul': 1,\n\t  'ol': 0,\n\t  'li': 0,\n\t  'div': 1,\n\t  'pre': 0,\n\t  'object': 1,\n\t  'script': 0,\n\t  'noscript': 0,\n\t  'blockquote': 1,\n\t  'notextile': 1\n\t};\n\t\n\tvar reBlock = re.compile(/^([:txblocks:])/);\n\tvar reBlockNormal = re.compile(/^(.*?)($|\\r?\\n(?=[:txlisthd:])|\\r?\\n(?:\\s*\\n|$)+)/, 's');\n\tvar reBlockExtended = re.compile(/^(.*?)($|\\r?\\n(?=[:txlisthd:])|\\r?\\n+(?=[:txblocks:][:txattr:]\\.))/, 's');\n\tvar reBlockNormalPre = re.compile(/^(.*?)($|\\r?\\n(?:\\s*\\n|$)+)/, 's');\n\tvar reBlockExtendedPre = re.compile(/^(.*?)($|\\r?\\n+(?=[:txblocks:][:txattr:]\\.))/, 's');\n\t\n\tvar reRuler = /^(\\-\\-\\-+|\\*\\*\\*+|___+)(\\r?\\n\\s+|$)/;\n\tvar reLinkRef = re.compile(/^\\[([^\\]]+)\\]((?:https?:\\/\\/|\\/)\\S+)(?:\\s*\\n|$)/);\n\tvar reFootnoteDef = /^fn\\d+$/;\n\t\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tfunction extend(target) {\n\t  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t    args[_key - 1] = arguments[_key];\n\t  }\n\t\n\t  for (var i = 1; i < args.length; i++) {\n\t    var src = args[i];\n\t    if (src != null) {\n\t      for (var nextKey in src) {\n\t        if (hasOwn.call(src, nextKey)) {\n\t          target[nextKey] = src[nextKey];\n\t        }\n\t      }\n\t    }\n\t  }\n\t  return target;\n\t}\n\t\n\tfunction paragraph(s, tag, pba, linebreak, options) {\n\t  tag = tag || 'p';\n\t  var out = [];\n\t  s.split(/(?:\\r?\\n){2,}/).forEach(function (bit, i) {\n\t    if (tag === 'p' && /^\\s/.test(bit)) {\n\t      // no-paragraphs\n\t      bit = bit.replace(/\\r?\\n[\\t ]/g, ' ').trim();\n\t      out = out.concat(parsePhrase(bit, options));\n\t    } else {\n\t      if (linebreak && i) {\n\t        out.push(linebreak);\n\t      }\n\t      out.push(pba ? [tag, pba].concat(parsePhrase(bit, options)) : [tag].concat(parsePhrase(bit, options)));\n\t    }\n\t  });\n\t  return out;\n\t};\n\t\n\tfunction parseFlow(src, options) {\n\t  var list = builder();\n\t\n\t  var linkRefs = void 0;\n\t  var m = void 0;\n\t\n\t  src = ribbon(src.replace(/^( *\\r?\\n)+/, ''));\n\t\n\t  // loop\n\t  while (src.valueOf()) {\n\t    src.save();\n\t\n\t    // link_ref -- this goes first because it shouldn't trigger a linebreak\n\t    if (m = reLinkRef.exec(src)) {\n\t      if (!linkRefs) {\n\t        linkRefs = {};\n\t      }\n\t      src.advance(m[0]);\n\t      linkRefs[m[1]] = m[2];\n\t      continue;\n\t    }\n\t\n\t    // add linebreak\n\t    list.linebreak();\n\t\n\t    // named block\n\t    if (m = reBlock.exec(src)) {\n\t      src.advance(m[0]);\n\t      var blockType = m[0];\n\t      var pba = parseAttr(src, blockType);\n\t\n\t      if (pba) {\n\t        src.advance(pba[0]);\n\t        pba = pba[1];\n\t      }\n\t      if (m = /^\\.(\\.?)(?:\\s|(?=:))/.exec(src)) {\n\t        // FIXME: this whole copyAttr seems rather strange?\n\t        // slurp rest of block\n\t        var extended = !!m[1];\n\t        var reBlockGlob = extended ? reBlockExtended : reBlockNormal;\n\t        if (blockType === 'bc' || blockType === 'pre') {\n\t          reBlockGlob = extended ? reBlockExtendedPre : reBlockNormalPre;\n\t        }\n\t        m = reBlockGlob.exec(src.advance(m[0]));\n\t        src.advance(m[0]);\n\t        // bq | bc | notextile | pre | h# | fn# | p | ###\n\t        if (blockType === 'bq') {\n\t          var inner = m[1];\n\t          if (m = /^:(\\S+)\\s+/.exec(inner)) {\n\t            if (!pba) {\n\t              pba = {};\n\t            }\n\t            pba.cite = m[1];\n\t            inner = inner.slice(m[0].length);\n\t          }\n\t          // RedCloth adds all attr to both: this is bad because it produces duplicate IDs\n\t          var par = paragraph(inner, 'p', copyAttr(pba, { 'cite': 1, 'id': 1 }), '\\n', options);\n\t          list.add(['blockquote', pba, '\\n'].concat(par).concat(['\\n']));\n\t        } else if (blockType === 'bc') {\n\t          var subPba = pba ? copyAttr(pba, { 'id': 1 }) : null;\n\t          list.add(['pre', pba, subPba ? ['code', subPba, m[1]] : ['code', m[1]]]);\n\t        } else if (blockType === 'notextile') {\n\t          list.merge(parseHtml(tokenize(m[1])));\n\t        } else if (blockType === '###') {\n\t          // ignore the insides\n\t        } else if (blockType === 'pre') {\n\t          // I disagree with RedCloth, but agree with PHP here:\n\t          // \"pre(foo#bar).. line1\\n\\nline2\" prevents multiline preformat blocks\n\t          // ...which seems like the whole point of having an extended pre block?\n\t          list.add(['pre', pba, m[1]]);\n\t        } else if (reFootnoteDef.test(blockType)) {\n\t          // footnote\n\t          // Need to be careful: RedCloth fails \"fn1(foo#m). footnote\" -- it confuses the ID\n\t          var fnid = blockType.replace(/\\D+/g, '');\n\t          if (!pba) {\n\t            pba = {};\n\t          }\n\t          pba.class = (pba['class'] ? pba['class'] + ' ' : '') + 'footnote';\n\t          pba.id = 'fn' + fnid;\n\t          list.add(['p', pba, ['a', { 'href': '#fnr' + fnid }, ['sup', fnid]], ' '].concat(parsePhrase(m[1], options)));\n\t        } else {\n\t          // heading | paragraph\n\t          list.merge(paragraph(m[1], blockType, pba, '\\n', options));\n\t        }\n\t        continue;\n\t      } else {\n\t        src.load();\n\t      }\n\t    }\n\t\n\t    // HTML comment\n\t    if (m = testComment(src)) {\n\t      src.advance(m[0] + (/(?:\\s*\\n+)+/.exec(src) || [])[0]);\n\t      list.add(['!', m[1]]);\n\t      continue;\n\t    }\n\t\n\t    // block HTML\n\t    if (m = testOpenTagBlock(src)) {\n\t      var tag = m[1];\n\t\n\t      // Is block tag? ...\n\t      if (tag in allowedBlocktags) {\n\t        if (m[3] || tag in singletons) {\n\t          // single?\n\t          src.advance(m[0]);\n\t          if (/^\\s*(\\n|$)/.test(src)) {\n\t            var elm = [tag];\n\t            if (m[2]) {\n\t              elm.push(parseHtmlAttr(m[2]));\n\t            }\n\t            list.add(elm);\n\t            src.skipWS();\n\t            continue;\n\t          }\n\t        } else if (tag === 'pre') {\n\t          var t = tokenize(src, { 'pre': 1, 'code': 1 }, tag);\n\t          var p = parseHtml(t, true);\n\t          src.load().advance(p.sourceLength);\n\t          if (/^\\s*(\\n|$)/.test(src)) {\n\t            list.merge(p);\n\t            src.skipWS(); // skip tailing whitespace\n\t            continue;\n\t          }\n\t        } else if (tag === 'notextile') {\n\t          // merge all child elements\n\t          var _t = tokenize(src, null, tag);\n\t          var s = 1; // start after open tag\n\t          while (/^\\s+$/.test(_t[s].src)) {\n\t            s++; // skip whitespace\n\t          }\n\t          var _p = parseHtml(_t.slice(s, -1), true);\n\t          var x = _t.pop();\n\t          src.load().advance(x.pos + x.src.length);\n\t          if (/^\\s*(\\n|$)/.test(src)) {\n\t            list.merge(_p);\n\t            src.skipWS(); // skip tailing whitespace\n\t            continue;\n\t          }\n\t        } else {\n\t          src.skipWS();\n\t          var _t2 = tokenize(src, null, tag);\n\t          var _x = _t2.pop(); // this should be the end tag\n\t          var _s = 1; // start after open tag\n\t          while (_t2[_s] && /^[\\n\\r]+$/.test(_t2[_s].src)) {\n\t            _s++; // skip whitespace\n\t          }\n\t          if (_x.tag === tag) {\n\t            // inner can be empty\n\t            var _inner = _t2.length > 1 ? src.slice(_t2[_s].pos, _x.pos) : '';\n\t            src.advance(_x.pos + _x.src.length);\n\t            if (/^\\s*(\\n|$)/.test(src)) {\n\t              var _elm = [tag];\n\t              if (m[2]) {\n\t                _elm.push(parseHtmlAttr(m[2]));\n\t              }\n\t              if (tag === 'script' || tag === 'style') {\n\t                _elm.push(_inner);\n\t              } else {\n\t                var innerHTML = _inner.replace(/^\\n+/, '').replace(/\\s*$/, '');\n\t                var isBlock = /\\n\\r?\\n/.test(innerHTML) || tag === 'ol' || tag === 'ul';\n\t                var innerElm = isBlock ? parseFlow(innerHTML, options) : parsePhrase(innerHTML, extend({}, options, { breaks: false }));\n\t                if (isBlock || /^\\n/.test(_inner)) {\n\t                  _elm.push('\\n');\n\t                }\n\t                if (isBlock || /\\s$/.test(_inner)) {\n\t                  innerElm.push('\\n');\n\t                }\n\t                _elm = _elm.concat(innerElm);\n\t              }\n\t\n\t              list.add(_elm);\n\t              src.skipWS(); // skip tailing whitespace\n\t              continue;\n\t            }\n\t          }\n\t        }\n\t      }\n\t      src.load();\n\t    }\n\t\n\t    // ruler\n\t    if (m = reRuler.exec(src)) {\n\t      src.advance(m[0]);\n\t      list.add(['hr']);\n\t      continue;\n\t    }\n\t\n\t    // list\n\t    if (m = testList(src)) {\n\t      src.advance(m[0]);\n\t      list.add(parseList(m[0], options));\n\t      continue;\n\t    }\n\t\n\t    // definition list\n\t    if (m = testDefList(src)) {\n\t      src.advance(m[0]);\n\t      list.add(parseDefList(m[0], options));\n\t      continue;\n\t    }\n\t\n\t    // table\n\t    if (m = testTable(src)) {\n\t      src.advance(m[0]);\n\t      list.add(parseTable(m[1], options));\n\t      continue;\n\t    }\n\t\n\t    // paragraph\n\t    m = reBlockNormal.exec(src);\n\t    list.merge(paragraph(m[1], 'p', undefined, '\\n', options));\n\t    src.advance(m[0]);\n\t  }\n\t\n\t  return linkRefs ? fixLinks(list.get(), linkRefs) : list.get();\n\t}\n\t\n\texports.parseFlow = parseFlow;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = function builder(initArr) {\n\t  var arr = Array.isArray(initArr) ? initArr : [];\n\t\n\t  return {\n\t    add: function add(node) {\n\t      if (typeof node === 'string' && typeof arr[arr.length - 1] === 'string') {\n\t        // join if possible\n\t        arr[arr.length - 1] += node;\n\t      } else if (Array.isArray(node)) {\n\t        arr.push(node.filter(function (s) {\n\t          return s !== undefined;\n\t        }));\n\t      } else if (node) {\n\t        arr.push(node);\n\t      }\n\t      return this;\n\t    },\n\t\n\t    merge: function merge(arr) {\n\t      for (var i = 0, l = arr.length; i < l; i++) {\n\t        this.add(arr[i]);\n\t      }\n\t      return this;\n\t    },\n\t\n\t    linebreak: function linebreak() {\n\t      if (arr.length) {\n\t        this.add('\\n');\n\t      }\n\t    },\n\t\n\t    get: function get() {\n\t      return arr;\n\t    }\n\t  };\n\t};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\t// recurse the tree and swap out any \"href\" attributes\n\t// this uses the context as the replace dictionary so it can be fed to Array#map\n\tmodule.exports = function fixLinks(ml, dict) {\n\t  if (Array.isArray(ml)) {\n\t    if (ml[0] === 'a') {\n\t      // found a link\n\t      var attr = ml[1];\n\t      if ((typeof attr === 'undefined' ? 'undefined' : _typeof(attr)) === 'object' && 'href' in attr && attr.href in dict) {\n\t        attr.href = dict[attr.href];\n\t      }\n\t    }\n\t    for (var i = 0, l = ml.length; i < l; i++) {\n\t      if (Array.isArray(ml[i])) {\n\t        fixLinks(ml[i], dict);\n\t      }\n\t    }\n\t  }\n\t  return ml;\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/* textile inline parser */\n\t\n\tvar ribbon = __webpack_require__(5);\n\tvar builder = __webpack_require__(7);\n\tvar re = __webpack_require__(4);\n\t\n\tvar _require = __webpack_require__(10);\n\t\n\tvar parseAttr = _require.parseAttr;\n\t\n\tvar _require2 = __webpack_require__(11);\n\t\n\tvar parseGlyph = _require2.parseGlyph;\n\t\n\tvar _require3 = __webpack_require__(3);\n\t\n\tvar parseHtmlAttr = _require3.parseHtmlAttr;\n\tvar singletons = _require3.singletons;\n\tvar testComment = _require3.testComment;\n\tvar testOpenTag = _require3.testOpenTag;\n\t\n\tvar _require4 = __webpack_require__(12);\n\t\n\tvar ucaps = _require4.ucaps;\n\tvar txattr = _require4.txattr;\n\tvar txcite = _require4.txcite;\n\t\n\tre.pattern.txattr = txattr;\n\tre.pattern.txcite = txcite;\n\tre.pattern.ucaps = ucaps;\n\t\n\tvar phraseConvert = {\n\t  '*': 'strong',\n\t  '**': 'b',\n\t  '??': 'cite',\n\t  '_': 'em',\n\t  '__': 'i',\n\t  '-': 'del',\n\t  '%': 'span',\n\t  '+': 'ins',\n\t  '~': 'sub',\n\t  '^': 'sup',\n\t  '@': 'code'\n\t};\n\t\n\tvar rePhrase = /^([\\[\\{]?)(__?|\\*\\*?|\\?\\?|[\\-\\+\\^~@%])/;\n\tvar reImage = re.compile(/^!(?!\\s)([:txattr:](?:\\.[^\\n\\S]|\\.(?:[^\\.\\/]))?)([^!\\s]+?) ?(?:\\(((?:[^\\(\\)]|\\([^\\(\\)]+\\))+)\\))?!(?::([^\\s]+?(?=[!-\\.:-@\\[\\\\\\]-`{-~](?:$|\\s)|\\s|$)))?/);\n\tvar reImageFenced = re.compile(/^\\[!(?!\\s)([:txattr:](?:\\.[^\\n\\S]|\\.(?:[^\\.\\/]))?)([^!\\s]+?) ?(?:\\(((?:[^\\(\\)]|\\([^\\(\\)]+\\))+)\\))?!(?::([^\\s]+?(?=[!-\\.:-@\\[\\\\\\]-`{-~](?:$|\\s)|\\s|$)))?\\]/);\n\t// NB: there is an exception in here to prevent matching \"TM)\"\n\tvar reCaps = re.compile(/^((?!TM\\)|tm\\))[[:ucaps:]](?:[[:ucaps:]\\d]{1,}(?=\\()|[[:ucaps:]\\d]{2,}))(?:\\((.*?)\\))?(?=\\W|$)/);\n\tvar reLink = re.compile(/^\"(?!\\s)((?:[^\"]|\"(?![\\s:])[^\\n\"]+\"(?!:))+)\"[:txcite:]/);\n\tvar reLinkFenced = /^\\[\"([^\\n]+?)\":((?:\\[[a-z0-9]*\\]|[^\\]])+)\\]/;\n\tvar reLinkTitle = /\\s*\\(((?:\\([^\\(\\)]*\\)|[^\\(\\)])+)\\)$/;\n\tvar reFootnote = /^\\[(\\d+)(!?)\\]/;\n\t\n\tfunction parsePhrase(src, options) {\n\t  src = ribbon(src);\n\t  var list = builder();\n\t  var m = void 0;\n\t  var pba = void 0;\n\t\n\t  // loop\n\t  do {\n\t    src.save();\n\t\n\t    // linebreak -- having this first keeps it from messing to much with other phrases\n\t    if (src.startsWith('\\r\\n')) {\n\t      src.advance(1); // skip cartridge returns\n\t    }\n\t    if (src.startsWith('\\n')) {\n\t      src.advance(1);\n\t      if (src.startsWith(' ')) {\n\t        src.advance(1);\n\t      } else if (options.breaks) {\n\t        list.add(['br']);\n\t      }\n\t      list.add('\\n');\n\t      continue;\n\t    }\n\t\n\t    // inline notextile\n\t    if (m = /^==(.*?)==/.exec(src)) {\n\t      src.advance(m[0]);\n\t      list.add(m[1]);\n\t      continue;\n\t    }\n\t\n\t    // lookbehind => /([\\s>.,\"'?!;:])$/\n\t    var behind = src.lookbehind(1);\n\t    var boundary = !behind || /^[\\s>.,\"'?!;:()]$/.test(behind);\n\t    // FIXME: need to test right boundary for phrases as well\n\t    if ((m = rePhrase.exec(src)) && (boundary || m[1])) {\n\t      src.advance(m[0]);\n\t      var tok = m[2];\n\t      var fence = m[1];\n\t      var phraseType = phraseConvert[tok];\n\t      var code = phraseType === 'code';\n\t\n\t      if (pba = !code && parseAttr(src, phraseType, tok)) {\n\t        src.advance(pba[0]);\n\t        pba = pba[1];\n\t      }\n\t      // FIXME: if we can't match the fence on the end, we should output fence-prefix as normal text\n\t      // seek end\n\t      var mMid = void 0;\n\t      var mEnd = void 0;\n\t      if (fence === '[') {\n\t        mMid = '^(.*?)';\n\t        mEnd = '(?:])';\n\t      } else if (fence === '{') {\n\t        mMid = '^(.*?)';\n\t        mEnd = '(?:})';\n\t      } else {\n\t        var t1 = re.escape(tok.charAt(0));\n\t        mMid = code ? '^(\\\\S+|\\\\S+.*?\\\\S)' : '^([^\\\\s' + t1 + ']+|[^\\\\s' + t1 + '].*?\\\\S(' + t1 + '*))';\n\t        mEnd = '(?=$|[\\\\s.,\"\\'!?;:()«»„“”‚‘’])';\n\t      }\n\t      var rx = re.compile(mMid + '(' + re.escape(tok) + ')' + mEnd);\n\t      if ((m = rx.exec(src)) && m[1]) {\n\t        src.advance(m[0]);\n\t        if (code) {\n\t          list.add([phraseType, m[1]]);\n\t        } else {\n\t          list.add([phraseType, pba].concat(parsePhrase(m[1], options)));\n\t        }\n\t        continue;\n\t      }\n\t      // else\n\t      src.load();\n\t    }\n\t\n\t    // image\n\t    if ((m = reImage.exec(src)) || (m = reImageFenced.exec(src))) {\n\t      src.advance(m[0]);\n\t\n\t      pba = m[1] && parseAttr(m[1], 'img');\n\t      var attr = pba ? pba[1] : { 'src': '' };\n\t      var img = ['img', attr];\n\t      attr.src = m[2];\n\t      attr.alt = m[3] ? attr.title = m[3] : '';\n\t\n\t      if (m[4]) {\n\t        // +cite causes image to be wraped with a link (or link_ref)?\n\t        // TODO: support link_ref for image cite\n\t        img = ['a', { 'href': m[4] }, img];\n\t      }\n\t      list.add(img);\n\t      continue;\n\t    }\n\t\n\t    // html comment\n\t    if (m = testComment(src)) {\n\t      src.advance(m[0]);\n\t      list.add(['!', m[1]]);\n\t      continue;\n\t    }\n\t    // html tag\n\t    // TODO: this seems to have a lot of overlap with block tags... DRY?\n\t    if (m = testOpenTag(src)) {\n\t      src.advance(m[0]);\n\t      var tag = m[1];\n\t      var single = m[3] || m[1] in singletons;\n\t      var element = [tag];\n\t      if (m[2]) {\n\t        element.push(parseHtmlAttr(m[2]));\n\t      }\n\t      if (single) {\n\t        // single tag\n\t        list.add(element).add(src.skipWS());\n\t        continue;\n\t      } else {\n\t        // need terminator\n\t        // gulp up the rest of this block...\n\t        var reEndTag = re.compile('^(.*?)(</' + tag + '\\\\s*>)', 's');\n\t        if (m = reEndTag.exec(src)) {\n\t          src.advance(m[0]);\n\t          if (tag === 'code') {\n\t            element.push(m[1]);\n\t          } else if (tag === 'notextile') {\n\t            list.merge(parsePhrase(m[1], options));\n\t            continue;\n\t          } else {\n\t            element = element.concat(parsePhrase(m[1], options));\n\t          }\n\t          list.add(element);\n\t          continue;\n\t        }\n\t        // end tag is missing, treat tag as normal text...\n\t      }\n\t      src.load();\n\t    }\n\t\n\t    // footnote\n\t    if ((m = reFootnote.exec(src)) && /\\S/.test(behind)) {\n\t      src.advance(m[0]);\n\t      list.add(['sup', { 'class': 'footnote', 'id': 'fnr' + m[1] }, m[2] === '!' ? m[1] // \"!\" suppresses the link\n\t      : ['a', { href: '#fn' + m[1] }, m[1]]]);\n\t      continue;\n\t    }\n\t\n\t    // caps / abbr\n\t    if (m = reCaps.exec(src)) {\n\t      src.advance(m[0]);\n\t      var caps = ['span', { 'class': 'caps' }, m[1]];\n\t      if (m[2]) {\n\t        // FIXME: use <abbr>, not acronym!\n\t        caps = ['acronym', { 'title': m[2] }, caps];\n\t      }\n\t      list.add(caps);\n\t      continue;\n\t    }\n\t\n\t    // links\n\t    if (boundary && (m = reLink.exec(src)) || (m = reLinkFenced.exec(src))) {\n\t      src.advance(m[0]);\n\t      var title = m[1].match(reLinkTitle);\n\t      var inner = title ? m[1].slice(0, m[1].length - title[0].length) : m[1];\n\t      if (pba = parseAttr(inner, 'a')) {\n\t        inner = inner.slice(pba[0]);\n\t        pba = pba[1];\n\t      } else {\n\t        pba = {};\n\t      }\n\t      if (title && !inner) {\n\t        inner = title[0];\n\t        title = '';\n\t      }\n\t      pba.href = m[2];\n\t      if (title) {\n\t        pba.title = title[1];\n\t      }\n\t      list.add(['a', pba].concat(parsePhrase(inner.replace(/^(\\.?\\s*)/, ''), options)));\n\t      continue;\n\t    }\n\t\n\t    // no match, move by all \"uninteresting\" chars\n\t    m = /([a-zA-Z0-9,.':]+|[ \\f\\r\\t\\v\\xA0\\u2028\\u2029]+|[^\\0])/.exec(src);\n\t    if (m) {\n\t      list.add(m[0]);\n\t    }\n\t    src.advance(m ? m[0].length || 1 : 1);\n\t  } while (src.valueOf());\n\t\n\t  return list.get().map(parseGlyph);\n\t}\n\t\n\texports.parsePhrase = parsePhrase;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar reClassid = /^\\(([^\\(\\)\\n]+)\\)/;\n\tvar rePaddingL = /^(\\(+)/;\n\tvar rePaddingR = /^(\\)+)/;\n\tvar reAlignBlock = /^(<>|<|>|=)/;\n\tvar reAlignImg = /^(<|>|=)/;\n\tvar reVAlign = /^(~|\\^|\\-)/;\n\tvar reColSpan = /^\\\\(\\d+)/;\n\tvar reRowSpan = /^\\/(\\d+)/;\n\tvar reStyles = /^\\{([^\\}]*)\\}/;\n\tvar reCSS = /^\\s*([^:\\s]+)\\s*:\\s*(.+)\\s*$/;\n\tvar reLang = /^\\[([^\\[\\]\\n]+)\\]/;\n\t\n\tvar pbaAlignLookup = {\n\t  '<': 'left',\n\t  '=': 'center',\n\t  '>': 'right',\n\t  '<>': 'justify'\n\t};\n\t\n\tvar pbaVAlignLookup = {\n\t  '~': 'bottom',\n\t  '^': 'top',\n\t  '-': 'middle'\n\t};\n\t\n\tfunction copyAttr(s, blacklist) {\n\t  if (!s) {\n\t    return undefined;\n\t  }\n\t  var d = {};\n\t  for (var k in s) {\n\t    if (k in s && (!blacklist || !(k in blacklist))) {\n\t      d[k] = s[k];\n\t    }\n\t  }\n\t  return d;\n\t}\n\t\n\tfunction testBlock(name) {\n\t  // \"in\" test would be better but what about fn#.?\n\t  return (/^(?:table|t[dh]|t(?:foot|head|body)|b[qc]|div|notextile|pre|h[1-6]|fn\\\\d+|p|###)$/.test(name)\n\t  );\n\t}\n\t\n\t/*\n\t  The attr bit causes massive problems for span elements when parentheses are used.\n\t  Parentheses are a total mess and, unsurprisingly, cause trip-ups:\n\t\n\t   RC: `_{display:block}(span) span (span)_` -> `<em style=\"display:block;\" class=\"span\">(span) span (span)</em>`\n\t   PHP: `_{display:block}(span) span (span)_` -> `<em style=\"display:block;\">(span) span (span)</em>`\n\t\n\t  PHP and RC seem to mostly solve this by not parsing a final attr parens on spans if the\n\t  following character is a non-space. I've duplicated that: Class/ID is not matched on spans\n\t  if it is followed by `endToken` or <space>.\n\t\n\t  Lang is not matched here if it is followed by the end token. Theoretically I could limit the lang\n\t  attribute to /^\\[[a-z]{2+}(\\-[a-zA-Z0-9]+)*\\]/ because Textile is layered on top of HTML which\n\t  only accepts valid BCP 47 language tags, but who knows what atrocities are being preformed\n\t  out there in the real world. So this attempts to emulate the other libraries.\n\t*/\n\tfunction parseAttr(input, element, endToken) {\n\t  input = String(input);\n\t  if (!input || element === 'notextile') {\n\t    return undefined;\n\t  }\n\t\n\t  var m = void 0;\n\t  var st = {};\n\t  var o = { 'style': st };\n\t  var remaining = input;\n\t\n\t  var isBlock = testBlock(element);\n\t  var isImg = element === 'img';\n\t  var isList = element === 'li';\n\t  var isPhrase = !isBlock && !isImg && element !== 'a';\n\t  var reAlign = isImg ? reAlignImg : reAlignBlock;\n\t\n\t  do {\n\t    if (m = reStyles.exec(remaining)) {\n\t      m[1].split(';').forEach(function (p) {\n\t        var d = p.match(reCSS);\n\t        if (d) {\n\t          st[d[1]] = d[2];\n\t        }\n\t      });\n\t      remaining = remaining.slice(m[0].length);\n\t      continue;\n\t    }\n\t\n\t    if (m = reLang.exec(remaining)) {\n\t      var rm = remaining.slice(m[0].length);\n\t      if (!rm && isPhrase || endToken && endToken === rm.slice(0, endToken.length)) {\n\t        m = null;\n\t      } else {\n\t        o['lang'] = m[1];\n\t        remaining = remaining.slice(m[0].length);\n\t      }\n\t      continue;\n\t    }\n\t\n\t    if (m = reClassid.exec(remaining)) {\n\t      var _rm = remaining.slice(m[0].length);\n\t      if (!_rm && isPhrase || endToken && (_rm[0] === ' ' || endToken === _rm.slice(0, endToken.length))) {\n\t        m = null;\n\t      } else {\n\t        var bits = m[1].split('#');\n\t        if (bits[0]) {\n\t          o.class = bits[0];\n\t        }\n\t        if (bits[1]) {\n\t          o.id = bits[1];\n\t        }\n\t        remaining = _rm;\n\t      }\n\t      continue;\n\t    }\n\t\n\t    if (isBlock || isList) {\n\t      if (m = rePaddingL.exec(remaining)) {\n\t        st['padding-left'] = m[1].length + 'em';\n\t        remaining = remaining.slice(m[0].length);\n\t        continue;\n\t      }\n\t      if (m = rePaddingR.exec(remaining)) {\n\t        st['padding-right'] = m[1].length + 'em';\n\t        remaining = remaining.slice(m[0].length);\n\t        continue;\n\t      }\n\t    }\n\t\n\t    // only for blocks:\n\t    if (isImg || isBlock || isList) {\n\t      if (m = reAlign.exec(remaining)) {\n\t        var align = pbaAlignLookup[m[1]];\n\t        if (isImg) {\n\t          o['align'] = align;\n\t        } else {\n\t          st['text-align'] = align;\n\t        }\n\t        remaining = remaining.slice(m[0].length);\n\t        continue;\n\t      }\n\t    }\n\t\n\t    // only for table cells\n\t    if (element === 'td' || element === 'tr') {\n\t      if (m = reVAlign.exec(remaining)) {\n\t        st['vertical-align'] = pbaVAlignLookup[m[1]];\n\t        remaining = remaining.slice(m[0].length);\n\t        continue;\n\t      }\n\t    }\n\t    if (element === 'td') {\n\t      if (m = reColSpan.exec(remaining)) {\n\t        o['colspan'] = m[1];\n\t        remaining = remaining.slice(m[0].length);\n\t        continue;\n\t      }\n\t      if (m = reRowSpan.exec(remaining)) {\n\t        o['rowspan'] = m[1];\n\t        remaining = remaining.slice(m[0].length);\n\t        continue;\n\t      }\n\t    }\n\t  } while (m);\n\t\n\t  // collapse styles\n\t  var s = [];\n\t  for (var v in st) {\n\t    s.push(v + ':' + st[v]);\n\t  }\n\t  if (s.length) {\n\t    o.style = s.join(';');\n\t  } else {\n\t    delete o.style;\n\t  }\n\t\n\t  return remaining === input ? undefined : [input.length - remaining.length, o];\n\t}\n\t\n\tmodule.exports = {\n\t  copyAttr: copyAttr,\n\t  parseAttr: parseAttr\n\t};\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/* textile glyph parser */\n\t\n\tvar re = __webpack_require__(4);\n\t\n\tvar reApostrophe = /(\\w)'(\\w)/g;\n\tvar reArrow = /([^\\-]|^)->/;\n\tvar reClosingDQuote = re.compile(/([^\\s\\[\\(])\"(?=$|\\s|[:punct:])/g);\n\tvar reClosingSQuote = re.compile(/([^\\s\\[\\(])'(?=$|\\s|[:punct:])/g);\n\tvar reCopyright = /(\\b ?|\\s|^)(?:\\(C\\)|\\[C\\])/gi;\n\tvar reDimsign = /([\\d\\.,]+['\"]? ?)x( ?)(?=[\\d\\.,]['\"]?)/g;\n\tvar reDoublePrime = re.compile(/(\\d*[\\.,]?\\d+)\"(?=\\s|$|[:punct:])/g);\n\tvar reEllipsis = /([^.]?)\\.{3}/g;\n\tvar reEmdash = /(^|[\\s\\w])--([\\s\\w]|$)/g;\n\tvar reEndash = / - /g;\n\tvar reOpenDQuote = /\"/g;\n\tvar reOpenSQuote = /'/g;\n\tvar reRegistered = /(\\b ?|\\s|^)(?:\\(R\\)|\\[R\\])/gi;\n\tvar reSinglePrime = re.compile(/(\\d*[\\.,]?\\d+)'(?=\\s|$|[:punct:])/g);\n\tvar reTrademark = /(\\b ?|\\s|^)(?:\\((?:TM|tm)\\)|\\[(?:TM|tm)\\])/g;\n\t\n\texports.parseGlyph = function parseGlyph(src) {\n\t  if (typeof src !== 'string') {\n\t    return src;\n\t  }\n\t  // NB: order is important here ...\n\t  return src.replace(reArrow, '$1&#8594;').replace(reDimsign, '$1&#215;$2').replace(reEllipsis, '$1&#8230;').replace(reEmdash, '$1&#8212;$2').replace(reEndash, ' &#8211; ').replace(reTrademark, '$1&#8482;').replace(reRegistered, '$1&#174;').replace(reCopyright, '$1&#169;')\n\t  // double quotes\n\t  .replace(reDoublePrime, '$1&#8243;').replace(reClosingDQuote, '$1&#8221;').replace(reOpenDQuote, '&#8220;')\n\t  // single quotes\n\t  .replace(reSinglePrime, '$1&#8242;').replace(reApostrophe, '$1&#8217;$2').replace(reClosingSQuote, '$1&#8217;').replace(reOpenSQuote, '&#8216;')\n\t  // fractions and degrees\n\t  .replace(/[\\(\\[]1\\/4[\\]\\)]/, '&#188;').replace(/[\\(\\[]1\\/2[\\]\\)]/, '&#189;').replace(/[\\(\\[]3\\/4[\\]\\)]/, '&#190;').replace(/[\\(\\[]o[\\]\\)]/, '&#176;').replace(/[\\(\\[]\\+\\/\\-[\\]\\)]/, '&#177;');\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/* eslint camelcase: 0 */\n\t\n\texports.txblocks = '(?:b[qc]|div|notextile|pre|h[1-6]|fn\\\\d+|p|###)';\n\t\n\texports.ucaps = 'A-Z' +\n\t// Latin extended À-Þ\n\t'À-ÖØ-Þ' +\n\t// Latin caps with embelishments and ligatures...\n\t'ĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĹĻĽĿ' + 'ŁŃŅŇŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸŹŻŽ' + 'ƁƂƄƆƇƉ-ƋƎ-ƑƓƔƖ-ƘƜƝƟƠƢƤƦƧƩƬƮƯƱ-ƳƵƷƸƼ' + 'ǄǇǊǍǏǑǓǕǗǙǛǞǠǢǤǦǨǪǬǮǱǴǶ-ǸǺǼǾ' + 'ȀȂȄȆȈȊȌȎȐȒȔȖȘȚȜȞȠȢȤȦȨȪȬȮȰȲȺȻȽȾ' + 'ɁɃ-ɆɈɊɌɎ' + 'ḀḂḄḆḈḊḌḎḐḒḔḖḘḚḜḞḠḢḤḦḨḪḬḮḰḲḴḶḸḺḼḾṀ' + 'ṂṄṆṈṊṌṎṐṒṔṖṘṚṜṞṠṢṤṦṨṪṬṮṰṲṴṶṸṺṼṾ' + 'ẀẂẄẆẈẊẌẎẐẒẔẞẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼẾ' + 'ỀỂỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪỬỮỰỲỴỶỸỺỼỾ' + 'ⱠⱢ-ⱤⱧⱩⱫⱭ-ⱰⱲⱵⱾⱿ' + 'ꜢꜤꜦꜨꜪꜬꜮꜲꜴꜶꜸꜺꜼꜾ' + 'ꝀꝂꝄꝆꝈꝊꝌꝎꝐꝒꝔꝖꝘꝚꝜꝞꝠꝢꝤꝦꝨꝪꝬꝮꝹꝻꝽꝾ' + 'ꞀꞂꞄꞆꞋꞍꞐꞒꞠꞢꞤꞦꞨꞪ';\n\t\n\texports.txcite = ':((?:[^\\\\s()]|\\\\([^\\\\s()]+\\\\)|[()])+?)(?=[!-\\\\.:-@\\\\[\\\\\\\\\\\\]-`{-~]+(?:$|\\\\s)|$|\\\\s)';\n\t\n\tvar attr_class = exports.attr_class = '\\\\([^\\\\)]+\\\\)';\n\tvar attr_style = exports.attr_style = '\\\\{[^\\\\}]+\\\\}';\n\tvar attr_lang = exports.attr_lang = '\\\\[[^\\\\[\\\\]]+\\\\]';\n\tvar attr_align = exports.attr_align = '(?:<>|<|>|=)';\n\tvar attr_pad = exports.attr_pad = '[\\\\(\\\\)]+';\n\t\n\tvar txattr = exports.txattr = '(?:' + attr_class + '|' + attr_style + '|' + attr_lang + '|' + attr_align + '|' + attr_pad + ')*';\n\t\n\texports.txlisthd = '[\\\\t ]*[\\\\#\\\\*]*(\\\\*|\\\\#(?:_|\\\\d+)?)' + txattr + '(?: +\\\\S|\\\\.\\\\s*(?=\\\\S|\\\\n))';\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/* textile list parser */\n\tvar ribbon = __webpack_require__(5);\n\tvar re = __webpack_require__(4);\n\tvar merge = __webpack_require__(1);\n\t\n\tvar _require = __webpack_require__(10);\n\t\n\tvar parseAttr = _require.parseAttr;\n\t\n\tvar _require2 = __webpack_require__(9);\n\t\n\tvar parsePhrase = _require2.parsePhrase;\n\t\n\tvar _require3 = __webpack_require__(12);\n\t\n\tvar txlisthd = _require3.txlisthd;\n\t\n\tre.pattern.txlisthd = txlisthd;\n\tvar reList = re.compile(/^((?:[:txlisthd:][^\\0]*?(?:\\r?\\n|$))+)(\\s*\\n|$)/, 's');\n\tvar reItem = re.compile(/^([#\\*]+)([^\\0]+?)(\\n(?=[:txlisthd:])|$)/, 's');\n\t\n\tfunction listPad(n) {\n\t  var s = '\\n';\n\t  while (n--) {\n\t    s += '\\t';\n\t  }\n\t  return s;\n\t}\n\t\n\tfunction testList(src) {\n\t  return reList.exec(src);\n\t}\n\t\n\tfunction parseList(src, options) {\n\t  src = ribbon(src.replace(/(^|\\r?\\n)[\\t ]+/, '$1'));\n\t\n\t  var stack = [];\n\t  var currIndex = {};\n\t  var lastIndex = options._lst || {};\n\t  var itemIndex = 0;\n\t  var listAttr = void 0;\n\t  var m = void 0;\n\t  var n = void 0;\n\t  var s = void 0;\n\t\n\t  while (m = reItem.exec(src)) {\n\t    var item = ['li'];\n\t    var destLevel = m[1].length;\n\t    var type = m[1].substr(-1) === '#' ? 'ol' : 'ul';\n\t    var newLi = null;\n\t    var lst = void 0;\n\t    var par = void 0;\n\t    var pba = void 0;\n\t    var r = void 0;\n\t\n\t    // list starts and continuations\n\t    if (n = /^(_|\\d+)/.exec(m[2])) {\n\t      itemIndex = isFinite(n[1]) ? parseInt(n[1], 10) : lastIndex[destLevel] || currIndex[destLevel] || 1;\n\t      m[2] = m[2].slice(n[1].length);\n\t    }\n\t\n\t    if (pba = parseAttr(m[2], 'li')) {\n\t      m[2] = m[2].slice(pba[0]);\n\t      pba = pba[1];\n\t    }\n\t\n\t    // list control\n\t    if (/^\\.\\s*$/.test(m[2])) {\n\t      listAttr = pba || {};\n\t      src.advance(m[0]);\n\t      continue;\n\t    }\n\t\n\t    // create nesting until we have correct level\n\t    while (stack.length < destLevel) {\n\t      // list always has an attribute object, this simplifies first-pba resolution\n\t      lst = [type, {}, listPad(stack.length + 1), newLi = ['li']];\n\t      par = stack[stack.length - 1];\n\t      if (par) {\n\t        par.li.push(listPad(stack.length));\n\t        par.li.push(lst);\n\t      }\n\t      stack.push({\n\t        ul: lst,\n\t        li: newLi,\n\t        // count attributes's found per list\n\t        att: 0\n\t      });\n\t      currIndex[stack.length] = 1;\n\t    }\n\t\n\t    // remove nesting until we have correct level\n\t    while (stack.length > destLevel) {\n\t      r = stack.pop();\n\t      r.ul.push(listPad(stack.length));\n\t      // lists have a predictable structure - move pba from listitem to list\n\t      if (r.att === 1 && !r.ul[3][1].substr) {\n\t        merge(r.ul[1], r.ul[3].splice(1, 1)[0]);\n\t      }\n\t    }\n\t\n\t    // parent list\n\t    par = stack[stack.length - 1];\n\t\n\t    if (itemIndex) {\n\t      par.ul[1].start = itemIndex;\n\t      currIndex[destLevel] = itemIndex;\n\t      // falsy prevents this from fireing until it is set again\n\t      itemIndex = 0;\n\t    }\n\t    if (listAttr) {\n\t      // \"more than 1\" prevent attribute transfers on list close\n\t      par.att = 9;\n\t      merge(par.ul[1], listAttr);\n\t      listAttr = null;\n\t    }\n\t\n\t    if (!newLi) {\n\t      par.ul.push(listPad(stack.length), item);\n\t      par.li = item;\n\t    }\n\t    if (pba) {\n\t      par.li.push(pba);\n\t      par.att++;\n\t    }\n\t    Array.prototype.push.apply(par.li, parsePhrase(m[2].trim(), options));\n\t\n\t    src.advance(m[0]);\n\t    currIndex[destLevel] = (currIndex[destLevel] || 0) + 1;\n\t  }\n\t\n\t  // remember indexes for continuations next time\n\t  options._lst = currIndex;\n\t\n\t  while (stack.length) {\n\t    s = stack.pop();\n\t    s.ul.push(listPad(stack.length));\n\t    // lists have a predictable structure - move pba from listitem to list\n\t    if (s.att === 1 && !s.ul[3][1].substr) {\n\t      merge(s.ul[1], s.ul[3].splice(1, 1)[0]);\n\t    }\n\t  }\n\t\n\t  return s.ul;\n\t}\n\t\n\tmodule.exports = {\n\t  testList: testList,\n\t  parseList: parseList\n\t};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/* definitions list parser */\n\t\n\tvar ribbon = __webpack_require__(5);\n\t\n\tvar reDeflist = /^((?:- (?:[^\\n]\\n?)+?)+:=(?: *\\n[^\\0]+?=:(?:\\n|$)|(?:[^\\0]+?(?:$|\\n(?=\\n|- )))))+/;\n\tvar reItem = /^((?:- (?:[^\\n]\\n?)+?)+):=( *\\n[^\\0]+?=:\\s*(?:\\n|$)|(?:[^\\0]+?(?:$|\\n(?=\\n|- ))))/;\n\t\n\tfunction testDefList(src) {\n\t  return reDeflist.exec(src);\n\t}\n\t\n\tfunction parseDefList(src, options) {\n\t  src = ribbon(src.trim());\n\t\n\t  // late loading to get around the lack of non-circular-dependency support in RequireJS\n\t  var parsePhrase = __webpack_require__(9).parsePhrase;\n\t  var parseFlow = __webpack_require__(6).parseFlow;\n\t\n\t  var deflist = ['dl', '\\n'];\n\t  var terms = void 0;\n\t  var def = void 0;\n\t  var m = void 0;\n\t\n\t  while (m = reItem.exec(src)) {\n\t    // add terms\n\t    terms = m[1].split(/(?:^|\\n)\\- /).slice(1);\n\t    while (terms.length) {\n\t      deflist.push('\\t', ['dt'].concat(parsePhrase(terms.shift().trim(), options)), '\\n');\n\t    }\n\t    // add definitions\n\t    def = m[2].trim();\n\t    deflist.push('\\t', ['dd'].concat(/=:$/.test(def) ? parseFlow(def.slice(0, -2).trim(), options) : parsePhrase(def, options)), '\\n');\n\t    src.advance(m[0]);\n\t  }\n\t  return deflist;\n\t}\n\t\n\texports.testDefList = testDefList;\n\texports.parseDefList = parseDefList;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/* textile table parser */\n\t\n\tvar re = __webpack_require__(4);\n\tvar merge = __webpack_require__(1);\n\tvar ribbon = __webpack_require__(5);\n\t\n\tvar _require = __webpack_require__(10);\n\t\n\tvar parseAttr = _require.parseAttr;\n\t\n\tvar _require2 = __webpack_require__(9);\n\t\n\tvar parsePhrase = _require2.parsePhrase;\n\t\n\tvar _require3 = __webpack_require__(2);\n\t\n\tvar reIndent = _require3.reIndent;\n\t\n\tvar _require4 = __webpack_require__(12);\n\t\n\tvar txattr = _require4.txattr;\n\t\n\tre.pattern.txattr = txattr;\n\t\n\tvar reTable = re.compile(/^((?:table[:txattr:]\\.(?:\\s(.+?))\\s*\\n)?(?:(?:[:txattr:]\\.[^\\n\\S]*)?\\|.*?\\|[^\\n\\S]*(?:\\n|$))+)([^\\n\\S]*\\n)?/, 's');\n\tvar reHead = /^table(_?)([^\\n]*?)\\.(?:[ \\t](.+?))?\\s*\\n/;\n\tvar reRow = re.compile(/^(?:\\|([~\\^\\-][:txattr:])\\.\\s*\\n)?([:txattr:]\\.[^\\n\\S]*)?\\|(.*?)\\|[^\\n\\S]*(\\n|$)/, 's');\n\tvar reCaption = /^\\|=([^\\n+]*)\\n/;\n\tvar reColgroup = /^\\|:([^\\n+]*)\\|[\\r\\t ]*\\n/;\n\tvar reRowgroup = /^\\|([\\^\\-~])([^\\n+]*)\\.[ \\t\\r]*\\n/;\n\t\n\tvar charToTag = {\n\t  '^': 'thead',\n\t  '~': 'tfoot',\n\t  '-': 'tbody'\n\t};\n\t\n\tfunction parseColgroup(src) {\n\t  var colgroup = ['colgroup', {}];\n\t  src.split('|').forEach(function (s, isCol) {\n\t    var col = isCol ? {} : colgroup[1];\n\t    var d = s.trim();\n\t    var m = void 0;\n\t    if (d) {\n\t      if (m = /^\\\\(\\d+)/.exec(d)) {\n\t        col.span = +m[1];\n\t        d = d.slice(m[0].length);\n\t      }\n\t      if (m = parseAttr(d, 'col')) {\n\t        merge(col, m[1]);\n\t        d = d.slice(m[0]);\n\t      }\n\t      if (m = /\\b\\d+\\b/.exec(d)) {\n\t        col.width = +m[0];\n\t      }\n\t    }\n\t    if (isCol) {\n\t      colgroup.push('\\n\\t\\t', ['col', col]);\n\t    }\n\t  });\n\t  return colgroup.concat(['\\n\\t']);\n\t}\n\t\n\tfunction testTable(src) {\n\t  return reTable.exec(src);\n\t}\n\t\n\tfunction parseTable(src, options) {\n\t  src = ribbon(src.trim());\n\t\n\t  var rowgroups = [];\n\t  var colgroup = void 0;\n\t  var caption = void 0;\n\t  var tAttr = {};\n\t  var tCurr = void 0;\n\t  var row = void 0;\n\t  var inner = void 0;\n\t  var pba = void 0;\n\t  var more = void 0;\n\t  var m = void 0;\n\t  var extended = 0;\n\t\n\t  var setRowGroup = function setRowGroup(type, pba) {\n\t    tCurr = [type, pba || {}];\n\t    rowgroups.push(tCurr);\n\t  };\n\t\n\t  if (m = reHead.exec(src)) {\n\t    // parse and apply table attr\n\t    src.advance(m[0]);\n\t    pba = parseAttr(m[2], 'table');\n\t    if (pba) {\n\t      merge(tAttr, pba[1]);\n\t    }\n\t    if (m[3]) {\n\t      tAttr.summary = m[3];\n\t    }\n\t  }\n\t\n\t  // caption\n\t  if (m = reCaption.exec(src)) {\n\t    caption = ['caption'];\n\t    if (pba = parseAttr(m[1], 'caption')) {\n\t      caption.push(pba[1]);\n\t      m[1] = m[1].slice(pba[0]);\n\t    }\n\t    if (/\\./.test(m[1])) {\n\t      // mandatory \".\"\n\t      caption.push(m[1].slice(1).replace(/\\|\\s*$/, '').trim());\n\t      extended++;\n\t      src.advance(m[0]);\n\t    } else {\n\t      caption = null;\n\t    }\n\t  }\n\t\n\t  do {\n\t    // colgroup\n\t    if (m = reColgroup.exec(src)) {\n\t      colgroup = parseColgroup(m[1]);\n\t      extended++;\n\t    }\n\t    // \"rowgroup\" (tbody, thead, tfoot)\n\t    else if (m = reRowgroup.exec(src)) {\n\t        // PHP allows any amount of these in any order\n\t        // and simply translates them straight through\n\t        // the same is done here.\n\t        var tag = charToTag[m[1]] || 'tbody';\n\t        pba = parseAttr(m[2] + ' ', tag);\n\t        setRowGroup(tag, pba && pba[1]);\n\t        extended++;\n\t      }\n\t      // row\n\t      else if (m = reRow.exec(src)) {\n\t          if (!tCurr) {\n\t            setRowGroup('tbody');\n\t          }\n\t\n\t          row = ['tr'];\n\t\n\t          if (m[2] && (pba = parseAttr(m[2], 'tr'))) {\n\t            // FIXME: requires \"\\.\\s?\" -- else what ?\n\t            row.push(pba[1]);\n\t          }\n\t\n\t          tCurr.push('\\n\\t\\t', row);\n\t          inner = ribbon(m[3]);\n\t\n\t          do {\n\t            inner.save();\n\t\n\t            // cell loop\n\t            var th = inner.startsWith('_');\n\t            var cell = [th ? 'th' : 'td'];\n\t            if (th) {\n\t              inner.advance(1);\n\t            }\n\t\n\t            pba = parseAttr(inner, 'td');\n\t            if (pba) {\n\t              inner.advance(pba[0]);\n\t              cell.push(pba[1]); // FIXME: don't do this if next text fails\n\t            }\n\t\n\t            if (pba || th) {\n\t              var p = /^\\.\\s*/.exec(inner);\n\t              if (p) {\n\t                inner.advance(p[0]);\n\t              } else {\n\t                cell = ['td'];\n\t                inner.load();\n\t              }\n\t            }\n\t\n\t            var mx = /^(==.*?==|[^\\|])*/.exec(inner);\n\t            cell = cell.concat(parsePhrase(mx[0], options));\n\t            row.push('\\n\\t\\t\\t', cell);\n\t            more = inner.valueOf().charAt(mx[0].length) === '|';\n\t            inner.advance(mx[0].length + 1);\n\t          } while (more);\n\t\n\t          row.push('\\n\\t\\t');\n\t        }\n\t    //\n\t    if (m) {\n\t      src.advance(m[0]);\n\t    }\n\t  } while (m);\n\t\n\t  // assemble table\n\t  var table = ['table', tAttr];\n\t  if (extended) {\n\t    if (caption) {\n\t      table.push('\\n\\t', caption);\n\t    }\n\t    if (colgroup) {\n\t      table.push('\\n\\t', colgroup);\n\t    }\n\t    rowgroups.forEach(function (tbody) {\n\t      table.push('\\n\\t', tbody.concat(['\\n\\t']));\n\t    });\n\t  } else {\n\t    table = table.concat(reIndent(rowgroups[0].slice(2), -1));\n\t  }\n\t\n\t  table.push('\\n');\n\t  return table;\n\t}\n\t\n\tmodule.exports = {\n\t  parseColgroup: parseColgroup,\n\t  parseTable: parseTable,\n\t  testTable: testTable\n\t};\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** textile.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 63c4084f6100209b42cb\n **/","/*\n** Textile parser for JavaScript\n**\n** Copyright (c) 2012 Borgar Þorsteinsson (MIT License).\n**\n*/\n\nconst merge = require( './merge' );\nconst { toHTML } = require( './jsonml' );\nconst { parseFlow } = require( './textile/flow' );\nconst { parseHtml } = require( './html' );\n\nfunction textile ( txt, opt ) {\n  // get a throw-away copy of options\n  opt = merge( merge({}, textile.defaults ), opt || {});\n  // run the converter\n  return parseFlow( txt, opt ).map( toHTML ).join( '' );\n};\nmodule.exports = textile;\n\n// options\ntextile.defaults = {\n  // single-line linebreaks are converted to <br> by default\n  'breaks': true\n};\ntextile.setOptions = textile.setoptions = function ( opt ) {\n  merge( textile.defaults, opt );\n  return this;\n};\n\ntextile.parse = textile.convert = textile;\ntextile.html_parser = parseHtml;\n\ntextile.jsonml = function ( txt, opt ) {\n  // get a throw-away copy of options\n  opt = merge( merge({}, textile.defaults ), opt || {});\n  // parse and return tree\n  return [ 'html' ].concat( parseFlow( txt, opt ) );\n};\ntextile.serialize = toHTML;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","// merge object b properties into object a\nmodule.exports = function merge ( a, b ) {\n  if ( b ) {\n    for ( const k in b ) {\n      a[ k ] = b[ k ];\n    }\n  }\n  return a;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/merge.js\n **/","/*\n** JSONML helper methods - http://www.jsonml.org/\n**\n** This provides the `JSONML` object, which contains helper\n** methods for rendering JSONML to HTML.\n**\n** Note that the tag ! is taken to mean comment, this is however\n** not specified in the JSONML spec.\n*/\n\nconst singletons = require( './html' ).singletons;\n\n// drop or add tab levels to JsonML tree\nfunction reIndent ( ml, shiftBy ) {\n  // a bit obsessive, but there we are...\n  if ( !shiftBy ) {\n    return ml;\n  }\n  return ml.map( function ( s ) {\n    if ( /^\\n\\t+/.test( s ) ) {\n      if ( shiftBy < 0 ) {\n        s = s.slice( 0, shiftBy );\n      }\n      else {\n        for ( let i = 0; i < shiftBy; i++ ) {\n          s += '\\t';\n        }\n      }\n    }\n    else if ( Array.isArray( s ) ) {\n      return reIndent( s, shiftBy );\n    }\n    return s;\n  });\n}\n\nfunction escape ( text, escapeQuotes ) {\n  return text.replace( /&(?!(#\\d{2,}|#x[\\da-fA-F]{2,}|[a-zA-Z][a-zA-Z1-4]{1,6});)/g, '&amp;' )\n             .replace( /</g, '&lt;' )\n             .replace( />/g, '&gt;' )\n             .replace( /\"/g, escapeQuotes ? '&quot;' : '\"' )\n             .replace( /'/g, escapeQuotes ? '&#39;' : \"'\" );\n}\n\nfunction toHTML ( jsonml ) {\n  jsonml = jsonml.concat();\n\n  // basic case\n  if ( typeof jsonml === 'string' ) {\n    return escape( jsonml );\n  }\n\n  const tag = jsonml.shift();\n  let attributes = {};\n  let tagAttrs = '';\n  const content = [];\n\n  if ( jsonml.length && typeof jsonml[0] === 'object' && !Array.isArray( jsonml[0] ) ) {\n    attributes = jsonml.shift();\n  }\n\n  while ( jsonml.length ) {\n    content.push( toHTML( jsonml.shift() ) );\n  }\n\n  for ( const a in attributes ) {\n    tagAttrs += ( attributes[a] == null )\n            ? ` ${ a }`\n            : ` ${ a }=\"${ escape( String( attributes[a] ), true ) }\"`;\n  }\n\n  // be careful about adding whitespace here for inline elements\n  if ( tag === '!' ) {\n    return `<!--${ content.join( '' ) }-->`;\n  }\n  else if ( tag in singletons || ( tag.indexOf( ':' ) > -1 && !content.length ) ) {\n    return `<${ tag }${ tagAttrs } />`;\n  }\n  else {\n    return `<${ tag }${ tagAttrs }>${ content.join( '' ) }</${ tag }>`;\n  }\n}\n\nmodule.exports = {\n  reIndent: reIndent,\n  toHTML: toHTML,\n  escape: escape\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/jsonml.js\n **/","const re = require( './re' );\nconst ribbon = require( './ribbon' );\n\nre.pattern.html_id = '[a-zA-Z][a-zA-Z\\\\d:]*';\nre.pattern.html_attr = '(?:\"[^\"]+\"|\\'[^\\']+\\'|[^>\\\\s]+)';\n\nconst reAttr = re.compile( /^\\s*([^=\\s]+)(?:\\s*=\\s*(\"[^\"]+\"|'[^']+'|[^>\\s]+))?/ );\nconst reComment = re.compile( /^<!--(.+?)-->/, 's' );\nconst reEndTag = re.compile( /^<\\/([:html_id:])([^>]*)>/ );\nconst reTag = re.compile( /^<([:html_id:])((?:\\s[^=\\s\\/]+(?:\\s*=\\s*[:html_attr:])?)+)?\\s*(\\/?)>/ );\nconst reHtmlTagBlock = re.compile( /^\\s*<([:html_id:](?::[a-zA-Z\\d]+)*)((?:\\s[^=\\s\\/]+(?:\\s*=\\s*[:html_attr:])?)+)?\\s*(\\/?)>/ );\n\nconst singletons = {\n  area: 1,\n  base: 1,\n  br: 1,\n  col: 1,\n  embed: 1,\n  hr: 1,\n  img: 1,\n  input: 1,\n  link: 1,\n  meta: 1,\n  option: 1,\n  param: 1,\n  wbr: 1\n};\n\nfunction allowAll () {\n  return true;\n}\n\nfunction testComment ( src ) {\n  return reComment.exec( src );\n}\n\nfunction testOpenTagBlock ( src ) {\n  return reHtmlTagBlock.exec( src );\n}\n\nfunction testOpenTag ( src ) {\n  return reTag.exec( src );\n}\n\nfunction testCloseTag ( src ) {\n  return reEndTag.exec( src );\n}\n\nfunction parseHtmlAttr ( attrSrc ) {\n  // parse ATTR and add to element\n  const attr = {};\n  let m;\n  while ( ( m = reAttr.exec( attrSrc ) ) ) {\n    attr[ m[1] ] = ( typeof m[2] === 'string' ) ? m[2].replace( /^([\"'])(.*)\\1$/, '$2' ) : null;\n    attrSrc = attrSrc.slice( m[0].length );\n  }\n  return attr;\n}\n\nconst OPEN = 'OPEN';\nconst CLOSE = 'CLOSE';\nconst SINGLE = 'SINGLE';\nconst TEXT = 'TEXT';\nconst COMMENT = 'COMMENT';\nconst WS = 'WS';\n\nfunction tokenize ( src, whitelistTags, lazy ) {\n  const tokens = [];\n  let textMode = false;\n  let oktag = whitelistTags ? ( tag ) => tag in whitelistTags : allowAll;\n  const oktag_ = oktag;\n  const nesting = {};\n  let nestCount = 0;\n  let m;\n\n  src = ribbon( String( src ) );\n\n  do {\n    // comment\n    if ( ( m = testComment( src ) ) && oktag( '!' ) ) {\n      tokens.push({\n        type: COMMENT,\n        data: m[1],\n        pos: src.index(),\n        src: m[0]\n      });\n      src.advance( m[0] );\n    }\n\n    // end tag\n    else if ( ( m = testCloseTag( src ) ) && oktag( m[1] ) ) {\n      const token = {\n        type: CLOSE,\n        tag: m[1],\n        pos: src.index(),\n        src: m[0]\n      };\n      src.advance( m[0] );\n      tokens.push( token );\n      nesting[token.tag]--;\n      nestCount--;\n      // console.log( '/' + token.tag, nestCount, nesting );\n      if ( lazy && (\n          !nestCount ||\n          !nesting[token.tag] < 0 ||\n          isNaN( nesting[token.tag] )\n        ) ) {\n        return tokens;\n      }\n      // if parse is in text mode then that ends here\n      if ( textMode ) {\n        textMode = null;\n        oktag = oktag_;\n      }\n    }\n\n    // open/void tag\n    else if ( ( m = testOpenTag( src ) ) && oktag( m[1] ) ) {\n      const token = {\n        type: m[3] || m[1] in singletons ? SINGLE : OPEN,\n        tag: m[1],\n        pos: src.index(),\n        src: m[0]\n      };\n      if ( m[2] ) {\n        token.attr = parseHtmlAttr( m[2] );\n      }\n      // some elements can move parser into \"text\" mode\n      if ( m[1] === 'script' || m[1] === 'code' || m[1] === 'style' ) {\n        textMode = token.tag;\n        oktag = tag => tag === textMode;\n      }\n      if ( token.type === OPEN ) {\n        nestCount++;\n        nesting[token.tag] = ( nesting[token.tag] || 0 ) + 1;\n        // console.log( token.tag, nestCount, nesting );\n      }\n      tokens.push( token );\n      src.advance( m[0] );\n    }\n\n    // text content\n    else {\n      // no match, move by all \"uninteresting\" chars\n      m = /([^<]+|[^\\0])/.exec( src );\n      if ( m ) {\n        tokens.push({\n          type: TEXT,\n          data: m[0],\n          pos: src.index(),\n          src: m[0]\n        });\n      }\n      src.advance( m ? m[0].length || 1 : 1 );\n    }\n  }\n  while ( src.valueOf() );\n\n  return tokens;\n}\n\n// This \"indesciminately\" parses HTML text into a list of JSON-ML element\n// No steps are taken however to prevent things like <table><p><td> - user can still create nonsensical but \"well-formed\" markup\nfunction parse ( tokens, lazy ) {\n  const root = [];\n  const stack = [];\n  let curr = root;\n  let token;\n  for ( let i = 0; i < tokens.length; i++ ) {\n    token = tokens[i];\n    if ( token.type === COMMENT ) {\n      curr.push( [ '!', token.data ] );\n    }\n    else if ( token.type === TEXT || token.type === WS ) {\n      curr.push( token.data );\n    }\n    else if ( token.type === SINGLE ) {\n      curr.push( token.attr ? [ token.tag, token.attr ] : [ token.tag ] );\n    }\n    else if ( token.type === OPEN ) {\n      // TODO: some things auto close other things: <td>, <li>, <p>, <table>\n      // https://html.spec.whatwg.org/multipage/syntax.html#syntax-tag-omission\n      const elm = token.attr ? [ token.tag, token.attr ] : [ token.tag ];\n      curr.push( elm );\n      stack.push( elm );\n      curr = elm;\n    }\n    else if ( token.type === CLOSE ) {\n      if ( stack.length ) {\n        for ( let i = stack.length - 1; i >= 0; i-- ) {\n          const head = stack[i];\n          if ( head[0] === token.tag ) {\n            stack.splice( i );\n            curr = stack[stack.length - 1] || root;\n            break;\n          }\n        }\n      }\n      if ( !stack.length && lazy ) {\n        root.sourceLength = token.pos + token.src.length;\n        return root;\n      }\n    }\n  }\n  root.sourceLength = token ? token.pos + token.src.length : 0;\n  return root;\n}\n\nmodule.exports = {\n  singletons: singletons,\n  tokenize: tokenize,\n  parseHtml: parse,\n  parseHtmlAttr: parseHtmlAttr,\n  testCloseTag: testCloseTag,\n  testOpenTagBlock: testOpenTagBlock,\n  testOpenTag: testOpenTag,\n  testComment: testComment\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/html.js\n **/","/*\n** Regular Expression helper methods\n**\n** This provides the `re` object, which contains several helper\n** methods for working with big regular expressions (soup).\n**\n*/\n\nconst _cache = {};\n\nconst re = module.exports = {\n\n  pattern: {\n    'punct': '[!-/:-@\\\\[\\\\\\\\\\\\]-`{-~]',\n    'space': '\\\\s'\n  },\n\n  escape: function ( src ) {\n    return src.replace( /[\\-\\[\\]\\{\\}\\(\\)\\*\\+\\?\\.,\\\\\\^\\$\\|#\\s]/g, '\\\\$&' );\n  },\n\n  collapse: function ( src ) {\n    return src.replace( /(?:#.*?(?:\\n|$))/g, '' )\n              .replace( /\\s+/g, '' );\n  },\n\n  expandPatterns: function ( src ) {\n    // TODO: provide escape for patterns: \\[:pattern:] ?\n    return src.replace( /\\[:\\s*(\\w+)\\s*:\\]/g, function ( m, k ) {\n      const ex = re.pattern[k];\n      if ( ex ) {\n        return re.expandPatterns( ex );\n      }\n      else {\n        throw new Error( 'Pattern ' + m + ' not found in ' + src );\n      }\n    });\n  },\n\n  isRegExp: function ( r ) {\n    return Object.prototype.toString.call( r ) === '[object RegExp]';\n  },\n\n  compile: function ( src, flags ) {\n    if ( re.isRegExp( src ) ) {\n      if ( arguments.length === 1 ) { // no flags arg provided, use the RegExp one\n        flags = ( src.global ? 'g' : '' ) +\n                ( src.ignoreCase ? 'i' : '' ) +\n                ( src.multiline ? 'm' : '' );\n      }\n      src = src.source;\n    }\n    // don't do the same thing twice\n    const ckey = src + ( flags || '' );\n    if ( ckey in _cache ) {\n      return _cache[ ckey ];\n    }\n    // allow classes\n    let rx = re.expandPatterns( src );\n    // allow verbose expressions\n    if ( flags && /x/.test( flags ) ) {\n      rx = re.collapse( rx );\n    }\n    // allow dotall expressions\n    if ( flags && /s/.test( flags ) ) {\n      rx = rx.replace( /([^\\\\])\\./g, '$1[^\\\\0]' );\n    }\n    // TODO: test if MSIE and add replace \\s with [\\s\\u00a0] if it is?\n    // clean flags and output new regexp\n    flags = ( flags || '' ).replace( /[^gim]/g, '' );\n    return ( _cache[ ckey ] = new RegExp( rx, flags ) );\n  }\n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/re.js\n **/","module.exports = function ribbon ( feed ) {\n  const org = String( feed );\n  let slot;\n  let pos = 0;\n  const self = {\n\n    index: () => {\n      return pos;\n    },\n\n    save: () => {\n      slot = pos;\n      return self;\n    },\n\n    load: () => {\n      pos = slot;\n      feed = org.slice( pos );\n      return self;\n    },\n\n    advance: n => {\n      pos += ( typeof n === 'string' ) ? n.length : n;\n      feed = org.slice( pos );\n      return feed;\n    },\n\n    skipWS: () => {\n      const ws = /^\\s+/.exec( feed );\n      if ( ws ) {\n        pos += ws[0].length;\n        feed = org.slice( pos );\n        return ws[0];\n      }\n      return '';\n    },\n\n    lookbehind: nchars => {\n      nchars = nchars == null ? 1 : nchars;\n      return org.slice( pos - nchars, pos );\n    },\n\n    startsWith: s => {\n      return feed.substring( 0, s.length ) === s;\n    },\n\n    slice: ( a, b ) => {\n      return b != null ? feed.slice( a, b ) : feed.slice( a );\n    },\n\n    valueOf: () => {\n      return feed;\n    },\n\n    toString: () => {\n      return feed;\n    }\n\n  };\n\n  return self;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/ribbon.js\n **/","/*\n** textile flow content parser\n*/\nconst builder = require( '../builder' );\nconst ribbon = require( '../ribbon' );\nconst re = require( '../re' );\nconst fixLinks = require( '../fixlinks' );\n\nconst { parseHtml, tokenize, parseHtmlAttr, singletons, testComment, testOpenTagBlock } = require( '../html' );\n\nconst { parsePhrase } = require( './phrase' );\nconst { copyAttr, parseAttr } = require( './attr' );\nconst { testList, parseList } = require( './list' );\nconst { testDefList, parseDefList } = require( './deflist' );\nconst { testTable, parseTable } = require( './table' );\n\nconst { txblocks, txlisthd, txattr } = require( './re_ext' );\nre.pattern.txblocks = txblocks;\nre.pattern.txlisthd = txlisthd;\nre.pattern.txattr = txattr;\n\n// HTML tags allowed in the document (root) level that trigger HTML parsing\nconst allowedBlocktags = {\n  'p': 0,\n  'hr': 0,\n  'ul': 1,\n  'ol': 0,\n  'li': 0,\n  'div': 1,\n  'pre': 0,\n  'object': 1,\n  'script': 0,\n  'noscript': 0,\n  'blockquote': 1,\n  'notextile': 1\n};\n\nconst reBlock = re.compile( /^([:txblocks:])/ );\nconst reBlockNormal = re.compile( /^(.*?)($|\\r?\\n(?=[:txlisthd:])|\\r?\\n(?:\\s*\\n|$)+)/, 's' );\nconst reBlockExtended = re.compile( /^(.*?)($|\\r?\\n(?=[:txlisthd:])|\\r?\\n+(?=[:txblocks:][:txattr:]\\.))/, 's' );\nconst reBlockNormalPre = re.compile( /^(.*?)($|\\r?\\n(?:\\s*\\n|$)+)/, 's' );\nconst reBlockExtendedPre = re.compile( /^(.*?)($|\\r?\\n+(?=[:txblocks:][:txattr:]\\.))/, 's' );\n\nconst reRuler = /^(\\-\\-\\-+|\\*\\*\\*+|___+)(\\r?\\n\\s+|$)/;\nconst reLinkRef = re.compile( /^\\[([^\\]]+)\\]((?:https?:\\/\\/|\\/)\\S+)(?:\\s*\\n|$)/ );\nconst reFootnoteDef = /^fn\\d+$/;\n\n\nconst hasOwn = Object.prototype.hasOwnProperty;\nfunction extend ( target, ...args ) {\n  for ( let i = 1; i < args.length; i++ ) {\n    const src = args[i];\n    if ( src != null ) {\n      for ( const nextKey in src ) {\n        if ( hasOwn.call( src, nextKey ) ) {\n          target[nextKey] = src[nextKey];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nfunction paragraph ( s, tag, pba, linebreak, options ) {\n  tag = tag || 'p';\n  let out = [];\n  s.split( /(?:\\r?\\n){2,}/ ).forEach( function ( bit, i ) {\n    if ( tag === 'p' && /^\\s/.test( bit ) ) {\n      // no-paragraphs\n      bit = bit.replace( /\\r?\\n[\\t ]/g, ' ' ).trim();\n      out = out.concat( parsePhrase( bit, options ) );\n    }\n    else {\n      if ( linebreak && i ) { out.push( linebreak ); }\n      out.push( pba ? [ tag, pba ].concat( parsePhrase( bit, options ) )\n                    : [ tag ].concat( parsePhrase( bit, options ) ) );\n    }\n  });\n  return out;\n};\n\nfunction parseFlow ( src, options ) {\n  const list = builder();\n\n  let linkRefs;\n  let m;\n\n  src = ribbon( src.replace( /^( *\\r?\\n)+/, '' ) );\n\n  // loop\n  while ( src.valueOf() ) {\n    src.save();\n\n    // link_ref -- this goes first because it shouldn't trigger a linebreak\n    if ( ( m = reLinkRef.exec( src ) ) ) {\n      if ( !linkRefs ) { linkRefs = {}; }\n      src.advance( m[0] );\n      linkRefs[m[1]] = m[2];\n      continue;\n    }\n\n    // add linebreak\n    list.linebreak();\n\n    // named block\n    if ( ( m = reBlock.exec( src ) ) ) {\n      src.advance( m[0] );\n      const blockType = m[0];\n      let pba = parseAttr( src, blockType );\n\n      if ( pba ) {\n        src.advance( pba[0] );\n        pba = pba[1];\n      }\n      if ( ( m = /^\\.(\\.?)(?:\\s|(?=:))/.exec( src ) ) ) {\n        // FIXME: this whole copyAttr seems rather strange?\n        // slurp rest of block\n        const extended = !!m[1];\n        let reBlockGlob = ( extended ? reBlockExtended : reBlockNormal );\n        if ( blockType === 'bc' || blockType === 'pre' ) {\n          reBlockGlob = ( extended ? reBlockExtendedPre : reBlockNormalPre );\n        }\n        m = reBlockGlob.exec( src.advance( m[0] ) );\n        src.advance( m[0] );\n        // bq | bc | notextile | pre | h# | fn# | p | ###\n        if ( blockType === 'bq' ) {\n          let inner = m[1];\n          if ( ( m = /^:(\\S+)\\s+/.exec( inner ) ) ) {\n            if ( !pba ) { pba = {}; }\n            pba.cite = m[1];\n            inner = inner.slice( m[0].length );\n          }\n          // RedCloth adds all attr to both: this is bad because it produces duplicate IDs\n          const par = paragraph( inner, 'p', copyAttr( pba, { 'cite': 1, 'id': 1 }), '\\n', options );\n          list.add( [ 'blockquote', pba, '\\n' ].concat( par ).concat( [ '\\n' ] ) );\n        }\n        else if ( blockType === 'bc' ) {\n          const subPba = ( pba ) ? copyAttr( pba, { 'id': 1 }) : null;\n          list.add( [ 'pre', pba, ( subPba ? [ 'code', subPba, m[1] ] : [ 'code', m[1] ] ) ] );\n        }\n        else if ( blockType === 'notextile' ) {\n          list.merge( parseHtml( tokenize( m[1] ) ) );\n        }\n        else if ( blockType === '###' ) {\n          // ignore the insides\n        }\n        else if ( blockType === 'pre' ) {\n          // I disagree with RedCloth, but agree with PHP here:\n          // \"pre(foo#bar).. line1\\n\\nline2\" prevents multiline preformat blocks\n          // ...which seems like the whole point of having an extended pre block?\n          list.add( [ 'pre', pba, m[1] ] );\n        }\n        else if ( reFootnoteDef.test( blockType ) ) { // footnote\n          // Need to be careful: RedCloth fails \"fn1(foo#m). footnote\" -- it confuses the ID\n          const fnid = blockType.replace( /\\D+/g, '' );\n          if ( !pba ) { pba = {}; }\n          pba.class = ( pba['class'] ? pba['class'] + ' ' : '' ) + 'footnote';\n          pba.id = 'fn' + fnid;\n          list.add( [ 'p', pba, [ 'a', { 'href': '#fnr' + fnid }, [ 'sup', fnid ] ], ' ' ]\n                      .concat( parsePhrase( m[1], options ) ) );\n        }\n        else { // heading | paragraph\n          list.merge( paragraph( m[1], blockType, pba, '\\n', options ) );\n        }\n        continue;\n      }\n      else {\n        src.load();\n      }\n    }\n\n    // HTML comment\n    if ( ( m = testComment( src ) ) ) {\n      src.advance( m[0] + ( /(?:\\s*\\n+)+/.exec( src ) || [] )[0] );\n      list.add( [ '!', m[1] ] );\n      continue;\n    }\n\n    // block HTML\n    if ( ( m = testOpenTagBlock( src ) ) ) {\n      const tag = m[1];\n\n      // Is block tag? ...\n      if ( tag in allowedBlocktags ) {\n        if ( m[3] || tag in singletons ) { // single?\n          src.advance( m[0] );\n          if ( /^\\s*(\\n|$)/.test( src ) ) {\n            const elm = [ tag ];\n            if ( m[2] ) { elm.push( parseHtmlAttr( m[2] ) ); }\n            list.add( elm );\n            src.skipWS();\n            continue;\n          }\n        }\n        else if ( tag === 'pre' ) {\n          const t = tokenize( src, { 'pre': 1, 'code': 1 }, tag );\n          const p = parseHtml( t, true );\n          src.load().advance( p.sourceLength );\n          if ( /^\\s*(\\n|$)/.test( src ) ) {\n            list.merge( p );\n            src.skipWS(); // skip tailing whitespace\n            continue;\n          }\n        }\n        else if ( tag === 'notextile' ) {\n          // merge all child elements\n          const t = tokenize( src, null, tag );\n          let s = 1; // start after open tag\n          while ( /^\\s+$/.test( t[s].src ) ) {\n            s++; // skip whitespace\n          }\n          const p = parseHtml( t.slice( s, -1 ), true );\n          const x = t.pop();\n          src.load().advance( x.pos + x.src.length );\n          if ( /^\\s*(\\n|$)/.test( src ) ) {\n            list.merge( p );\n            src.skipWS(); // skip tailing whitespace\n            continue;\n          }\n        }\n        else {\n          src.skipWS();\n          const t = tokenize( src, null, tag );\n          const x = t.pop(); // this should be the end tag\n          let s = 1; // start after open tag\n          while ( t[s] && /^[\\n\\r]+$/.test( t[s].src ) ) {\n            s++; // skip whitespace\n          }\n          if ( x.tag === tag ) {\n            // inner can be empty\n            const inner = ( t.length > 1 ) ? src.slice( t[s].pos, x.pos ) : '';\n            src.advance( x.pos + x.src.length );\n            if ( /^\\s*(\\n|$)/.test( src ) ) {\n              let elm = [ tag ];\n              if ( m[2] ) { elm.push( parseHtmlAttr( m[2] ) ); }\n              if ( tag === 'script' || tag === 'style' ) {\n                elm.push( inner );\n              }\n              else {\n                const innerHTML = inner.replace( /^\\n+/, '' ).replace( /\\s*$/, '' );\n                const isBlock = /\\n\\r?\\n/.test( innerHTML ) || tag === 'ol' || tag === 'ul';\n                const innerElm = isBlock\n                      ? parseFlow( innerHTML, options )\n                      : parsePhrase( innerHTML, extend({}, options, { breaks: false }) );\n                if ( isBlock || /^\\n/.test( inner ) ) {\n                  elm.push( '\\n' );\n                }\n                if ( isBlock || /\\s$/.test( inner ) ) {\n                  innerElm.push( '\\n' );\n                }\n                elm = elm.concat( innerElm );\n              }\n\n              list.add( elm );\n              src.skipWS(); // skip tailing whitespace\n              continue;\n            }\n          }\n        }\n      }\n      src.load();\n    }\n\n    // ruler\n    if ( ( m = reRuler.exec( src ) ) ) {\n      src.advance( m[0] );\n      list.add( [ 'hr' ] );\n      continue;\n    }\n\n    // list\n    if ( ( m = testList( src ) ) ) {\n      src.advance( m[0] );\n      list.add( parseList( m[0], options ) );\n      continue;\n    }\n\n    // definition list\n    if ( ( m = testDefList( src ) ) ) {\n      src.advance( m[0] );\n      list.add( parseDefList( m[0], options ) );\n      continue;\n    }\n\n    // table\n    if ( ( m = testTable( src ) ) ) {\n      src.advance( m[0] );\n      list.add( parseTable( m[1], options ) );\n      continue;\n    }\n\n    // paragraph\n    m = reBlockNormal.exec( src );\n    list.merge( paragraph( m[1], 'p', undefined, '\\n', options ) );\n    src.advance( m[0] );\n  }\n\n  return linkRefs ? fixLinks( list.get(), linkRefs ) : list.get();\n}\n\nexports.parseFlow = parseFlow;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/textile/flow.js\n **/","module.exports = function builder ( initArr ) {\n  const arr = Array.isArray( initArr ) ? initArr : [];\n\n  return {\n    add: function ( node ) {\n      if ( typeof node === 'string' &&\n           typeof arr[ arr.length - 1 ] === 'string' ) {\n        // join if possible\n        arr[ arr.length - 1 ] += node;\n      }\n      else if ( Array.isArray( node ) ) {\n        arr.push( node.filter( s => s !== undefined ) );\n      }\n      else if ( node ) {\n        arr.push( node );\n      }\n      return this;\n    },\n\n    merge: function ( arr ) {\n      for ( let i = 0, l = arr.length; i < l; i++ ) {\n        this.add( arr[i] );\n      }\n      return this;\n    },\n\n    linebreak: function () {\n      if ( arr.length ) {\n        this.add( '\\n' );\n      }\n    },\n\n    get: function () {\n      return arr;\n    }\n  };\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/builder.js\n **/","// recurse the tree and swap out any \"href\" attributes\n// this uses the context as the replace dictionary so it can be fed to Array#map\nmodule.exports = function fixLinks ( ml, dict ) {\n  if ( Array.isArray( ml ) ) {\n    if ( ml[0] === 'a' ) { // found a link\n      const attr = ml[1];\n      if ( typeof attr === 'object' && 'href' in attr && attr.href in dict ) {\n        attr.href = dict[attr.href];\n      }\n    }\n    for ( let i = 0, l = ml.length; i < l; i++ ) {\n      if ( Array.isArray( ml[i] ) ) {\n        fixLinks( ml[i], dict );\n      }\n    }\n  }\n  return ml;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/fixlinks.js\n **/","/* textile inline parser */\n\nconst ribbon = require( '../ribbon' );\nconst builder = require( '../builder' );\nconst re = require( '../re' );\n\nconst { parseAttr } = require( './attr' );\nconst { parseGlyph } = require( './glyph' );\nconst { parseHtmlAttr, singletons, testComment, testOpenTag } = require( '../html' );\n\nconst { ucaps, txattr, txcite } = require( './re_ext' );\nre.pattern.txattr = txattr;\nre.pattern.txcite = txcite;\nre.pattern.ucaps = ucaps;\n\nconst phraseConvert = {\n  '*': 'strong',\n  '**': 'b',\n  '??': 'cite',\n  '_': 'em',\n  '__': 'i',\n  '-': 'del',\n  '%': 'span',\n  '+': 'ins',\n  '~': 'sub',\n  '^': 'sup',\n  '@': 'code'\n};\n\nconst rePhrase = /^([\\[\\{]?)(__?|\\*\\*?|\\?\\?|[\\-\\+\\^~@%])/;\nconst reImage = re.compile( /^!(?!\\s)([:txattr:](?:\\.[^\\n\\S]|\\.(?:[^\\.\\/]))?)([^!\\s]+?) ?(?:\\(((?:[^\\(\\)]|\\([^\\(\\)]+\\))+)\\))?!(?::([^\\s]+?(?=[!-\\.:-@\\[\\\\\\]-`{-~](?:$|\\s)|\\s|$)))?/ );\nconst reImageFenced = re.compile( /^\\[!(?!\\s)([:txattr:](?:\\.[^\\n\\S]|\\.(?:[^\\.\\/]))?)([^!\\s]+?) ?(?:\\(((?:[^\\(\\)]|\\([^\\(\\)]+\\))+)\\))?!(?::([^\\s]+?(?=[!-\\.:-@\\[\\\\\\]-`{-~](?:$|\\s)|\\s|$)))?\\]/ );\n// NB: there is an exception in here to prevent matching \"TM)\"\nconst reCaps = re.compile( /^((?!TM\\)|tm\\))[[:ucaps:]](?:[[:ucaps:]\\d]{1,}(?=\\()|[[:ucaps:]\\d]{2,}))(?:\\((.*?)\\))?(?=\\W|$)/ );\nconst reLink = re.compile( /^\"(?!\\s)((?:[^\"]|\"(?![\\s:])[^\\n\"]+\"(?!:))+)\"[:txcite:]/ );\nconst reLinkFenced = /^\\[\"([^\\n]+?)\":((?:\\[[a-z0-9]*\\]|[^\\]])+)\\]/;\nconst reLinkTitle = /\\s*\\(((?:\\([^\\(\\)]*\\)|[^\\(\\)])+)\\)$/;\nconst reFootnote = /^\\[(\\d+)(!?)\\]/;\n\nfunction parsePhrase ( src, options ) {\n  src = ribbon( src );\n  const list = builder();\n  let m;\n  let pba;\n\n  // loop\n  do {\n    src.save();\n\n    // linebreak -- having this first keeps it from messing to much with other phrases\n    if ( src.startsWith( '\\r\\n' ) ) {\n      src.advance( 1 ); // skip cartridge returns\n    }\n    if ( src.startsWith( '\\n' ) ) {\n      src.advance( 1 );\n      if ( src.startsWith( ' ' ) ) {\n        src.advance( 1 );\n      }\n      else if ( options.breaks ) {\n        list.add( [ 'br' ] );\n      }\n      list.add( '\\n' );\n      continue;\n    }\n\n    // inline notextile\n    if ( ( m = /^==(.*?)==/.exec( src ) ) ) {\n      src.advance( m[0] );\n      list.add( m[1] );\n      continue;\n    }\n\n    // lookbehind => /([\\s>.,\"'?!;:])$/\n    const behind = src.lookbehind( 1 );\n    const boundary = !behind || /^[\\s>.,\"'?!;:()]$/.test( behind );\n    // FIXME: need to test right boundary for phrases as well\n    if ( ( m = rePhrase.exec( src ) ) && ( boundary || m[1] ) ) {\n      src.advance( m[0] );\n      const tok = m[2];\n      const fence = m[1];\n      const phraseType = phraseConvert[tok];\n      const code = phraseType === 'code';\n\n      if ( ( pba = !code && parseAttr( src, phraseType, tok ) ) ) {\n        src.advance( pba[0] );\n        pba = pba[1];\n      }\n      // FIXME: if we can't match the fence on the end, we should output fence-prefix as normal text\n      // seek end\n      let mMid;\n      let mEnd;\n      if ( fence === '[' ) {\n        mMid = '^(.*?)';\n        mEnd = '(?:])';\n      }\n      else if ( fence === '{' ) {\n        mMid = '^(.*?)';\n        mEnd = '(?:})';\n      }\n      else {\n        const t1 = re.escape( tok.charAt( 0 ) );\n        mMid = ( code ) ? '^(\\\\S+|\\\\S+.*?\\\\S)'\n                        : `^([^\\\\s${ t1 }]+|[^\\\\s${ t1 }].*?\\\\S(${ t1 }*))`;\n        mEnd = '(?=$|[\\\\s.,\"\\'!?;:()«»„“”‚‘’])';\n      }\n      const rx = re.compile( `${ mMid }(${ re.escape( tok ) })${ mEnd }` );\n      if ( ( m = rx.exec( src ) ) && m[1] ) {\n        src.advance( m[0] );\n        if ( code ) {\n          list.add( [ phraseType, m[1] ] );\n        }\n        else {\n          list.add( [ phraseType, pba ].concat( parsePhrase( m[1], options ) ) );\n        }\n        continue;\n      }\n      // else\n      src.load();\n    }\n\n    // image\n    if ( ( m = reImage.exec( src ) ) || ( m = reImageFenced.exec( src ) ) ) {\n      src.advance( m[0] );\n\n      pba = m[1] && parseAttr( m[1], 'img' );\n      const attr = pba ? pba[1] : { 'src': '' };\n      let img = [ 'img', attr ];\n      attr.src = m[2];\n      attr.alt = m[3] ? ( attr.title = m[3] ) : '';\n\n      if ( m[4] ) { // +cite causes image to be wraped with a link (or link_ref)?\n        // TODO: support link_ref for image cite\n        img = [ 'a', { 'href': m[4] }, img ];\n      }\n      list.add( img );\n      continue;\n    }\n\n    // html comment\n    if ( ( m = testComment( src ) ) ) {\n      src.advance( m[0] );\n      list.add( [ '!', m[1] ] );\n      continue;\n    }\n    // html tag\n    // TODO: this seems to have a lot of overlap with block tags... DRY?\n    if ( ( m = testOpenTag( src ) ) ) {\n      src.advance( m[0] );\n      const tag = m[1];\n      const single = m[3] || m[1] in singletons;\n      let element = [ tag ];\n      if ( m[2] ) {\n        element.push( parseHtmlAttr( m[2] ) );\n      }\n      if ( single ) { // single tag\n        list.add( element ).add( src.skipWS() );\n        continue;\n      }\n      else { // need terminator\n        // gulp up the rest of this block...\n        const reEndTag = re.compile( `^(.*?)(</${ tag }\\\\s*>)`, 's' );\n        if ( ( m = reEndTag.exec( src ) ) ) {\n          src.advance( m[0] );\n          if ( tag === 'code' ) {\n            element.push( m[1] );\n          }\n          else if ( tag === 'notextile' ) {\n            list.merge( parsePhrase( m[1], options ) );\n            continue;\n          }\n          else {\n            element = element.concat( parsePhrase( m[1], options ) );\n          }\n          list.add( element );\n          continue;\n        }\n        // end tag is missing, treat tag as normal text...\n      }\n      src.load();\n    }\n\n    // footnote\n    if ( ( m = reFootnote.exec( src ) ) && /\\S/.test( behind ) ) {\n      src.advance( m[0] );\n      list.add( [ 'sup', { 'class': 'footnote', 'id': 'fnr' + m[1] },\n                  ( m[2] === '!' ? m[1] // \"!\" suppresses the link\n                                 : [ 'a', { href: '#fn' + m[1] }, m[1] ] )\n                ] );\n      continue;\n    }\n\n    // caps / abbr\n    if ( ( m = reCaps.exec( src ) ) ) {\n      src.advance( m[0] );\n      let caps = [ 'span', { 'class': 'caps' }, m[1] ];\n      if ( m[2] ) {\n        // FIXME: use <abbr>, not acronym!\n        caps = [ 'acronym', { 'title': m[2] }, caps ];\n      }\n      list.add( caps );\n      continue;\n    }\n\n    // links\n    if ( ( boundary && ( m = reLink.exec( src ) ) ) ||\n                       ( m = reLinkFenced.exec( src ) ) ) {\n      src.advance( m[0] );\n      let title = m[1].match( reLinkTitle );\n      let inner = ( title ) ? m[1].slice( 0, m[1].length - title[0].length ) : m[1];\n      if ( ( pba = parseAttr( inner, 'a' ) ) ) {\n        inner = inner.slice( pba[0] );\n        pba = pba[1];\n      }\n      else {\n        pba = {};\n      }\n      if ( title && !inner ) {\n        inner = title[0];\n        title = '';\n      }\n      pba.href = m[2];\n      if ( title ) { pba.title = title[1]; }\n      list.add( [ 'a', pba ].concat( parsePhrase( inner.replace( /^(\\.?\\s*)/, '' ), options ) ) );\n      continue;\n    }\n\n    // no match, move by all \"uninteresting\" chars\n    m = /([a-zA-Z0-9,.':]+|[ \\f\\r\\t\\v\\xA0\\u2028\\u2029]+|[^\\0])/.exec( src );\n    if ( m ) {\n      list.add( m[0] );\n    }\n    src.advance( m ? m[0].length || 1 : 1 );\n  }\n  while ( src.valueOf() );\n\n  return list.get().map( parseGlyph );\n}\n\nexports.parsePhrase = parsePhrase;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/textile/phrase.js\n **/","const reClassid = /^\\(([^\\(\\)\\n]+)\\)/;\nconst rePaddingL = /^(\\(+)/;\nconst rePaddingR = /^(\\)+)/;\nconst reAlignBlock = /^(<>|<|>|=)/;\nconst reAlignImg = /^(<|>|=)/;\nconst reVAlign = /^(~|\\^|\\-)/;\nconst reColSpan = /^\\\\(\\d+)/;\nconst reRowSpan = /^\\/(\\d+)/;\nconst reStyles = /^\\{([^\\}]*)\\}/;\nconst reCSS = /^\\s*([^:\\s]+)\\s*:\\s*(.+)\\s*$/;\nconst reLang = /^\\[([^\\[\\]\\n]+)\\]/;\n\nconst pbaAlignLookup = {\n  '<': 'left',\n  '=': 'center',\n  '>': 'right',\n  '<>': 'justify'\n};\n\nconst pbaVAlignLookup = {\n  '~': 'bottom',\n  '^': 'top',\n  '-': 'middle'\n};\n\nfunction copyAttr ( s, blacklist ) {\n  if ( !s ) { return undefined; }\n  const d = {};\n  for ( const k in s ) {\n    if ( k in s && ( !blacklist || !( k in blacklist ) ) ) {\n      d[ k ] = s[ k ];\n    }\n  }\n  return d;\n}\n\nfunction testBlock ( name ) {\n  // \"in\" test would be better but what about fn#.?\n  return /^(?:table|t[dh]|t(?:foot|head|body)|b[qc]|div|notextile|pre|h[1-6]|fn\\\\d+|p|###)$/.test( name );\n}\n\n/*\n  The attr bit causes massive problems for span elements when parentheses are used.\n  Parentheses are a total mess and, unsurprisingly, cause trip-ups:\n\n   RC: `_{display:block}(span) span (span)_` -> `<em style=\"display:block;\" class=\"span\">(span) span (span)</em>`\n   PHP: `_{display:block}(span) span (span)_` -> `<em style=\"display:block;\">(span) span (span)</em>`\n\n  PHP and RC seem to mostly solve this by not parsing a final attr parens on spans if the\n  following character is a non-space. I've duplicated that: Class/ID is not matched on spans\n  if it is followed by `endToken` or <space>.\n\n  Lang is not matched here if it is followed by the end token. Theoretically I could limit the lang\n  attribute to /^\\[[a-z]{2+}(\\-[a-zA-Z0-9]+)*\\]/ because Textile is layered on top of HTML which\n  only accepts valid BCP 47 language tags, but who knows what atrocities are being preformed\n  out there in the real world. So this attempts to emulate the other libraries.\n*/\nfunction parseAttr ( input, element, endToken ) {\n  input = String( input );\n  if ( !input || element === 'notextile' ) {\n    return undefined;\n  }\n\n  let m;\n  const st = {};\n  const o = { 'style': st };\n  let remaining = input;\n\n  const isBlock = testBlock( element );\n  const isImg = element === 'img';\n  const isList = element === 'li';\n  const isPhrase = !isBlock && !isImg && element !== 'a';\n  const reAlign = ( isImg ) ? reAlignImg : reAlignBlock;\n\n  do {\n    if ( ( m = reStyles.exec( remaining ) ) ) {\n      m[1].split( ';' ).forEach( function ( p ) {\n        const d = p.match( reCSS );\n        if ( d ) { st[ d[1] ] = d[2]; }\n      });\n      remaining = remaining.slice( m[0].length );\n      continue;\n    }\n\n    if ( ( m = reLang.exec( remaining ) ) ) {\n      const rm = remaining.slice( m[0].length );\n      if ( ( !rm && isPhrase ) ||\n           ( endToken && endToken === rm.slice( 0, endToken.length ) ) ) {\n        m = null;\n      }\n      else {\n        o['lang'] = m[1];\n        remaining = remaining.slice( m[0].length );\n      }\n      continue;\n    }\n\n    if ( ( m = reClassid.exec( remaining ) ) ) {\n      const rm = remaining.slice( m[0].length );\n      if (\n          ( !rm && isPhrase ) ||\n          ( endToken && ( rm[0] === ' ' || endToken === rm.slice( 0, endToken.length ) ) )\n         ) {\n        m = null;\n      }\n      else {\n        const bits = m[1].split( '#' );\n        if ( bits[0] ) { o.class = bits[0]; }\n        if ( bits[1] ) { o.id = bits[1]; }\n        remaining = rm;\n      }\n      continue;\n    }\n\n    if ( isBlock || isList ) {\n      if ( ( m = rePaddingL.exec( remaining ) ) ) {\n        st[ 'padding-left' ] = `${ m[1].length }em`;\n        remaining = remaining.slice( m[0].length );\n        continue;\n      }\n      if ( ( m = rePaddingR.exec( remaining ) ) ) {\n        st[ 'padding-right' ] = `${ m[1].length }em`;\n        remaining = remaining.slice( m[0].length );\n        continue;\n      }\n    }\n\n    // only for blocks:\n    if ( isImg || isBlock || isList ) {\n      if ( ( m = reAlign.exec( remaining ) ) ) {\n        const align = pbaAlignLookup[ m[1] ];\n        if ( isImg ) {\n          o[ 'align' ] = align;\n        }\n        else {\n          st[ 'text-align' ] = align;\n        }\n        remaining = remaining.slice( m[0].length );\n        continue;\n      }\n    }\n\n    // only for table cells\n    if ( element === 'td' || element === 'tr' ) {\n      if ( ( m = reVAlign.exec( remaining ) ) ) {\n        st[ 'vertical-align' ] = pbaVAlignLookup[ m[1] ];\n        remaining = remaining.slice( m[0].length );\n        continue;\n      }\n    }\n    if ( element === 'td' ) {\n      if ( ( m = reColSpan.exec( remaining ) ) ) {\n        o[ 'colspan' ] = m[1];\n        remaining = remaining.slice( m[0].length );\n        continue;\n      }\n      if ( ( m = reRowSpan.exec( remaining ) ) ) {\n        o[ 'rowspan' ] = m[1];\n        remaining = remaining.slice( m[0].length );\n        continue;\n      }\n    }\n  }\n  while ( m );\n\n  // collapse styles\n  const s = [];\n  for ( const v in st ) {\n    s.push( `${ v }:${ st[v] }` );\n  }\n  if ( s.length ) {\n    o.style = s.join( ';' );\n  }\n  else {\n    delete o.style;\n  }\n\n  return ( remaining === input ) ? undefined : [ input.length - remaining.length, o ];\n}\n\nmodule.exports = {\n  copyAttr: copyAttr,\n  parseAttr: parseAttr\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/textile/attr.js\n **/","/* textile glyph parser */\n\nconst re = require( '../re' );\n\nconst reApostrophe = /(\\w)'(\\w)/g;\nconst reArrow = /([^\\-]|^)->/;\nconst reClosingDQuote = re.compile( /([^\\s\\[\\(])\"(?=$|\\s|[:punct:])/g );\nconst reClosingSQuote = re.compile( /([^\\s\\[\\(])'(?=$|\\s|[:punct:])/g );\nconst reCopyright = /(\\b ?|\\s|^)(?:\\(C\\)|\\[C\\])/gi;\nconst reDimsign = /([\\d\\.,]+['\"]? ?)x( ?)(?=[\\d\\.,]['\"]?)/g;\nconst reDoublePrime = re.compile( /(\\d*[\\.,]?\\d+)\"(?=\\s|$|[:punct:])/g );\nconst reEllipsis = /([^.]?)\\.{3}/g;\nconst reEmdash = /(^|[\\s\\w])--([\\s\\w]|$)/g;\nconst reEndash = / - /g;\nconst reOpenDQuote = /\"/g;\nconst reOpenSQuote = /'/g;\nconst reRegistered = /(\\b ?|\\s|^)(?:\\(R\\)|\\[R\\])/gi;\nconst reSinglePrime = re.compile( /(\\d*[\\.,]?\\d+)'(?=\\s|$|[:punct:])/g );\nconst reTrademark = /(\\b ?|\\s|^)(?:\\((?:TM|tm)\\)|\\[(?:TM|tm)\\])/g;\n\nexports.parseGlyph = function parseGlyph ( src ) {\n  if ( typeof src !== 'string' ) {\n    return src;\n  }\n  // NB: order is important here ...\n  return src\n    .replace( reArrow, '$1&#8594;' )\n    .replace( reDimsign, '$1&#215;$2' )\n    .replace( reEllipsis, '$1&#8230;' )\n    .replace( reEmdash, '$1&#8212;$2' )\n    .replace( reEndash, ' &#8211; ' )\n    .replace( reTrademark, '$1&#8482;' )\n    .replace( reRegistered, '$1&#174;' )\n    .replace( reCopyright, '$1&#169;' )\n    // double quotes\n    .replace( reDoublePrime, '$1&#8243;' )\n    .replace( reClosingDQuote, '$1&#8221;' )\n    .replace( reOpenDQuote, '&#8220;' )\n    // single quotes\n    .replace( reSinglePrime, '$1&#8242;' )\n    .replace( reApostrophe, '$1&#8217;$2' )\n    .replace( reClosingSQuote, '$1&#8217;' )\n    .replace( reOpenSQuote, '&#8216;' )\n    // fractions and degrees\n    .replace( /[\\(\\[]1\\/4[\\]\\)]/, '&#188;' )\n    .replace( /[\\(\\[]1\\/2[\\]\\)]/, '&#189;' )\n    .replace( /[\\(\\[]3\\/4[\\]\\)]/, '&#190;' )\n    .replace( /[\\(\\[]o[\\]\\)]/, '&#176;' )\n    .replace( /[\\(\\[]\\+\\/\\-[\\]\\)]/, '&#177;' );\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/textile/glyph.js\n **/","/* eslint camelcase: 0 */\n\nexports.txblocks = '(?:b[qc]|div|notextile|pre|h[1-6]|fn\\\\d+|p|###)';\n\nexports.ucaps = 'A-Z' +\n    // Latin extended À-Þ\n    '\\u00c0-\\u00d6\\u00d8-\\u00de' +\n    // Latin caps with embelishments and ligatures...\n    '\\u0100\\u0102\\u0104\\u0106\\u0108\\u010a\\u010c\\u010e\\u0110\\u0112\\u0114\\u0116\\u0118\\u011a\\u011c\\u011e\\u0120\\u0122\\u0124\\u0126\\u0128\\u012a\\u012c\\u012e\\u0130\\u0132\\u0134\\u0136\\u0139\\u013b\\u013d\\u013f' +\n    '\\u0141\\u0143\\u0145\\u0147\\u014a\\u014c\\u014e\\u0150\\u0152\\u0154\\u0156\\u0158\\u015a\\u015c\\u015e\\u0160\\u0162\\u0164\\u0166\\u0168\\u016a\\u016c\\u016e\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017b\\u017d' +\n    '\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018b\\u018e-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019c\\u019d\\u019f\\u01a0\\u01a2\\u01a4\\u01a6\\u01a7\\u01a9\\u01ac\\u01ae\\u01af\\u01b1-\\u01b3\\u01b5\\u01b7\\u01b8\\u01bc' +\n    '\\u01c4\\u01c7\\u01ca\\u01cd\\u01cf\\u01d1\\u01d3\\u01d5\\u01d7\\u01d9\\u01db\\u01de\\u01e0\\u01e2\\u01e4\\u01e6\\u01e8\\u01ea\\u01ec\\u01ee\\u01f1\\u01f4\\u01f6-\\u01f8\\u01fa\\u01fc\\u01fe' +\n    '\\u0200\\u0202\\u0204\\u0206\\u0208\\u020a\\u020c\\u020e\\u0210\\u0212\\u0214\\u0216\\u0218\\u021a\\u021c\\u021e\\u0220\\u0222\\u0224\\u0226\\u0228\\u022a\\u022c\\u022e\\u0230\\u0232\\u023a\\u023b\\u023d\\u023e' +\n    '\\u0241\\u0243-\\u0246\\u0248\\u024a\\u024c\\u024e' +\n    '\\u1e00\\u1e02\\u1e04\\u1e06\\u1e08\\u1e0a\\u1e0c\\u1e0e\\u1e10\\u1e12\\u1e14\\u1e16\\u1e18\\u1e1a\\u1e1c\\u1e1e\\u1e20\\u1e22\\u1e24\\u1e26\\u1e28\\u1e2a\\u1e2c\\u1e2e\\u1e30\\u1e32\\u1e34\\u1e36\\u1e38\\u1e3a\\u1e3c\\u1e3e\\u1e40' +\n    '\\u1e42\\u1e44\\u1e46\\u1e48\\u1e4a\\u1e4c\\u1e4e\\u1e50\\u1e52\\u1e54\\u1e56\\u1e58\\u1e5a\\u1e5c\\u1e5e\\u1e60\\u1e62\\u1e64\\u1e66\\u1e68\\u1e6a\\u1e6c\\u1e6e\\u1e70\\u1e72\\u1e74\\u1e76\\u1e78\\u1e7a\\u1e7c\\u1e7e' +\n    '\\u1e80\\u1e82\\u1e84\\u1e86\\u1e88\\u1e8a\\u1e8c\\u1e8e\\u1e90\\u1e92\\u1e94\\u1e9e\\u1ea0\\u1ea2\\u1ea4\\u1ea6\\u1ea8\\u1eaa\\u1eac\\u1eae\\u1eb0\\u1eb2\\u1eb4\\u1eb6\\u1eb8\\u1eba\\u1ebc\\u1ebe' +\n    '\\u1ec0\\u1ec2\\u1ec4\\u1ec6\\u1ec8\\u1eca\\u1ecc\\u1ece\\u1ed0\\u1ed2\\u1ed4\\u1ed6\\u1ed8\\u1eda\\u1edc\\u1ede\\u1ee0\\u1ee2\\u1ee4\\u1ee6\\u1ee8\\u1eea\\u1eec\\u1eee\\u1ef0\\u1ef2\\u1ef4\\u1ef6\\u1ef8\\u1efa\\u1efc\\u1efe' +\n    '\\u2c60\\u2c62-\\u2c64\\u2c67\\u2c69\\u2c6b\\u2c6d-\\u2c70\\u2c72\\u2c75\\u2c7e\\u2c7f' +\n    '\\ua722\\ua724\\ua726\\ua728\\ua72a\\ua72c\\ua72e\\ua732\\ua734\\ua736\\ua738\\ua73a\\ua73c\\ua73e' +\n    '\\ua740\\ua742\\ua744\\ua746\\ua748\\ua74a\\ua74c\\ua74e\\ua750\\ua752\\ua754\\ua756\\ua758\\ua75a\\ua75c\\ua75e\\ua760\\ua762\\ua764\\ua766\\ua768\\ua76a\\ua76c\\ua76e\\ua779\\ua77b\\ua77d\\ua77e' +\n    '\\ua780\\ua782\\ua784\\ua786\\ua78b\\ua78d\\ua790\\ua792\\ua7a0\\ua7a2\\ua7a4\\ua7a6\\ua7a8\\ua7aa';\n\nexports.txcite = ':((?:[^\\\\s()]|\\\\([^\\\\s()]+\\\\)|[()])+?)(?=[!-\\\\.:-@\\\\[\\\\\\\\\\\\]-`{-~]+(?:$|\\\\s)|$|\\\\s)';\n\nconst attr_class = exports.attr_class = '\\\\([^\\\\)]+\\\\)';\nconst attr_style = exports.attr_style = '\\\\{[^\\\\}]+\\\\}';\nconst attr_lang = exports.attr_lang = '\\\\[[^\\\\[\\\\]]+\\\\]';\nconst attr_align = exports.attr_align = '(?:<>|<|>|=)';\nconst attr_pad = exports.attr_pad = '[\\\\(\\\\)]+';\n\nconst txattr = exports.txattr = `(?:${ attr_class }|${ attr_style }|${ attr_lang }|${ attr_align }|${ attr_pad })*`;\n\nexports.txlisthd = `[\\\\t ]*[\\\\#\\\\*]*(\\\\*|\\\\#(?:_|\\\\d+)?)${ txattr }(?: +\\\\S|\\\\.\\\\s*(?=\\\\S|\\\\n))`;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/textile/re_ext.js\n **/","/* textile list parser */\nconst ribbon = require( '../ribbon' );\nconst re = require( '../re' );\nconst merge = require( '../merge' );\n\nconst { parseAttr } = require( './attr' );\nconst { parsePhrase } = require( './phrase' );\n\nconst { txlisthd } = require( './re_ext' );\nre.pattern.txlisthd = txlisthd;\nconst reList = re.compile( /^((?:[:txlisthd:][^\\0]*?(?:\\r?\\n|$))+)(\\s*\\n|$)/, 's' );\nconst reItem = re.compile( /^([#\\*]+)([^\\0]+?)(\\n(?=[:txlisthd:])|$)/, 's' );\n\nfunction listPad ( n ) {\n  let s = '\\n';\n  while ( n-- ) {\n    s += '\\t';\n  }\n  return s;\n}\n\nfunction testList ( src ) {\n  return reList.exec( src );\n}\n\nfunction parseList ( src, options ) {\n  src = ribbon( src.replace( /(^|\\r?\\n)[\\t ]+/, '$1' ) );\n\n  const stack = [];\n  const currIndex = {};\n  const lastIndex = options._lst || {};\n  let itemIndex = 0;\n  let listAttr;\n  let m;\n  let n;\n  let s;\n\n  while ( ( m = reItem.exec( src ) ) ) {\n    const item = [ 'li' ];\n    const destLevel = m[1].length;\n    const type = ( m[1].substr( -1 ) === '#' ) ? 'ol' : 'ul';\n    let newLi = null;\n    let lst;\n    let par;\n    let pba;\n    let r;\n\n    // list starts and continuations\n    if ( ( n = /^(_|\\d+)/.exec( m[2] ) ) ) {\n      itemIndex = isFinite( n[1] )\n            ? parseInt( n[1], 10 )\n            : lastIndex[ destLevel ] || currIndex[ destLevel ] || 1;\n      m[2] = m[2].slice( n[1].length );\n    }\n\n    if ( ( pba = parseAttr( m[2], 'li' ) ) ) {\n      m[2] = m[2].slice( pba[0] );\n      pba = pba[1];\n    }\n\n    // list control\n    if ( /^\\.\\s*$/.test( m[2] ) ) {\n      listAttr = pba || {};\n      src.advance( m[0] );\n      continue;\n    }\n\n    // create nesting until we have correct level\n    while ( stack.length < destLevel ) {\n      // list always has an attribute object, this simplifies first-pba resolution\n      lst = [ type, {}, listPad( stack.length + 1 ), ( newLi = [ 'li' ] ) ];\n      par = stack[ stack.length - 1 ];\n      if ( par ) {\n        par.li.push( listPad( stack.length ) );\n        par.li.push( lst );\n      }\n      stack.push({\n        ul: lst,\n        li: newLi,\n        // count attributes's found per list\n        att: 0\n      });\n      currIndex[ stack.length ] = 1;\n    }\n\n    // remove nesting until we have correct level\n    while ( stack.length > destLevel ) {\n      r = stack.pop();\n      r.ul.push( listPad( stack.length ) );\n      // lists have a predictable structure - move pba from listitem to list\n      if ( r.att === 1 && !r.ul[3][1].substr ) {\n        merge( r.ul[1], r.ul[3].splice( 1, 1 )[ 0 ] );\n      }\n    }\n\n    // parent list\n    par = stack[ stack.length - 1 ];\n\n    if ( itemIndex ) {\n      par.ul[1].start = itemIndex;\n      currIndex[destLevel] = itemIndex;\n      // falsy prevents this from fireing until it is set again\n      itemIndex = 0;\n    }\n    if ( listAttr ) {\n      // \"more than 1\" prevent attribute transfers on list close\n      par.att = 9;\n      merge( par.ul[1], listAttr );\n      listAttr = null;\n    }\n\n    if ( !newLi ) {\n      par.ul.push( listPad( stack.length ), item );\n      par.li = item;\n    }\n    if ( pba ) {\n      par.li.push( pba );\n      par.att++;\n    }\n    Array.prototype.push.apply( par.li, parsePhrase( m[2].trim(), options ) );\n\n    src.advance( m[0] );\n    currIndex[destLevel] = ( currIndex[destLevel] || 0 ) + 1;\n  }\n\n  // remember indexes for continuations next time\n  options._lst = currIndex;\n\n  while ( stack.length ) {\n    s = stack.pop();\n    s.ul.push( listPad( stack.length ) );\n    // lists have a predictable structure - move pba from listitem to list\n    if ( s.att === 1 && !s.ul[3][1].substr ) {\n      merge( s.ul[1], s.ul[3].splice( 1, 1 )[0] );\n    }\n  }\n\n  return s.ul;\n}\n\nmodule.exports = {\n  testList: testList,\n  parseList: parseList\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/textile/list.js\n **/","/* definitions list parser */\n\nconst ribbon = require( '../ribbon' );\n\nconst reDeflist = /^((?:- (?:[^\\n]\\n?)+?)+:=(?: *\\n[^\\0]+?=:(?:\\n|$)|(?:[^\\0]+?(?:$|\\n(?=\\n|- )))))+/;\nconst reItem = /^((?:- (?:[^\\n]\\n?)+?)+):=( *\\n[^\\0]+?=:\\s*(?:\\n|$)|(?:[^\\0]+?(?:$|\\n(?=\\n|- ))))/;\n\nfunction testDefList ( src ) {\n  return reDeflist.exec( src );\n}\n\nfunction parseDefList ( src, options ) {\n  src = ribbon( src.trim() );\n\n  // late loading to get around the lack of non-circular-dependency support in RequireJS\n  const parsePhrase = require( './phrase' ).parsePhrase;\n  const parseFlow = require( './flow' ).parseFlow;\n\n  const deflist = [ 'dl', '\\n' ];\n  let terms;\n  let def;\n  let m;\n\n  while ( ( m = reItem.exec( src ) ) ) {\n    // add terms\n    terms = m[1].split( /(?:^|\\n)\\- / ).slice( 1 );\n    while ( terms.length ) {\n      deflist.push( '\\t'\n                , [ 'dt' ].concat( parsePhrase( terms.shift().trim(), options ) )\n                , '\\n'\n                );\n    }\n    // add definitions\n    def = m[2].trim();\n    deflist.push( '\\t'\n              , [ 'dd' ].concat(\n                  ( /=:$/.test( def ) )\n                    ? parseFlow( def.slice( 0, -2 ).trim(), options )\n                    : parsePhrase( def, options )\n                )\n              , '\\n'\n              );\n    src.advance( m[0] );\n  }\n  return deflist;\n}\n\nexports.testDefList = testDefList;\nexports.parseDefList = parseDefList;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/textile/deflist.js\n **/","/* textile table parser */\n\nconst re = require( '../re' );\nconst merge = require( '../merge' );\nconst ribbon = require( '../ribbon' );\n\nconst { parseAttr } = require( './attr' );\nconst { parsePhrase } = require( './phrase' );\nconst { reIndent } = require( '../jsonml' );\n\nconst { txattr } = require( './re_ext' );\nre.pattern.txattr = txattr;\n\nconst reTable = re.compile( /^((?:table[:txattr:]\\.(?:\\s(.+?))\\s*\\n)?(?:(?:[:txattr:]\\.[^\\n\\S]*)?\\|.*?\\|[^\\n\\S]*(?:\\n|$))+)([^\\n\\S]*\\n)?/, 's' );\nconst reHead = /^table(_?)([^\\n]*?)\\.(?:[ \\t](.+?))?\\s*\\n/;\nconst reRow = re.compile( /^(?:\\|([~\\^\\-][:txattr:])\\.\\s*\\n)?([:txattr:]\\.[^\\n\\S]*)?\\|(.*?)\\|[^\\n\\S]*(\\n|$)/, 's' );\nconst reCaption = /^\\|=([^\\n+]*)\\n/;\nconst reColgroup = /^\\|:([^\\n+]*)\\|[\\r\\t ]*\\n/;\nconst reRowgroup = /^\\|([\\^\\-~])([^\\n+]*)\\.[ \\t\\r]*\\n/;\n\nconst charToTag = {\n  '^': 'thead',\n  '~': 'tfoot',\n  '-': 'tbody'\n};\n\nfunction parseColgroup ( src ) {\n  const colgroup = [ 'colgroup', {} ];\n  src.split( '|' )\n      .forEach( function ( s, isCol ) {\n        const col = ( isCol ) ? {} : colgroup[ 1 ];\n        let d = s.trim();\n        let m;\n        if ( d ) {\n          if ( ( m = /^\\\\(\\d+)/.exec( d ) ) ) {\n            col.span = +m[ 1 ];\n            d = d.slice( m[ 0 ].length );\n          }\n          if ( ( m = parseAttr( d, 'col' ) ) ) {\n            merge( col, m[ 1 ] );\n            d = d.slice( m[ 0 ] );\n          }\n          if ( ( m = /\\b\\d+\\b/.exec( d ) ) ) {\n            col.width = +m[0];\n          }\n        }\n        if ( isCol ) {\n          colgroup.push( '\\n\\t\\t', [ 'col', col ] );\n        }\n      });\n  return colgroup.concat( [ '\\n\\t' ] );\n}\n\nfunction testTable ( src ) {\n  return reTable.exec( src );\n}\n\nfunction parseTable ( src, options ) {\n  src = ribbon( src.trim() );\n\n  const rowgroups = [];\n  let colgroup;\n  let caption;\n  const tAttr = {};\n  let tCurr;\n  let row;\n  let inner;\n  let pba;\n  let more;\n  let m;\n  let extended = 0;\n\n  const setRowGroup = function ( type, pba ) {\n    tCurr = [ type, pba || {} ];\n    rowgroups.push( tCurr );\n  };\n\n  if ( ( m = reHead.exec( src ) ) ) {\n    // parse and apply table attr\n    src.advance( m[0] );\n    pba = parseAttr( m[2], 'table' );\n    if ( pba ) {\n      merge( tAttr, pba[1] );\n    }\n    if ( m[3] ) {\n      tAttr.summary = m[3];\n    }\n  }\n\n  // caption\n  if ( ( m = reCaption.exec( src ) ) ) {\n    caption = [ 'caption' ];\n    if ( ( pba = parseAttr( m[1], 'caption' ) ) ) {\n      caption.push( pba[1] );\n      m[1] = m[1].slice( pba[0] );\n    }\n    if ( /\\./.test( m[1] ) ) { // mandatory \".\"\n      caption.push( m[1].slice( 1 ).replace( /\\|\\s*$/, '' ).trim() );\n      extended++;\n      src.advance( m[0] );\n    }\n    else {\n      caption = null;\n    }\n  }\n\n  do {\n    // colgroup\n    if ( ( m = reColgroup.exec( src ) ) ) {\n      colgroup = parseColgroup( m[1] );\n      extended++;\n    }\n    // \"rowgroup\" (tbody, thead, tfoot)\n    else if ( ( m = reRowgroup.exec( src ) ) ) {\n      // PHP allows any amount of these in any order\n      // and simply translates them straight through\n      // the same is done here.\n      const tag = charToTag[ m[1] ] || 'tbody';\n      pba = parseAttr( `${ m[2] } `, tag );\n      setRowGroup( tag, pba && pba[1] );\n      extended++;\n    }\n    // row\n    else if ( ( m = reRow.exec( src ) ) ) {\n      if ( !tCurr ) { setRowGroup( 'tbody' ); }\n\n      row = [ 'tr' ];\n\n      if ( m[2] && ( pba = parseAttr( m[2], 'tr' ) ) ) {\n        // FIXME: requires \"\\.\\s?\" -- else what ?\n        row.push( pba[1] );\n      }\n\n      tCurr.push( '\\n\\t\\t', row );\n      inner = ribbon( m[3] );\n\n      do {\n        inner.save();\n\n        // cell loop\n        const th = inner.startsWith( '_' );\n        let cell = [ th ? 'th' : 'td' ];\n        if ( th ) {\n          inner.advance( 1 );\n        }\n\n        pba = parseAttr( inner, 'td' );\n        if ( pba ) {\n          inner.advance( pba[0] );\n          cell.push( pba[1] ); // FIXME: don't do this if next text fails\n        }\n\n        if ( pba || th ) {\n          const p = /^\\.\\s*/.exec( inner );\n          if ( p ) {\n            inner.advance( p[0] );\n          }\n          else {\n            cell = [ 'td' ];\n            inner.load();\n          }\n        }\n\n        const mx = /^(==.*?==|[^\\|])*/.exec( inner );\n        cell = cell.concat( parsePhrase( mx[0], options ) );\n        row.push( '\\n\\t\\t\\t', cell );\n        more = inner.valueOf().charAt( mx[0].length ) === '|';\n        inner.advance( mx[0].length + 1 );\n      }\n      while ( more );\n\n      row.push( '\\n\\t\\t' );\n    }\n    //\n    if ( m ) {\n      src.advance( m[0] );\n    }\n  }\n  while ( m );\n\n  // assemble table\n  let table = [ 'table', tAttr ];\n  if ( extended ) {\n    if ( caption ) {\n      table.push( '\\n\\t', caption );\n    }\n    if ( colgroup ) {\n      table.push( '\\n\\t', colgroup );\n    }\n    rowgroups.forEach( function ( tbody ) {\n      table.push( '\\n\\t', tbody.concat( [ '\\n\\t' ] ) );\n    });\n  }\n  else {\n    table = table.concat( reIndent( rowgroups[0].slice( 2 ), -1 ) );\n  }\n\n  table.push( '\\n' );\n  return table;\n}\n\nmodule.exports = {\n  parseColgroup: parseColgroup,\n  parseTable: parseTable,\n  testTable: testTable\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/textile/table.js\n **/"],"sourceRoot":""}