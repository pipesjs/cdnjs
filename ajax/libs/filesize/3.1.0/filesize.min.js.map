{"version":3,"file":"filesize.min.js","sources":["filesize.js"],"names":["global","bit","filesize","arg","descriptor","result","skip","val","e","undefined","base","bits","ceil","neg","num","output","round","unix","spacer","suffixes","isNaN","Error","exponent","Number","Math","floor","log","pow","toFixed","si","test","toLowerCase","charAt","value","suffix","join","bytes","exports","module","define","this"],"mappings":";;;;AAAA,cAYA,SAAWA,GACT,GAAIC,GAAM,KAUNC,EAAW,SAAUC,EAAKC,GAC5B,GAAIC,MACAC,GAAO,EACPC,EAAM,EACNC,EAAIC,OACJC,EAAOD,OACPE,EAAOF,OACPG,EAAOH,OACPI,EAAMJ,OACNK,EAAML,OACNM,EAASN,OACTO,EAAQP,OACRQ,EAAOR,OACPS,EAAST,OACTU,EAAWV,MAEf,IAAIW,MAAMjB,GACR,KAAM,IAAIkB,OAAM,oBAqFlB,OAlFAjB,GAAaA,MACbO,EAAOP,EAAWO,QAAS,EAC3BM,EAAOb,EAAWa,QAAS,EAC3BP,EAA2BD,SAApBL,EAAWM,KAAqBN,EAAWM,KAAO,EACzDM,EAA6BP,SAArBL,EAAWY,MAAsBZ,EAAWY,MAAQC,EAAO,EAAI,EACvEC,EAA+BT,SAAtBL,EAAWc,OAAuBd,EAAWc,OAASD,EAAO,GAAK,IAC3EE,EAAmCV,SAAxBL,EAAWe,SAAyBf,EAAWe,YAC1DJ,EAA+BN,SAAtBL,EAAWW,OAAuBX,EAAWW,OAAS,SAC/DP,EAA4BC,SAAxBL,EAAWkB,SAAyBlB,EAAWkB,SAAW,GAC9DR,EAAMS,OAAOpB,GACbU,EAAY,EAANC,EACNF,EAAOF,EAAO,EAAI,IAAO,KAGrBG,IACFC,GAAOA,GAIG,IAARA,GACFT,EAAO,GAAK,EAGVA,EAAO,GADLY,EACU,GAEA,OAIJ,KAANT,GAAYY,MAAMZ,MACpBA,EAAIgB,KAAKC,MAAMD,KAAKE,IAAIZ,GAAOU,KAAKE,IAAId,KAItCJ,EAAI,IACND,EAAa,IAAPA,GAAeC,EAAI,GACzBA,EAAI,GAIJD,EADW,IAATG,EACII,EAAMU,KAAKG,IAAI,EAAO,GAAJnB,GAElBM,EAAMU,KAAKG,IAAI,IAAMnB,GAGzBG,IACFJ,EAAY,EAANA,EAEFA,EAAMK,IACRL,GAAYK,EACZJ,MAIJH,EAAO,GAAKkB,OAAOhB,EAAIqB,QAAQpB,EAAI,EAAIQ,EAAQ,IAC/CX,EAAO,GAAKwB,EAAGlB,EAAO,OAAS,SAASH,IAEnCF,GAAQW,IACPN,GAAQV,EAAI6B,KAAKzB,EAAO,MAC1BA,EAAO,GAAKA,EAAO,GAAG0B,eAGxB1B,EAAO,GAAKA,EAAO,GAAG2B,OAAO,GAEX,MAAd3B,EAAO,IACTA,EAAO,GAAKmB,KAAKC,MAAMpB,EAAO,IAC9BA,EAAO,GAAK,IACFM,GAAsB,MAAdN,EAAO,KACzBA,EAAO,GAAK,OAMdQ,IACFR,EAAO,IAAMA,EAAO,IAItBA,EAAO,GAAKc,EAASd,EAAO,KAAOA,EAAO,GAG3B,UAAXU,EACKV,EACa,aAAXU,EACFP,EACa,WAAXO,GACAkB,MAAO5B,EAAO,GAAI6B,OAAQ7B,EAAO,IAEnCA,EAAO8B,KAAKjB,IASnBW,GACFlB,MAAO,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACtDyB,OAAQ,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAIlC,oBAAZC,SACTC,OAAOD,QAAUnC,EACU,kBAAXqC,QAChBA,OAAO,WACL,MAAOrC,KAGTF,EAAOE,SAAWA,GAEnBsC","sourcesContent":["\"use strict\";\n\n/**\n * filesize\n *\n * @author Jason Mulligan <jason.mulligan@avoidwork.com>\n * @copyright 2015 Jason Mulligan\n * @license BSD-3 <https://raw.github.com/avoidwork/filesize.js/master/LICENSE>\n * @link http://filesizejs.com\n * @module filesize\n * @version 3.1.0\n */\n(function (global) {\n  var bit = /b$/;\n\n  /**\n   * filesize\n   *\n   * @method filesize\n   * @param  {Mixed}   arg        String, Int or Float to transform\n   * @param  {Object}  descriptor [Optional] Flags\n   * @return {String}             Readable file size String\n   */\n  var filesize = function (arg, descriptor) {\n    var result = [],\n        skip = false,\n        val = 0,\n        e = undefined,\n        base = undefined,\n        bits = undefined,\n        ceil = undefined,\n        neg = undefined,\n        num = undefined,\n        output = undefined,\n        round = undefined,\n        unix = undefined,\n        spacer = undefined,\n        suffixes = undefined;\n\n    if (isNaN(arg)) {\n      throw new Error(\"Invalid arguments\");\n    }\n\n    descriptor = descriptor || {};\n    bits = descriptor.bits === true;\n    unix = descriptor.unix === true;\n    base = descriptor.base !== undefined ? descriptor.base : 2;\n    round = descriptor.round !== undefined ? descriptor.round : unix ? 1 : 2;\n    spacer = descriptor.spacer !== undefined ? descriptor.spacer : unix ? \"\" : \" \";\n    suffixes = descriptor.suffixes !== undefined ? descriptor.suffixes : {};\n    output = descriptor.output !== undefined ? descriptor.output : \"string\";\n    e = descriptor.exponent !== undefined ? descriptor.exponent : -1;\n    num = Number(arg);\n    neg = num < 0;\n    ceil = base > 2 ? 1000 : 1024;\n\n    // Flipping a negative number to determine the size\n    if (neg) {\n      num = -num;\n    }\n\n    // Zero is now a special case because bytes divide by 1\n    if (num === 0) {\n      result[0] = 0;\n\n      if (unix) {\n        result[1] = \"\";\n      } else {\n        result[1] = \"B\";\n      }\n    } else {\n      // Determining the exponent\n      if (e === -1 || isNaN(e)) {\n        e = Math.floor(Math.log(num) / Math.log(ceil));\n      }\n\n      // Exceeding supported length, time to reduce & multiply\n      if (e > 8) {\n        val = val * (1000 * (e - 8));\n        e = 8;\n      }\n\n      if (base === 2) {\n        val = num / Math.pow(2, e * 10);\n      } else {\n        val = num / Math.pow(1000, e);\n      }\n\n      if (bits) {\n        val = val * 8;\n\n        if (val > ceil) {\n          val = val / ceil;\n          e++;\n        }\n      }\n\n      result[0] = Number(val.toFixed(e > 0 ? round : 0));\n      result[1] = si[bits ? \"bits\" : \"bytes\"][e];\n\n      if (!skip && unix) {\n        if (bits && bit.test(result[1])) {\n          result[1] = result[1].toLowerCase();\n        }\n\n        result[1] = result[1].charAt(0);\n\n        if (result[1] === \"B\") {\n          result[0] = Math.floor(result[0]);\n          result[1] = \"\";\n        } else if (!bits && result[1] === \"k\") {\n          result[1] = \"K\";\n        }\n      }\n    }\n\n    // Decorating a 'diff'\n    if (neg) {\n      result[0] = -result[0];\n    }\n\n    // Applying custom suffix\n    result[1] = suffixes[result[1]] || result[1];\n\n    // Returning Array, Object, or String (default)\n    if (output === \"array\") {\n      return result;\n    } else if (output === \"exponent\") {\n      return e;\n    } else if (output === \"object\") {\n      return { value: result[0], suffix: result[1] };\n    } else {\n      return result.join(spacer);\n    }\n  };\n\n  /**\n   * SI suffixes\n   *\n   * @type {Object}\n   */\n  var si = {\n    bits: [\"B\", \"kb\", \"Mb\", \"Gb\", \"Tb\", \"Pb\", \"Eb\", \"Zb\", \"Yb\"],\n    bytes: [\"B\", \"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n  };\n\n  // CommonJS, AMD, script tag\n  if (typeof exports !== \"undefined\") {\n    module.exports = filesize;\n  } else if (typeof define === \"function\") {\n    define(function () {\n      return filesize;\n    });\n  } else {\n    global.filesize = filesize;\n  }\n})(this);"]}