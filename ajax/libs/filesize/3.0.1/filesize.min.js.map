{"version":3,"file":"filesize.min.js","sources":["filesize.js"],"names":["global","filesize","arg","descriptor","e","base","bits","ceil","neg","num","output","round","unix","spacer","suffixes","result","skip","val","isNaN","Error","undefined","exponent","Number","Math","floor","log","pow","toFixed","si","bit","test","toLowerCase","charAt","value","suffix","join","bytes","exports","module","define","this"],"mappings":";;;;CAUA,SAAaA,GACb,YAYA,SAASC,GAAWC,EAAKC,GACxB,GAGCC,GAAGC,EAAMC,EAAMC,EAAMC,EAAKC,EAAKC,EAAQC,EAAOC,EAAMC,EAAQC,EAHzDC,KACHC,GAAO,EACPC,EAAM,CAGP,IAAKC,MAAOhB,GACX,KAAM,IAAIiB,OAAO,oBAyFlB,OAtFAhB,GAAaA,MACbG,EAASH,EAAWG,QAAS,EAC7BM,EAAST,EAAWS,QAAS,EAC7BP,EAA2Be,SAApBjB,EAAWE,KAAqBF,EAAWE,KAAO,EACzDM,EAA6BS,SAArBjB,EAAWQ,MAAsBR,EAAWQ,MAAQC,EAAO,EAAI,EACvEC,EAA+BO,SAAtBjB,EAAWU,OAAuBV,EAAWU,OAASD,EAAO,GAAK,IAC3EE,EAAmCM,SAAxBjB,EAAWW,SAAyBX,EAAWW,YAC1DJ,EAA+BU,SAAtBjB,EAAWO,OAAuBP,EAAWO,OAAS,SAC/DN,EAA4BgB,SAAxBjB,EAAWkB,SAAyBlB,EAAWkB,SAAW,GAC9DZ,EAAMa,OAAQpB,GACdM,EAAc,EAANC,EACRF,EAAOF,EAAO,EAAI,IAAO,KAGpBG,IACJC,GAAOA,GAIK,IAARA,GACJM,EAAQ,GAAM,EAGbA,EAAQ,GADJH,EACU,GAGA,OAKJ,KAANR,GAAYc,MAAOd,MACvBA,EAAImB,KAAKC,MAAOD,KAAKE,IAAKhB,GAAQc,KAAKE,IAAK,OAIxCrB,EAAI,IACRa,EAAc,IAARA,GAAiBb,EAAI,GAC3BA,EAAI,GAIJa,EADa,IAATZ,EACEI,EAAMc,KAAKG,IAAK,EAAS,GAAJtB,GAGrBK,EAAMc,KAAKG,IAAK,IAAMtB,GAGxBE,IACJW,EAAc,EAANA,EAEHA,EAAMV,IACVU,GAAYV,EACZH,MAIFW,EAAQ,GAAMO,OAAQL,EAAIU,QAASvB,EAAI,EAAIO,EAAQ,IACnDI,EAAQ,GAAMa,EAAItB,EAAO,OAAS,SAAWF,IAEvCY,GAAQJ,IACRN,GAAQuB,EAAIC,KAAMf,EAAQ,MAC9BA,EAAQ,GAAMA,EAAQ,GAAIgB,eAG3BhB,EAAQ,GAAMA,EAAQ,GAAIiB,OAAQ,GAEb,MAAhBjB,EAAQ,IACZA,EAAQ,GAAMQ,KAAKC,MAAOT,EAAQ,IAClCA,EAAQ,GAAM,IAEJT,GAAwB,MAAhBS,EAAQ,KAC1BA,EAAQ,GAAM,OAMZP,IACJO,EAAQ,IAAOA,EAAQ,IAIxBA,EAAQ,GAAMD,EAAUC,EAAQ,KAASA,EAAQ,GAGjC,UAAXL,EACGK,EAEa,WAAXL,GACAuB,MAAOlB,EAAQ,GAAKmB,OAAQnB,EAAQ,IAGtCA,EAAOoB,KAAMtB,GAjHtB,GAAIgB,GAAM,KA0HND,GACHtB,MAAQ,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACvD8B,OAAS,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAIjC,oBAAZC,SACXC,OAAOD,QAAUpC,EAEU,kBAAXsC,QAChBA,OAAQ,WACP,MAAOtC,KAIRD,EAAOC,SAAWA,GAEduC","sourcesContent":["/**\n * filesize\n *\n * @author Jason Mulligan <jason.mulligan@avoidwork.com>\n * @copyright 2015 Jason Mulligan\n * @license BSD-3 <https://raw.github.com/avoidwork/filesize.js/master/LICENSE>\n * @link http://filesizejs.com\n * @module filesize\n * @version 3.0.1\n */\n( function ( global ) {\n\"use strict\";\n\nvar bit = /b$/;\n\n/**\n * filesize\n *\n * @method filesize\n * @param  {Mixed}   arg        String, Int or Float to transform\n * @param  {Object}  descriptor [Optional] Flags\n * @return {String}             Readable file size String\n */\nfunction filesize ( arg, descriptor ) {\n\tvar result = [],\n\t\tskip = false,\n\t\tval = 0,\n\t\te, base, bits, ceil, neg, num, output, round, unix, spacer, suffixes;\n\n\tif ( isNaN( arg ) ) {\n\t\tthrow new Error( \"Invalid arguments\" );\n\t}\n\n\tdescriptor = descriptor || {};\n\tbits = ( descriptor.bits === true );\n\tunix = ( descriptor.unix === true );\n\tbase = descriptor.base !== undefined ? descriptor.base : 2;\n\tround = descriptor.round !== undefined ? descriptor.round : unix ? 1 : 2;\n\tspacer = descriptor.spacer !== undefined ? descriptor.spacer : unix ? \"\" : \" \";\n\tsuffixes = descriptor.suffixes !== undefined ? descriptor.suffixes : {};\n\toutput = descriptor.output !== undefined ? descriptor.output : \"string\";\n\te = descriptor.exponent !== undefined ? descriptor.exponent : -1;\n\tnum = Number( arg );\n\tneg = ( num < 0 );\n\tceil = base > 2 ? 1000 : 1024;\n\n\t// Flipping a negative number to determine the size\n\tif ( neg ) {\n\t\tnum = -num;\n\t}\n\n\t// Zero is now a special case because bytes divide by 1\n\tif ( num === 0 ) {\n\t\tresult[ 0 ] = 0;\n\n\t\tif ( unix ) {\n\t\t\tresult[ 1 ] = \"\";\n\t\t}\n\t\telse {\n\t\t\tresult[ 1 ] = \"B\";\n\t\t}\n\t}\n\telse {\n\t\t// Determining the exponent\n\t\tif ( e === -1 || isNaN( e ) ) {\n\t\t\te = Math.floor( Math.log( num ) / Math.log( 1000 ) );\n\t\t}\n\n\t\t// Exceeding supported length, time to reduce & multiply\n\t\tif ( e > 8 ) {\n\t\t\tval = val * ( 1000 * ( e - 8 ) );\n\t\t\te = 8;\n\t\t}\n\n\t\tif ( base === 2 ) {\n\t\t\tval = num / Math.pow( 2, ( e * 10 ) );\n\t\t}\n\t\telse {\n\t\t\tval = num / Math.pow( 1000, e );\n\t\t}\n\n\t\tif ( bits ) {\n\t\t\tval = ( val * 8 );\n\n\t\t\tif ( val > ceil ) {\n\t\t\t\tval = val / ceil;\n\t\t\t\te++;\n\t\t\t}\n\t\t}\n\n\t\tresult[ 0 ] = Number( val.toFixed( e > 0 ? round : 0 ) );\n\t\tresult[ 1 ] = si[ bits ? \"bits\" : \"bytes\" ][ e ];\n\n\t\tif ( !skip && unix ) {\n\t\t\tif ( bits && bit.test( result[ 1 ] ) ) {\n\t\t\t\tresult[ 1 ] = result[ 1 ].toLowerCase();\n\t\t\t}\n\n\t\t\tresult[ 1 ] = result[ 1 ].charAt( 0 );\n\n\t\t\tif ( result[ 1 ] === \"B\" ) {\n\t\t\t\tresult[ 0 ] = Math.floor( result[ 0 ] );\n\t\t\t\tresult[ 1 ] = \"\";\n\t\t\t}\n\t\t\telse if ( !bits && result[ 1 ] === \"k\" ) {\n\t\t\t\tresult[ 1 ] = \"K\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Decorating a 'diff'\n\tif ( neg ) {\n\t\tresult[ 0 ] = -result[ 0 ];\n\t}\n\n\t// Applying custom suffix\n\tresult[ 1 ] = suffixes[ result[ 1 ] ] || result[ 1 ];\n\n\t// Returning Array, Object, or String (default)\n\tif ( output === \"array\" ) {\n\t\treturn result;\n\t}\n\telse if ( output === \"object\" ) {\n\t\treturn { value: result[ 0 ], suffix: result[ 1 ] };\n\t}\n\telse {\n\t\treturn result.join( spacer );\n\t}\n}\n\n/**\n * SI suffixes\n *\n * @type {Object}\n */\nvar si = {\n\tbits: [ \"B\", \"kb\", \"Mb\", \"Gb\", \"Tb\", \"Pb\", \"Eb\", \"Zb\", \"Yb\" ],\n\tbytes: [ \"B\", \"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\" ]\n};\n\n// CommonJS, AMD, script tag\nif ( typeof exports !== \"undefined\" ) {\n\tmodule.exports = filesize;\n}\nelse if ( typeof define === \"function\" ) {\n\tdefine( function () {\n\t\treturn filesize;\n\t} );\n}\nelse {\n\tglobal.filesize = filesize;\n}\n} )( this );\n"]}