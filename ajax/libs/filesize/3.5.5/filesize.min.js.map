{"version":3,"sources":["filesize.js"],"names":["global","filesize","arg","descriptor","arguments","length","undefined","result","val","e","base","bits","ceil","full","fullforms","neg","num","output","round","unix","spacer","standard","symbols","isNaN","Error","suffixes","fullform","Array","exponent","Number","Math","floor","log","pow","toFixed","symbol","charAt","replace","b","test","value","suffix","join","iec","bytes","jedec","partial","opt","exports","module","define","amd","window"],"mappings":"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","file":"filesize.min.js","sourcesContent":["\"use strict\";\n\n/**\r\n * filesize\r\n *\r\n * @copyright 2017 Jason Mulligan <jason.mulligan@avoidwork.com>\r\n * @license BSD-3-Clause\r\n * @version 3.5.4\r\n */\n(function (global) {\n\tvar b = /^(b|B)$/,\n\t    symbol = {\n\t\tiec: {\n\t\t\tbits: [\"b\", \"Kib\", \"Mib\", \"Gib\", \"Tib\", \"Pib\", \"Eib\", \"Zib\", \"Yib\"],\n\t\t\tbytes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"]\n\t\t},\n\t\tjedec: {\n\t\t\tbits: [\"b\", \"Kb\", \"Mb\", \"Gb\", \"Tb\", \"Pb\", \"Eb\", \"Zb\", \"Yb\"],\n\t\t\tbytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n\t\t}\n\t},\n\t    fullform = {\n\t\tiec: [\"\", \"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\n\t\tjedec: [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]\n\t};\n\n\t/**\r\n  * filesize\r\n  *\r\n  * @method filesize\r\n  * @param  {Mixed}   arg        String, Int or Float to transform\r\n  * @param  {Object}  descriptor [Optional] Flags\r\n  * @return {String}             Readable file size String\r\n  */\n\tfunction filesize(arg) {\n\t\tvar descriptor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tvar result = [],\n\t\t    val = 0,\n\t\t    e = void 0,\n\t\t    base = void 0,\n\t\t    bits = void 0,\n\t\t    ceil = void 0,\n\t\t    full = void 0,\n\t\t    fullforms = void 0,\n\t\t    neg = void 0,\n\t\t    num = void 0,\n\t\t    output = void 0,\n\t\t    round = void 0,\n\t\t    unix = void 0,\n\t\t    spacer = void 0,\n\t\t    standard = void 0,\n\t\t    symbols = void 0;\n\n\t\tif (isNaN(arg)) {\n\t\t\tthrow new Error(\"Invalid arguments\");\n\t\t}\n\n\t\tbits = descriptor.bits === true;\n\t\tunix = descriptor.unix === true;\n\t\tbase = descriptor.base || 2;\n\t\tround = descriptor.round !== undefined ? descriptor.round : unix ? 1 : 2;\n\t\tspacer = descriptor.spacer !== undefined ? descriptor.spacer : unix ? \"\" : \" \";\n\t\tsymbols = descriptor.symbols || descriptor.suffixes || {};\n\t\tstandard = base === 2 ? descriptor.standard || \"jedec\" : \"jedec\";\n\t\toutput = descriptor.output || \"string\";\n\t\tfull = descriptor.fullform === true;\n\t\tfullforms = descriptor.fullforms instanceof Array ? descriptor.fullforms : [];\n\t\te = descriptor.exponent !== undefined ? descriptor.exponent : -1;\n\t\tnum = Number(arg);\n\t\tneg = num < 0;\n\t\tceil = base > 2 ? 1000 : 1024;\n\n\t\t// Flipping a negative number to determine the size\n\t\tif (neg) {\n\t\t\tnum = -num;\n\t\t}\n\n\t\t// Zero is now a special case because bytes divide by 1\n\t\tif (num === 0) {\n\t\t\te = 0;\n\t\t\tresult[0] = 0;\n\t\t\tresult[1] = unix ? \"\" : !bits ? \"B\" : \"b\";\n\t\t} else {\n\t\t\t// Determining the exponent\n\t\t\tif (e === -1 || isNaN(e)) {\n\t\t\t\te = Math.floor(Math.log(num) / Math.log(ceil));\n\n\t\t\t\tif (e < 0) {\n\t\t\t\t\te = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Exceeding supported length, time to reduce & multiply\n\t\t\tif (e > 8) {\n\t\t\t\te = 8;\n\t\t\t}\n\n\t\t\tval = num / (base === 2 ? Math.pow(2, e * 10) : Math.pow(1000, e));\n\n\t\t\tif (bits) {\n\t\t\t\tval = val * 8;\n\n\t\t\t\tif (val >= ceil && e < 8) {\n\t\t\t\t\tval = val / ceil;\n\t\t\t\t\te++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult[0] = Number(val.toFixed(e > 0 ? round : 0));\n\t\t\tresult[1] = base === 10 && e === 1 ? bits ? \"kb\" : \"kB\" : symbol[standard][bits ? \"bits\" : \"bytes\"][e];\n\n\t\t\tif (unix) {\n\t\t\t\tresult[1] = standard === \"jedec\" ? result[1].charAt(0) : e > 0 ? result[1].replace(/B$/, \"\") : result[1];\n\n\t\t\t\tif (b.test(result[1])) {\n\t\t\t\t\tresult[0] = Math.floor(result[0]);\n\t\t\t\t\tresult[1] = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Decorating a 'diff'\n\t\tif (neg) {\n\t\t\tresult[0] = -result[0];\n\t\t}\n\n\t\t// Applying custom symbol\n\t\tresult[1] = symbols[result[1]] || result[1];\n\n\t\t// Returning Array, Object, or String (default)\n\t\tif (output === \"array\") {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (output === \"exponent\") {\n\t\t\treturn e;\n\t\t}\n\n\t\tif (output === \"object\") {\n\t\t\treturn { value: result[0], suffix: result[1], symbol: result[1] };\n\t\t}\n\n\t\tif (full) {\n\t\t\tresult[1] = fullforms[e] ? fullforms[e] : fullform[standard][e] + (bits ? \"bit\" : \"byte\") + (result[0] === 1 ? \"\" : \"s\");\n\t\t}\n\n\t\treturn result.join(spacer);\n\t}\n\n\t// Partial application for functional programming\n\tfilesize.partial = function (opt) {\n\t\treturn function (arg) {\n\t\t\treturn filesize(arg, opt);\n\t\t};\n\t};\n\n\t// CommonJS, AMD, script tag\n\tif (typeof exports !== \"undefined\") {\n\t\tmodule.exports = filesize;\n\t} else if (typeof define === \"function\" && define.amd) {\n\t\tdefine(function () {\n\t\t\treturn filesize;\n\t\t});\n\t} else {\n\t\tglobal.filesize = filesize;\n\t}\n})(typeof window !== \"undefined\" ? window : global);\n"]}