{"version":3,"sources":["lamb.js"],"names":["host","always","value","compose","functions","arguments","args","len","length","apply","this","identity","partial","fn","slice","lastArgumentIdx","newArgs","concat","i","_","_findSliceEndIndex","arrayLike","predicate","predicateContext","idx","call","_flatten","array","output","forEach","Array","isArray","push","_shallowFlatten","_arrayProto","_getInsertionIndex","element","comparer","reader","start","end","sorter","ascending","pivot","compared","difference","rest","filter","item","indexOf","dropWhile","flatten","doShallow","intersection","uniques","every","other","insert","result","splice","list","mapWith","iteratee","iterateeContext","map","pluck","key","getKey","a","b","takeWhile","seen","_currier","arity","slicer","_curry","isRightCurry","isAutoCurry","flip","aritize","curry","curryable","debounce","timespan","timeoutID","context","debounced","clearTimeout","setTimeout","reverse","invoker","methodName","boundArgs","target","method","typeOf","mapArgs","mapper","tapArgs","readers","throttle","lastCall","now","Date","adapter","isUndefined","allOf","predicates","anyOf","some","condition","trueFn","falseFn","applyArgsTo","applyArgs","is","isGT","isGTE","isLT","isLTE","not","add","divide","modulo","Math","floor","multiply","randomInt","min","max","random","range","limit","step","ceil","sequence","remainder","subtract","checker","message","keyPaths","pathSeparator","obj","getValues","getFromPath","get","path","separator","split","reduce","has","pick","source","whitelist","pickIf","skip","blacklist","skipIf","validate","checkers","errors","values","keys","Object","keysLen","_getPadding","char","repeat","padLeft","padRight","count","testWith","pattern","_reProto","test","bind","isNull","isType","type","_objectProto","toString","replace","lamb","create","_version","prototype","_fnProto","Function","RegExp","generic","reduceRight","_concat","drop","dropN","flatMap","descending","take","takeN","union","pipe","wrap","isNot","hasKey","hasKeyValue","hasOwn","hasOwnProperty","hasOwnKey","validateWith","isNil","exports","module","define","amd"],"mappings":"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","file":"lamb.min.js","sourcesContent":["/**\n * @overview lamb - A lightweight, and docile, JavaScript library to help embracing functional programming.\n * @author Andrea Scartabelli <andrea.scartabelli@gmail.com>\n * @version 0.6.3\n * @module lamb\n * @license MIT\n * @preserve\n */\n!function (host) {\n    \"use strict\";\n\n    var lamb = Object.create(null);\n\n    /**\n     * The current module version.\n     * @memberof module:lamb\n     * @private\n     * @category Core\n     * @type String\n     */\n    lamb._version =  \"0.6.3\";\n    \n    // alias used as a placeholder argument for partial application\n    var _ = lamb;\n    \n    // some prototype shortcuts for internal use\n    var _arrayProto = Array.prototype;\n    var _fnProto = Function.prototype;\n    var _objectProto = Object.prototype;\n    var _reProto = RegExp.prototype;\n    \n    /**\n     * Builds a function that returns a constant value.\n     * It's actually the simplest form of the K combinator or Kestrel.\n     * @example\n     * var truth = _.always(true);\n     *\n     * truth() // => true\n     * truth(false) // => true\n     * truth(1, 2) // => true\n     *\n     * // the value being returned is actually the\n     * // very same value passed to the function\n     * var foo = {bar: \"baz\"};\n     * var alwaysFoo = _.always(foo);\n     *\n     * alwaysFoo() === foo // => true\n     *\n     * @memberof module:lamb\n     * @category Core\n     * @see [SKI combinator calculus]{@link https://en.wikipedia.org/wiki/SKI_combinator_calculus}\n     * @param {*} value\n     * @returns {Function}\n     */\n    function always (value) {\n        return function () {\n            return value;\n        };\n    }\n    \n    /**\n     * Returns a function that is the composition of the functions given as parameters.\n     * Each function consumes the result of the function that follows.\n     * @example\n     * var sayHi = function (name) { return \"Hi, \" + name; };\n     * var capitalize = function (s) {\n     *     return s[0].toUpperCase() + s.substr(1).toLowerCase();\n     * };\n     * var fixNameAndSayHi = _.compose(sayHi, capitalize);\n     *\n     * sayHi(\"bOb\") // => \"Hi, bOb\"\n     * fixNameAndSayHi(\"bOb\") // \"Hi, Bob\"\n     *\n     * var getName = _.getKey(\"name\");\n     * var users = [{name: \"fred\"}, {name: \"bOb\"}];\n     * var sayHiToUser = _.compose(fixNameAndSayHi, getName);\n     *\n     * users.map(sayHiToUser) // [\"Hi, Fred\", \"Hi, Bob\"]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    function compose () {\n        var functions = arguments;\n    \n        return function () {\n            var args = arguments;\n            var len = functions.length;\n    \n            while (len--) {\n                args = [functions[len].apply(this, args)];\n            }\n    \n            return args[0];\n        };\n    }\n    \n    /**\n     * Creates generic functions out of methods.\n     * @memberof module:lamb\n     * @category Core\n     * @author [Irakli Gozalishvili]{@link https://github.com/Gozala/}. Thanks for this *beautiful* one-liner (never liked your \"unbind\" naming choice, though).\n     * @function\n     * @example\n     * // Lamb's \"filter\" is actually implemented like this\n     * var filter = _.generic(Array.prototype.filter);\n     * var isLowerCase = function (s) { return s.toUpperCase() !== s; };\n     *\n     * filter([\"Foo\", \"bar\", \"baZ\"], isLowerCase) // => [\"bar\"]\n     *\n     * // the function will work with any array-like object\n     * filter(\"fooBAR\", isLowerCase) // => [\"f\", \"o\", \"o\"]\n     *\n     * @param {Function} method\n     * @returns {Function}\n     */\n    var generic = _fnProto.call.bind(_fnProto.bind, _fnProto.call);\n    \n    /**\n     * The I combinator. Any value passed to the function is simply returned as it is.\n     * @example\n     * var foo = {bar: \"baz\"};\n     *\n     * _.identity(foo) === foo // true\n     *\n     * @memberof module:lamb\n     * @category Core\n     * @see [SKI combinator calculus]{@link https://en.wikipedia.org/wiki/SKI_combinator_calculus}\n     * @param {*} value\n     * @returns {*} The value passed as parameter.\n     */\n    function identity (value) {\n        return value;\n    }\n    \n    /**\n     * Builds a partially applied function. The <code>lamb</code> object itself can be used as a placeholder argument:\n     * it's useful to alias it as <code>_</code> or <code>__</code>.\n     * @example\n     * var weights = [\"2 Kg\", \"10 Kg\", \"1 Kg\", \"7 Kg\"];\n     * var parseInt10 = _.partial(parseInt, _, 10);\n     *\n     * weights.map(parseInt10) // => [2, 10, 1, 7]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {...*} args\n     * @returns {Function}\n     */\n    function partial (fn) {\n        var args = slice(arguments, 1);\n    \n        return function () {\n            var lastArgumentIdx = 0;\n            var newArgs = args.concat();\n    \n            for (var i = 0, len = newArgs.length; i < len; i++) {\n                if (newArgs[i] === _) {\n                    newArgs[i] = arguments[lastArgumentIdx++];\n                }\n            }\n    \n            return fn.apply(this, newArgs.concat(slice(arguments, lastArgumentIdx)));\n        };\n    }\n    \n    lamb.always = always;\n    lamb.compose = compose;\n    lamb.generic = generic;\n    lamb.identity = identity;\n    lamb.partial = partial;\n    \n    \n    /**\n     * Builds an array comprised of all values of the array-like object passing the <code>predicate</code> test.<br/>\n     * It's a generic version of [Array.prototype.filter]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter}.\n     * @example\n     * var isLowerCase = function (s) { return s.toUpperCase() !== s; };\n     *\n     * _.filter([\"Foo\", \"bar\", \"baZ\"], isLowerCase) // => [\"bar\"]\n     *\n     * // the function will work with any array-like object\n     * _.filter(\"fooBAR\", isLowerCase) // => [\"f\", \"o\", \"o\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Array}\n     */\n    var filter = generic(_arrayProto.filter);\n    \n    /**\n     * Executes the provided <code>iteratee</code> for each element of the given array-like object.<br/>\n     * It's a generic version of [Array.prototype.forEach]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach}.\n     * @example <caption>Adding a CSS class to all elements of a NodeList in a browser environment</caption>\n     * var addClass = function (className) {\n     *     return function (element) {\n     *         element.classList.add(className);\n     *     };\n     * };\n     * var paragraphs = document.querySelectorAll(\"#some-container p\");\n     *\n     * _.forEach(paragraphs, addClass(\"main\"));\n     * // each \"p\" element in the container will have the \"main\" class now\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     */\n    var forEach = generic(_arrayProto.forEach);\n    \n    /**\n     * Creates an array from the results of the provided <code>iteratee</code>.<br/>\n     * It's a generic version of [Array.prototype.map]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map}.\n     * @example\n     * function getSquareRoots () {\n     *     return _.map(arguments, Math.sqrt);\n     * }\n     *\n     * getSquareRoots(4, 9, 16) // => [2, 3, 4]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    var map = generic(_arrayProto.map);\n    \n    /**\n     * Reduces (or folds) the values of an array-like object, starting from the first, to a new value using the provided <code>accumulator</code> function.<br/>\n     * It's a generic version of [Array.prototype.reduce]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce}.\n     * @example\n     * _.reduce([1, 2, 3, 4], _.add) // => 10\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {AccumulatorCallback} accumulator\n     * @param {*} [initialValue]\n     * @returns {*}\n     */\n    var reduce = generic(_arrayProto.reduce);\n    \n    /**\n     * Same as {@link module:lamb.reduce|reduce}, but starts the fold operation from the last element instead.<br/>\n     * It's a generic version of [Array.prototype.reduceRight]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight}.\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {AccumulatorCallback} accumulator\n     * @param {*} [initialValue]\n     * @returns {*}\n     */\n    var reduceRight = generic(_arrayProto.reduceRight);\n    \n    /**\n     * Builds an array by extracting a portion of an array-like object.<br/>\n     * It's a generic version of [Array.prototype.slice]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice}.\n     * @example\n     * _.slice([\"foo\", \"bar\", \"baz\"], 0, 2) // => [\"foo\", \"bar\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike - Any array like object.\n     * @param {Number} [start=0] - Zero-based index at which to begin extraction.\n     * @param {Number} [end=arrayLike.length] - Zero-based index at which to end extraction. Extracts up to but not including end.\n     * @returns {Array}\n     */\n    var slice = generic(_arrayProto.slice);\n    \n    lamb.filter = filter;\n    lamb.forEach = forEach;\n    lamb.map = map;\n    lamb.reduce = reduce;\n    lamb.reduceRight = reduceRight;\n    lamb.slice = slice;\n    \n    \n    var _concat = generic(_arrayProto.concat);\n    \n    function _findSliceEndIndex (arrayLike, predicate, predicateContext) {\n        var idx = -1;\n        var len = arrayLike.length;\n    \n        while (++idx < len && predicate.call(predicateContext, arrayLike[idx], idx, arrayLike));\n    \n        return idx;\n    }\n    \n    function _flatten (array, output) {\n        output = output || [];\n    \n        array.forEach(function (value) {\n            if (Array.isArray(value)) {\n                _flatten(value, output);\n            } else {\n                output.push(value);\n            }\n        });\n    \n        return output;\n    }\n    \n    function _shallowFlatten (array) {\n        return _arrayProto.concat.apply([], array);\n    }\n    \n    function _getInsertionIndex (array, element, comparer, reader, start, end) {\n        if (array.length === 0) {\n            return 0;\n        }\n    \n        comparer = comparer || sorter.ascending;\n        reader = reader || identity;\n        start = start || 0;\n        end = end || array.length;\n    \n        var pivot = (start + end) >> 1;\n        var compared = comparer(reader(element), reader(array[pivot]));\n    \n        if (end - start <= 1) {\n            return compared === -1 ? pivot : pivot + 1;\n        }\n    \n        switch (compared) {\n            case -1:\n                return _getInsertionIndex(array, element, comparer, reader, start, pivot);\n            case 0:\n                return pivot + 1;\n            case 1:\n                return _getInsertionIndex(array, element, comparer, reader, pivot, end);\n        }\n    }\n    \n    /**\n     * Returns an array of items present only in the first of the given arrays.\n     * @example\n     * var a1 = [1, 2, 3, 4];\n     * var a2 = [2, 4, 5];\n     * var a3 = [4, 5, 3, 1];\n     *\n     * _.difference(a1, a2) // => [1, 3]\n     * _.difference(a1, a2, a3) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {Array} array\n     * @param {...Array} other\n     * @returns {Array}\n     */\n    function difference (array) {\n        var rest = _shallowFlatten(slice(arguments, 1));\n        return array.filter(function (item) {\n            return rest.indexOf(item) === -1;\n        });\n    }\n    \n    /**\n     * Builds an array without the first <code>n</code> elements of the given array or array-like object.\n     * Note that, being this only a shortcut for a specific use case of {@link module:lamb.slice|slice},\n     * <code>n</code> can be a negative number.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.drop(arr, 2) // => [3, 4, 5]\n     * _.drop(arr, -1) // => [5]\n     * _.drop(arr, -10) // => [1, 2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {Number} n\n     * @returns {Array}\n     */\n    var drop = aritize(slice, 2);\n    \n    /**\n     * A curried version of {@link module:lamb.drop|drop} that expects the number of elements\n     * to drop to build a function waiting for the list to take the elements from.\n     * See the note and examples for {@link module:lamb.drop|drop} about passing a negative <code>n</code>.\n     * @example\n     * var drop2 = _.dropN(2);\n     *\n     * drop2([1, 2, 3, 4, 5]) // => [3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {Number} n\n     * @returns {Function}\n     */\n    var dropN = _curry(drop, 2, true);\n    \n    /**\n     * Builds a function that drops the first <code>n</code> elements satisfying a predicate from an array or array-like object.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var dropWhileIsEven = _.dropWhile(isEven);\n     *\n     * dropWhileIsEven([2, 4, 6, 8]) // => []\n     * dropWhileIsEven([2, 4, 7, 8]) // => [7, 8]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    function dropWhile (predicate, predicateContext) {\n        return function (arrayLike) {\n            return slice(arrayLike, _findSliceEndIndex(arrayLike, predicate, predicateContext));\n        };\n    }\n    \n    /**\n     * Similar to {@link module:lamb.map|map}, but if the mapping function returns an array this will\n     * be concatenated, rather than pushed, to the final result.\n     * @example <caption>showing the difference with map</caption>\n     * var words = [\"foo\", \"bar\"];\n     * var toCharArray = function (s) { return s.split(\"\"); };\n     *\n     * _.map(words, toCharArray) // => [[\"f\", \"o\", \"o\"], [\"b\", \"a\", \"r\"]]\n     * _.flatMap(words, toCharArray) // => [\"f\", \"o\", \"o\", \"b\", \"a\", \"r\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {Array} array\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    var flatMap = compose(_shallowFlatten, map);\n    \n    /**\n     * Flattens an array.\n     * @example\n     * var arr = [1, 2, [3, 4, [5, 6]], 7, 8];\n     *\n     * _.flatten(arr) // => [1, 2, 3, 4, 5, 6, 7, 8]\n     * _.flatten(arr, true) // => [1, 2, 3, 4, [5, 6], 7, 8]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {Array} array\n     * @param {Boolean} [doShallow=false] - Whether to flatten only the first \"level\" of the array or not.\n     * @returns {Array}\n     */\n    function flatten (array, doShallow) {\n        return (doShallow ? _shallowFlatten : _flatten)(array);\n    }\n    \n    /**\n     * Returns an array of every item present in all given arrays.\n     * @example\n     * var a1 = [1, 2, 3, 4];\n     * var a2 = [2, 5, 4, 6];\n     * var a3 = [5, 6, 7];\n     *\n     * _.intersection(a1, a2) // => [2, 4]\n     * _.intersection(a1, a3) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {...Array} array\n     * @return {Array}\n     */\n    function intersection () {\n        var rest = slice(arguments, 1);\n        return uniques(arguments[0]).filter(function (item) {\n            return rest.every(function (other) {\n                return other.indexOf(item) !== -1;\n            });\n        });\n    }\n    \n    /**\n     * Inserts an element in a copy of a sorted array respecting the sort order.\n     * @example <caption>with simple values</caption>\n     * _.insert([], 1) // => [1]\n     * _.insert([2, 4, 6], 5) // => [2, 4, 5, 6]\n     * _.insert([4, 2, 1], 3, _.sorter.descending) // => [4, 3, 2, 1]\n     *\n     * @example <caption>with complex values</caption>\n     * var persons = [\n     *     {\"name\": \"jane\", \"surname\": \"doe\"},\n     *     {\"name\": \"John\", \"surname\": \"Doe\"},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * ];\n     *\n     * var getLowerCaseName = _.compose(\n     *     _.invoker(\"toLowerCase\"),\n     *     _.getKey(\"name\")\n     * );\n     *\n     * var result = _.insert(\n     *     persons,\n     *     {\"name\": \"marco\", \"surname\": \"Rossi\"},\n     *     _.sorter.ascending,\n     *     getLowerCaseName\n     * );\n     *\n     * // `result` holds:\n     * // [\n     * //     {\"name\": \"jane\", \"surname\": \"doe\"},\n     * //     {\"name\": \"John\", \"surname\": \"Doe\"},\n     * //     {\"name\": \"marco\", \"surname\": \"Rossi\"},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {Array} array\n     * @param {*} element\n     * @param {Function} [comparer={@link module:lamb.sorter|sorter.ascending}] - The comparer function used to sort the array.\n     * @param {Function} [reader={@link module:lamb.identity|identity}] - The function that evaluates the array elements and supplies values for comparison.\n     * @returns {Array}\n     */\n    function insert (array, element, comparer, reader) {\n        var result = array.concat();\n        result.splice(_getInsertionIndex(array, element, comparer, reader), 0, element);\n        return result;\n    }\n    \n    /**\n     * Generates an array with the values passed as arguments.\n     * @example\n     * _.list(1, 2, 3) // => [1, 2, 3]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {...*} value\n     * @returns {Array}\n     */\n    function list () {\n        return slice(arguments);\n    }\n    \n    /**\n     * A curried version of {@link module:lamb.map|map} that uses the given iteratee to build a\n     * function expecting the array-like object to act upon.\n     * @example\n     * var square = function (n) { return n * n; };\n     * var getSquares = _.mapWith(square);\n     *\n     * getSquares([1, 2, 3, 4, 5]) // => [1, 4, 9, 16, 25]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {function}\n     */\n    function mapWith (iteratee, iterateeContext) {\n        return partial(map, _, iteratee, iterateeContext);\n    }\n    \n    /**\n     * \"Plucks\" the specified key from a list of objects.\n     * @example\n     * var lists = [\n     *     [1, 2],\n     *     [3, 4, 5],\n     *     [6]\n     * ];\n     *\n     * _.pluck(lists, \"length\") // => [2, 3, 1]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @param {String} key\n     * @returns {Array}\n     */\n    function pluck (arrayLike, key) {\n        return map(arrayLike, getKey(key));\n    }\n    \n    /**\n     * Generates a function to sort arrays of complex values.\n     * @example\n     * var weights = [\"2 Kg\", \"10 Kg\", \"1 Kg\", \"7 Kg\"];\n     * var asNumbers = _.sorter(_.sorter.ascending, parseFloat);\n     *\n     * weights.sort() // => [\"1 Kg\", \"10 Kg\", \"2 Kg\", \"7 Kg\"]\n     * weights.sort(asNumbers) // => [\"1 Kg\", \"2 Kg\", \"7 Kg\", \"10 Kg\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @property {Function} ascending - A default ascending comparer.\n     * @property {Function} descending - A default descending comparer.\n     * @param {Function} comparer - A comparer function to be passed to the [Array.prototype.sort]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort} method.\n     * @param {Function} reader - A function meant to generate a simple value from a complex one. The function should evaluate the array element and supply the value to be passed to the comparer.\n     * @returns {Function}\n     */\n    function sorter (comparer, reader) {\n        return function (a, b) {\n            return comparer(reader(a), reader(b));\n        };\n    }\n    sorter.ascending = function (a, b) {\n        return a < b ? -1 : a > b ? 1 : 0;\n    };\n    sorter.descending = function (a, b) {\n        return b < a ? -1 : b > a ? 1 : 0;\n    };\n    \n    /**\n     * Retrieves the first <code>n</code> elements from an array or array-like object.\n     * Note that, being this a partial application of {@link module:lamb.slice|slice},\n     * <code>n</code> can be a negative number.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.take(arr, 3) // => [1, 2, 3]\n     * _.take(arr, -1) // => [1, 2, 3, 4]\n     * _.take(arr, -10) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {Number} n\n     * @returns {Array}\n     */\n    var take = partial(slice, _, 0, _);\n    \n    /**\n     * A curried version of {@link module:lamb.take|take} that expects the number of elements\n     * to retrieve to build a function waiting for the list to take the elements from.\n     * See the note and examples for {@link module:lamb.take|take} about passing a negative <code>n</code>.\n     * @example\n     * var take2 = _.takeN(2);\n     *\n     * take2([1, 2, 3, 4, 5]) // => [1, 2]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {Number} n\n     * @returns {Function}\n     */\n    var takeN = _curry(take, 2, true);\n    \n    /**\n     * Builds a function that takes the first <code>n</code> elements satisfying a predicate from an array or array-like object.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var takeWhileIsEven = _.takeWhile(isEven);\n     *\n     * takeWhileIsEven([1, 2, 4, 6, 8]) // => []\n     * takeWhileIsEven([2, 4, 7, 8]) // => [2, 4]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} predicateContext\n     * @returns {Function}\n     */\n    function takeWhile (predicate, predicateContext) {\n        return function (arrayLike) {\n            return slice(arrayLike, 0, _findSliceEndIndex(arrayLike, predicate, predicateContext));\n        };\n    }\n    \n    /**\n     * Returns a list of every unique element present in the given arrays.\n     * @example\n     * _.union([1, 2, 3, 2], [3, 4], [1, 5]) // => [1, 2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {...Array} array\n     * @returns {Array}\n     */\n    var union = compose(uniques, _concat);\n    \n    /**\n     * Returns an array comprised of the unique elements of the given array-like object.\n     * Can work with lists of complex objects if supplied with an iteratee.\n     * @example <caption>with simple values</caption>\n     * _.uniques([1, 2, 2, 3, 4, 3, 5, 1]) // => [1, 2, 3, 4, 5]\n     *\n     * @example <caption>with complex values</caption>\n     * var data  = [\n     *     {id: \"1\"},\n     *     {id: \"4\"},\n     *     {id: \"5\"},\n     *     {id: \"1\"},\n     *     {id: \"5\"},\n     * ];\n     *\n     * _.uniques(data, _.getKey(\"id\")) // => [{id: \"1\"}, {id: \"4\"}, {\"id\": 5}]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} [iteratee] Defaults to the [identity function]{@link module:lamb.identity}.\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    function uniques (arrayLike, iteratee, iterateeContext) {\n        if (typeof iteratee !== \"function\") {\n            iteratee = identity;\n        }\n    \n        var result = [];\n        var seen = [];\n        var value;\n    \n        for (var i = 0; i < arrayLike.length; i++) {\n            value = iteratee.call(iterateeContext, arrayLike[i], i , arrayLike);\n    \n            if (seen.indexOf(value) === -1) {\n                seen.push(value);\n                result.push(arrayLike[i]);\n            }\n        }\n    \n        return result;\n    }\n    \n    lamb.difference = difference;\n    lamb.drop = drop;\n    lamb.dropN = dropN;\n    lamb.dropWhile = dropWhile;\n    lamb.flatMap = flatMap;\n    lamb.flatten = flatten;\n    lamb.intersection = intersection;\n    lamb.insert = insert;\n    lamb.list = list;\n    lamb.mapWith = mapWith;\n    lamb.pluck = pluck;\n    lamb.sorter = sorter;\n    lamb.take = take;\n    lamb.takeN = takeN;\n    lamb.takeWhile = takeWhile;\n    lamb.union = union;\n    lamb.uniques = uniques;\n    \n    \n    function _currier (fn, arity, slicer) {\n        return function () {\n            var args = slicer(arguments);\n    \n            if (args.length >= arity) {\n                return fn.apply(this, args);\n            } else {\n                return _currier(\n                    apply(partial, [fn].concat(args)),\n                    arity - args.length,\n                    slicer\n                );\n            }\n        };\n    }\n    \n    function _curry (fn, arity, isRightCurry, isAutoCurry) {\n        var slicer = isAutoCurry ? slice : partial(slice, _, 0, 1);\n    \n        if ((arity | 0) !== arity) {\n            arity = fn.length;\n        }\n    \n        if (isRightCurry) {\n            fn = flip(fn);\n        }\n    \n        return _currier(fn, arity, slicer);\n    }\n    \n    /**\n     * Applies the passed function to the given argument list.\n     * @example\n     * _.apply(_.add, [3, 4]) // => 7\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {ArrayLike} args\n     * @returns {*}\n     */\n    function apply (fn, args) {\n        return fn.apply(fn, slice(args));\n    }\n    \n    /**\n     * A curried version of {@link module:lamb.apply|apply}. Expects an array-like object to use as arguments\n     * and builds a function waiting for the target of the application.\n     * @example\n     * var data = [3, 4];\n     * var applyDataTo = _.applyArgs(data);\n     *\n     * applyDataTo(_.add) // => 7\n     * applyDataTo(_.multiply) // => 12\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @function\n     * @param {ArrayLike} args\n     * @returns {Function}\n     */\n    var applyArgs = _curry(apply, 2, true);\n    \n    /**\n     * Builds a function that passes only the specified amount of arguments to the given function.\n     * @example\n     * var data = [\"1-2\", \"13-5\", \"6-23\"];\n     * var getDashIndex = _.invoker(\"indexOf\", \"-\");\n     *\n     * data.map(getDashIndex) // => [1, 2, -1]\n     * data.map(_.aritize(getDashIndex, 1)) // = > [1, 2, 1]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {Number} arity\n     * @returns {Function}\n     */\n    function aritize (fn, arity) {\n        return function () {\n            return apply(fn, slice(arguments, 0, arity));\n        };\n    }\n    \n    /**\n     * Transforms the evaluation of the given function in the evaluation of a sequence of functions expecting\n     * only one argument. Each function of the sequence is a partial application of the original one, which\n     * will be applied when the specified (or derived) arity is consumed.<br/>\n     * See also {@link module:lamb.curryable|curryable} and {@link module:lamb.partial|partial}.\n     * @example\n     * var multiplyBy = _.curry(_.multiply);\n     * var multiplyBy10 = multiplyBy(10);\n     * var divideBy = _.curry(_.divide, 2, true);\n     * var halve = divideBy(2);\n     *\n     * multiplyBy10(5) // => 50\n     * multiplyBy10()(5) // => 50\n     * multiplyBy10()()(2) // => 20\n     * halve(3) // => 1.5\n     * have(3, 7) // => 1.5\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {?Number} [arity=fn.length]\n     * @param {Boolean} [isRightCurry=false] - Whether to start currying from the rightmost argument or not.\n     * @returns {Function}\n     */\n    function curry (fn, arity, isRightCurry) {\n        return _curry(fn, arity, isRightCurry);\n    }\n    \n    /**\n     * Builds an auto-curried function. The resulting function can be called multiple times with\n     * any number of arguments, and the original function will be applied only when the specified\n     * (or derived) arity is consumed.<br/>\n     * Note that you can pass undefined values as arguments explicitly, if you are so inclined, but empty\n     * calls doesn't consume the arity.<br/>\n     * See also {@link module:lamb.curry|curry} and {@link module:lamb.partial|partial}.\n     * @example\n     * var collectFourElements = _.curryable(_.list, 4);\n     *\n     * collectFourElements(2)(3)(4)(5) // => [2, 3, 4, 5]\n     * collectFourElements(2)(3, 4)(5) // => [2, 3, 4, 5]\n     * collectFourElements(2, 3, 4, 5) // => [2, 3, 4, 5]\n     * collectFourElements()(2)()(3, 4, 5) // => [2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {?Number} [arity=fn.length]\n     * @param {Boolean} [isRightCurry=false] - Whether to start currying from the rightmost argument or not.\n     * @returns {Function}\n     */\n    function curryable (fn, arity, isRightCurry) {\n        return _curry(fn, arity, isRightCurry, true);\n    }\n    \n    /**\n     * Returns a function that will execute the given function only if it stops being called for the specified timespan.<br/>\n     * See also {@link module:lamb.throttle|throttle} for a different behaviour where the first call happens immediately.\n     * @example <caption>A common use case of <code>debounce</code> in a browser environment</caption>\n     * var updateLayout = function () {\n     *     // some heavy DOM operations here\n     * };\n     *\n     * window.addEventListener(\"resize\", _.debounce(updateLayout, 200), false);\n     *\n     * // The resize event is fired repeteadly until the user stops resizing the\n     * // window, while the `updateLayout` function is called only once: 200 ms\n     * // after he stopped.\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {Number} timespan - Expressed in milliseconds\n     * @returns {Function}\n     */\n    function debounce (fn, timespan) {\n        var timeoutID;\n    \n        return function () {\n            var context = this;\n            var args = arguments;\n            var debounced = function () {\n                timeoutID = null;\n                fn.apply(context, args);\n            };\n    \n            clearTimeout(timeoutID);\n            timeoutID = setTimeout(debounced, timespan);\n        };\n    }\n    \n    /**\n     * Returns a function that applies its arguments to the original function in reverse order.\n     * @example\n     * _.list(1, 2, 3) // => [1, 2, 3]\n     * _.flip(_.list)(1, 2, 3) // => [3, 2, 1]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function flip (fn) {\n        return function () {\n            var args = slice(arguments).reverse();\n            return fn.apply(this, args);\n        };\n    }\n    \n    /**\n     * Builds a function that will invoke the given method name on any received object and return\n     * the result. If no method with such name is found the function will return <code>undefined</code>.\n     * Along with the method name it's possible to supply some arguments that will be bound to the method call.<br/>\n     * Further arguments can also be passed when the function is actually called, and they will be concatenated\n     * to the bound ones.<br/>\n     * If different objects share a method name it's possible to build polymorphic functions as you can see in\n     * the example below.<br/>\n     * {@link module:lamb.condition|Condition} can be used to wrap <code>invoker</code> to avoid this behaviour\n     * by adding a predicate, while {@link module:lamb.adapter|adapter} can build more complex polymorphic functions\n     * without the need of homonymy.<br/>\n     * Returning <code>undefined</code> or checking for such value is meant to favor composition and interoperability\n     * between the aforementioned functions: for a more standard behaviour see also {@link module:lamb.generic|generic}.\n     * @example <caption>Basic polymorphism with <code>invoker</code></caption>\n     * var polySlice = _.invoker(\"slice\");\n     *\n     * polySlice([1, 2, 3, 4, 5], 1, 3) // => [2, 3]\n     * polySlice(\"Hello world\", 1, 3) // => \"el\"\n     *\n     * @example <caption>With bound arguments</caption>\n     * var substrFrom2 = _.invoker(\"substr\", 2);\n     * substrFrom2(\"Hello world\") // => \"llo world\"\n     * substrFrom2(\"Hello world\", 5) // => \"llo w\"\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {String} methodName\n     * @param {...*} [boundArg]\n     * @returns {Function}\n     */\n    function invoker (methodName) {\n        var boundArgs = slice(arguments, 1);\n    \n        return function (target) {\n            var args = slice(arguments, 1);\n            var method = target[methodName];\n            return typeOf(method) === \"Function\" ? method.apply(target, boundArgs.concat(args)) : void 0;\n        };\n    }\n    \n    /**\n     * Builds a function that allows to map over the received arguments before applying them to the original one.\n     * @example\n     * var sumArray = _.invoker(\"reduce\", _.add);\n     * var sum = _.compose(sumArray, _.list);\n     *\n     * sum(1, 2, 3, 4, 5) // => 15\n     *\n     * var square = _.partial(Math.pow, _, 2);\n     * var sumSquares = _.mapArgs(sum, square);\n     *\n     * sumSquares(1, 2, 3, 4, 5) // => 55\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {ListIteratorCallback} mapper\n     * @returns {Function}\n     */\n    function mapArgs (fn, mapper) {\n        return compose(partial(apply, fn), mapWith(mapper), list);\n    }\n    \n    /**\n     * Creates a pipeline of functions, where each function consumes the result of the previous one.<br/>\n     * See also {@link module:lamb.compose|compose}.\n     * @example\n     * var square = _.partial(Math.pow, _, 2);\n     * var getMaxAndSquare = _.pipe(Math.max, square);\n     *\n     * getMaxAndSquare(3, 5) // => 25\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @function\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    var pipe = flip(compose);\n    \n    /**\n     * Builds a function that allows to \"tap\" into the arguments of the original one.\n     * This allows to extract simple values from complex ones, transform arguments or simply intercept them.\n     * If a \"tapper\" isn't found the argument is passed as it is.\n     * @example\n     * var someObject = {count: 5};\n     * var someArrayData = [2, 3, 123, 5, 6, 7, 54, 65, 76, 0];\n     * var getDataAmount = _.tapArgs(_.add, _.getKey(\"count\"), _.getKey(\"length\"));\n     *\n     * getDataAmount(someObject, someArrayData); // => 15\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {...?Function} [tapper]\n     * @returns {Function}\n     */\n    function tapArgs (fn) {\n        var readers = slice(arguments, 1);\n    \n        return function () {\n            var len = arguments.length;\n            var args = [];\n    \n            for (var i = 0; i < len; i++) {\n                args.push(readers[i] ? readers[i](arguments[i]) : arguments[i]);\n            }\n    \n            return fn.apply(this, args);\n        };\n    }\n    \n    /**\n     * Returns a function that will invoke the passed function at most once in the given timespan.<br/>\n     * The first call in this case happens has soon as the function is invoked; see also {@link module:lamb.debounce|debounce}\n     * for a different behaviour where the first call is delayed.\n     * @example\n     * var log = _.throttle(console.log.bind(console), 5000);\n     *\n     * log(\"Hi\"); // console logs \"Hi\"\n     * log(\"Hi again\"); // nothing happens\n     * // after five seconds\n     * log(\"Hello world\"); // console logs \"Hello world\"\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {Number} timespan - Expressed in milliseconds.\n     * @returns {Function}\n     */\n    function throttle (fn, timespan) {\n        var result;\n        var lastCall = 0;\n    \n        return function () {\n            var now = Date.now();\n    \n            if (now - lastCall >= timespan) {\n                lastCall = now;\n                result = fn.apply(this, arguments);\n            }\n    \n            return result;\n        };\n    }\n    \n    /**\n     * Wraps the function <code>fn</code> inside a <code>wrapper</code> function.<br/>\n     * This allows to conditionally execute <code>fn</code>, to tamper with its arguments or return value\n     * and to run code before and after its execution.<br/>\n     * Being this nothing more than a \"{@link module:lamb.flip|flipped}\" [partial application]{@link module:lamb.partial},\n     * you can also easily build new functions from existent ones.\n     * @example\n     * var arrayMax = _.wrap(Math.max, _.apply);\n     *\n     * arrayMax([4, 5, 2, 6, 1]) // => 6\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @function\n     * @param {Function} fn\n     * @param {Function} wrapper\n     * @returns {Function}\n     */\n    var wrap = aritize(flip(partial), 2);\n    \n    lamb.apply = apply;\n    lamb.applyArgs = applyArgs;\n    lamb.aritize = aritize;\n    lamb.curry = curry;\n    lamb.curryable = curryable;\n    lamb.debounce = debounce;\n    lamb.flip = flip;\n    lamb.invoker = invoker;\n    lamb.mapArgs = mapArgs;\n    lamb.pipe = pipe;\n    lamb.tapArgs = tapArgs;\n    lamb.throttle = throttle;\n    lamb.wrap = wrap;\n    \n    \n    /**\n     * Accepts a series of functions and builds a function that applies the received arguments to each one and\n     * returns the first non <code>undefined</code> value.<br/>\n     * Meant to work in sinergy with {@link module:lamb.condition|condition} and {@link module:lamb.invoker|invoker},\n     * can be useful as a strategy pattern for functions, to mimic conditional logic and also to build polymorphic functions.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var filterString = _.condition(\n     *     _.isType(\"String\"),\n     *     _.compose(_.invoker(\"join\", \"\"), _.filter)\n     * );\n     * var filterAdapter = _.adapter(_.invoker(\"filter\"), filterString);\n     *\n     * filterAdapter([1, 2, 3, 4, 5, 6], isEven)) // => [2, 4, 6]\n     * filterAdapter(\"123456\", isEven)) // => \"246\"\n     * filterAdapter({}, isEven)) // => undefined\n     *\n     * // obviously it's composable\n     * var filterWithDefault = _.adapter(filterAdapter, _.always(\"Not implemented\"));\n     *\n     * filterWithDefault([1, 2, 3, 4, 5, 6], isEven)) // => [2, 4, 6]\n     * filterWithDefault(\"123456\", isEven)) // => \"246\"\n     * filterWithDefault({}, isEven)) // => \"Not implemented\"\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    function adapter () {\n        var functions = slice(arguments);\n    \n        return function () {\n            var len = functions.length;\n            var result;\n    \n            for (var i = 0; i < len; i++) {\n                result = apply(functions[i], arguments);\n    \n                if (!isUndefined(result)) {\n                    break;\n                }\n            }\n    \n            return result;\n        };\n    }\n    \n    /**\n     * Builds a predicate that returns true if all the given predicates are satisfied.\n     * The arguments passed to the resulting function are applied to every predicate unless one of them returns false.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var isPositive = function (n) { return n > 0; };\n     * var isPositiveEven = _.allOf(isEven, isPositive);\n     *\n     * isPositiveEven(-2) // => false\n     * isPositiveEven(11) // => false\n     * isPositiveEven(6) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {...Function} predicate\n     * @returns {Function}\n     */\n    function allOf () {\n        var predicates = slice(arguments);\n    \n        return function () {\n            var args = arguments;\n    \n            return predicates.every(function (predicate) {\n                return predicate.apply(null, args);\n            });\n        };\n    }\n    \n    /**\n     * Builds a predicate that returns true if at least one of the given predicates is satisfied.\n     * The arguments passed to the resulting function are applied to every predicate until one of them returns true.\n     * @example\n     * // Lamb's \"isNil\" is actually implemented like this\n     * var isNil = _.anyOf(_.isNull, _.isUndefined);\n     *\n     * isNil(NaN) // => false\n     * isNil({}) // => false\n     * isNil(null) // => true\n     * isNil(void 0) // => true\n     * isNil() // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {...Function} predicate\n     * @returns {Function}\n     */\n    function anyOf () {\n        var predicates = slice(arguments);\n    \n        return function () {\n            var args = arguments;\n    \n            return predicates.some(function (predicate) {\n                return predicate.apply(null, args);\n            });\n        };\n    }\n    \n    /**\n     * Builds a function that will apply the received arguments to <code>trueFn</code>, if the predicate is satisfied with\n     * the same arguments, or to <code>falseFn</code> otherwise.<br/>\n     * If <code>falseFn</code> isn't provided and the predicate isn't satisfied the function will return <code>undefined</code>.<br/>\n     * Although you can use other <code>condition</code>s as <code>trueFn</code> or <code>falseFn</code>, it's probably better to\n     * use {@link module:lamb.adapter|adapter} to build more complex behaviours.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0};\n     * var halve = function (n) { return n / 2; };\n     * var halveIfEven = _.condition(isEven, halve, _.identity);\n     *\n     * halveIfEven(5) // => 5\n     * halveIfEven(6) // => 3\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.invoker|invoker}\n     * @param {Function} predicate\n     * @param {Function} trueFn\n     * @param {Function} [falseFn]\n     * @returns {Function}\n     */\n    function condition (predicate, trueFn, falseFn) {\n        return function () {\n            var applyArgsTo = applyArgs(arguments);\n            return applyArgsTo(predicate) ? applyArgsTo(trueFn) : falseFn ? applyArgsTo(falseFn) : void 0;\n        };\n    }\n    \n    /**\n     * Verifies that the two supplied values are the same value using strict\n     * equality. Note that this doesn't behave as the strict equality operator,\n     * but rather as a shim of ES6's [Object.is]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is}.\n     * Differences are that <code>0</code> and <code>-0</code> aren't the same value and, finally, <code>NaN</code> is equal to itself.\n     * @example\n     * var testObject = {};\n     *\n     * _.is({}, testObject) // => false\n     * _.is(testObject, testObject) // => true\n     * _.is(\"foo\", \"foo\") // => true\n     * _.is(0, -0) // => false\n     * _.is(0 / 0, NaN) => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {*} a\n     * @param {*} b\n     * @returns {Boolean}\n     */\n    function is (a, b) {\n        var result;\n    \n        if (a === 0 && b === 0) {\n            result = 1 / a === 1 / b;\n        } else if (a !== a) {\n            result = b !== b;\n        } else {\n            result = a === b;\n        }\n    \n        return result;\n    }\n    \n    /**\n     * Verifies that the first given value is greater than the second.\n     * @example\n     * var pastDate = new Date(2010, 2, 12);\n     * var today = new Date();\n     *\n     * _.isGT(today, pastDate) // true\n     * _.isGT(pastDate, today) // false\n     * _.isGT(3, 4) // false\n     * _.isGT(3, 3) // false\n     * _.isGT(3, 2) // true\n     * _.isGT(0, -0) // false\n     * _.isGT(-0, 0) // false\n     * _.isGT(\"a\", \"A\") // true\n     * _.isGT(\"b\", \"a\") // true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isGT (a, b) {\n        return a > b;\n    }\n    \n    /**\n     * Verifies that the first given value is greater than or equal to the second.\n     * Regarding equality, beware that this is simply a wrapper for the native operator, so <code>-0 === 0</code>.\n     * @example\n     * _.isGTE(3, 4) // false\n     * _.isGTE(3, 3) // true\n     * _.isGTE(3, 2) // true\n     * _.isGTE(0, -0) // true\n     * _.isGTE(-0, 0) // true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isGTE (a, b) {\n        return a >= b;\n    }\n    \n    /**\n     * Verifies that the first given value is less than the second.\n     * @example\n     * var pastDate = new Date(2010, 2, 12);\n     * var today = new Date();\n     *\n     * _.isLT(today, pastDate) // false\n     * _.isLT(pastDate, today) // true\n     * _.isLT(3, 4) // true\n     * _.isLT(3, 3) // false\n     * _.isLT(3, 2) // false\n     * _.isLT(0, -0) // false\n     * _.isLT(-0, 0) // false\n     * _.isLT(\"a\", \"A\") // false\n     * _.isLT(\"a\", \"b\") // true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isLT (a, b) {\n        return a < b;\n    }\n    \n    /**\n     * Verifies that the first given value is less than or equal to the second.\n     * Regarding equality, beware that this is simply a wrapper for the native operator, so <code>-0 === 0</code>.\n     * @example\n     * _.isLTE(3, 4) // true\n     * _.isLTE(3, 3) // true\n     * _.isLTE(3, 2) // false\n     * _.isLTE(0, -0) // true\n     * _.isLTE(-0, 0) // true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isLTE (a, b) {\n        return a <= b;\n    }\n    \n    /**\n     * A simple negation of {@link module:lamb.is|is}, exposed for convenience.\n     * @example\n     * _.isNot(\"foo\", \"foo\") // => false\n     * _.isNot(0, -0) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @function\n     * @param {*} valueA\n     * @param {*} valueB\n     * @returns {Boolean}\n     */\n    var isNot = not(is);\n    \n    /**\n     * Returns a predicate that negates the given one.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var isOdd = _.not(isEven);\n     *\n     * isOdd(5) // => true\n     * isOdd(4) // => false\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Function} predicate\n     * @returns {Function}\n     */\n    function not (predicate) {\n        return function () {\n            return !predicate.apply(null, arguments);\n        };\n    }\n    \n    lamb.adapter = adapter;\n    lamb.allOf = allOf;\n    lamb.anyOf = anyOf;\n    lamb.condition = condition;\n    lamb.is = is;\n    lamb.isGT = isGT;\n    lamb.isGTE = isGTE;\n    lamb.isLT = isLT;\n    lamb.isLTE = isLTE;\n    lamb.isNot = isNot;\n    lamb.not = not;\n    \n    \n    /**\n     * Adds two numbers.\n     * @example\n     * _.add(4, 5) // => 9\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function add (a, b) {\n        return a + b;\n    }\n    \n    /**\n     * Divides two numbers.\n     * @example\n     * _.divide(5, 2) // => 2.5\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function divide (a, b) {\n        return a / b;\n    }\n    \n    /**\n     * Performs the modulo operation and should not be confused with the {@link module:lamb.remainder|remainder}.\n     * The function performs a floored division to calculate the result and not a truncated one, hence the sign of\n     * the dividend is not kept, unlike the {@link module:lamb.remainder|remainder}.\n     * @example\n     * _.modulo(5, 3) // => 2\n     * _.remainder(5, 3) // => 2\n     *\n     * _.modulo(-5, 3) // => 1\n     * _.remainder(-5, 3) // => -2\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link http://en.wikipedia.org/wiki/Modulo_operation}\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function modulo (a, b) {\n        return a - (b * Math.floor(a / b));\n    }\n    \n    /**\n     * Multiplies two numbers.\n     * @example\n     * _.multiply(5, 3) // => 15\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function multiply (a, b) {\n        return a * b;\n    }\n    \n    /**\n     * Generates a random integer between two given integers (both included).\n     * Note that no safety measure is taken if the provided arguments aren't integers, so\n     * you may end up with unexpected (not really) results.\n     * For example <code>randomInt(0.1, 1.2)</code> could be <code>2</code>.\n     * @example\n     *\n     * _.randomInt(1, 10) // => an integer >=1 && <= 10\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} min\n     * @param {Number} max\n     * @returns {Number}\n     */\n    function randomInt (min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n    \n    /**\n     * Generates an arithmetic progression of numbers starting from <code>start</code> up to,\n     * but not including, <code>limit</code>, using the given <code>step</code>.\n     * @example\n     * _.range(2, 10) // => [2, 3, 4, 5, 6, 7, 8, 9]\n     * _.range(2, 10, 0) // => [2]\n     * _.range(1, -10, -2) // => [1, -1, -3, -5, -7, -9]\n     * _.range(1, -10, 2) // => [1]\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} start\n     * @param {Number} limit\n     * @param {Number} [step=1]\n     * @returns {Number[]}\n     */\n    function range (start, limit, step) {\n        if (step === 0 || arguments.length < 2) {\n            return [start];\n        }\n    \n        if (!step) {\n            step = 1;\n        }\n    \n        var len = Math.max(Math.ceil((limit - start) / step), 0);\n        return sequence(start, len, partial(add, step));\n    }\n    \n    /**\n     * Gets the remainder of the division of two numbers.\n     * Not to be confused with the {@link module:lamb.modulo|modulo} as the remainder\n     * keeps the sign of the dividend and may lead to some unexpected results.\n     * @example\n     * // example of wrong usage of the remainder\n     * // (in this case the modulo operation should be used)\n     * var isOdd = function (n) { return _.remainder(n, 2) === 1; };\n     * isOdd(-3) // => false as -3 % 2 === -1\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link http://en.wikipedia.org/wiki/Modulo_operation}\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function remainder (a, b) {\n        return a % b;\n    }\n    \n    /**\n     * Generates a sequence of values of the desired length with the provided iteratee.\n     * The values being iterated (and received by the iteratee) are the results generated so far.\n     * @example\n     * var fibonacci = function (n, idx, list) {\n     *     return n + (list[idx - 1] || 0);\n     * };\n     *\n     * _.sequence(1, 10, fibonacci) // => [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {*} start - The starting value\n     * @param {Number} len - The desired length for the sequence\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    function sequence (start, len, iteratee, iterateeContext) {\n        var result = [start];\n    \n        for (var i = 0, limit = len - 1; i < limit; i++) {\n            result.push(iteratee.call(iterateeContext, result[i], i, result));\n        }\n    \n        return result;\n    }\n    \n    /**\n     * Subtracts two numbers.\n     * @example\n     * _.subtract(5, 3) // => 2\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function subtract (a, b) {\n        return a - b;\n    }\n    \n    lamb.add = add;\n    lamb.divide = divide;\n    lamb.modulo = modulo;\n    lamb.multiply = multiply;\n    lamb.randomInt = randomInt;\n    lamb.range = range;\n    lamb.remainder = remainder;\n    lamb.sequence = sequence;\n    lamb.subtract = subtract;\n    \n    \n    /**\n     * Builds a <code>checker</code> function meant to be used with {@link module:lamb.validate|validate}.<br/>\n     * Note that the function accepts multiple <code>keyPaths</code> as a means to compare their values. In\n     * other words all the received <code>keyPaths</code> will be passed as arguments to the <code>predicate</code>\n     * to run the test.<br/>\n     * If you want to run the same single property check with multiple properties, you should build\n     * multiple <code>checker</code>s and combine them with {@link module:lamb.validate|validate}.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         username: \"jdoe\",\n     *         password: \"abc123\",\n     *         passwordConfirm: \"abc123\"\n     *     }\n     * };\n     * var pwdMatch = _.checker(\n     *     _.is,\n     *     \"Passwords don't match\",\n     *     [\"login.password\", \"login.passwordConfirm\"]\n     * );\n     *\n     * pwdMatch(user) // => []\n     *\n     * user.login.passwordConfirm = \"avc123\";\n     *\n     * pwdMatch(user) // => [\"Passwords don't match\", [\"login.password\", \"login.passwordConfirm\"]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Function} predicate - The predicate to test the object properties\n     * @param {String} message - The error message\n     * @param {String[]} keyPaths - The array of property names, or {@link module:lamb.getFromPath|paths}, to test.\n     * @param {String} [pathSeparator=\".\"]\n     * @returns {Array<String, String[]>} An error in the form <code>[\"message\", [\"propertyA\", \"propertyB\"]]</code> or an empty array.\n     */\n    function checker (predicate, message, keyPaths, pathSeparator) {\n        return function (obj) {\n            var errors = [];\n            var getValues = partial(getFromPath, obj, _, pathSeparator);\n    \n            return predicate.apply(obj, keyPaths.map(getValues)) ? [] : [message, keyPaths];\n        };\n    }\n    \n    /**\n     * Returns the value of the object property with the given key.\n     * @example\n     * var user {name: \"John\"};\n     *\n     * _.get(user, \"name\") // => \"John\";\n     * _.get(user, \"surname\") // => undefined\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {*}\n     */\n    function get (obj, key) {\n        return obj[key];\n    }\n    \n    /**\n     * Gets a nested property value from an object using the given path.<br/>\n     * The path is a string with property names separated by dots by default, but\n     * it can be defined with the optional third parameter.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         user.name: \"jdoe\",\n     *         password: \"abc123\"\n     *     }\n     * };\n     *\n     * // same as _.get if no path is involved\n     * _.getFromPath(user, \"name\") // => \"John\"\n     *\n     * _.getFromPath(user, \"login.password\") // => \"abc123\";\n     * _.getFromPath(user, \"login/user.name\", \"/\") // => \"jdoe\"\n     * _.getFromPath(user, \"name.foo\") // => undefined\n     * _.getFromPath(user, \"name.foo.bar\") // => throws a TypeError\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object|ArrayLike} obj\n     * @param {String} path\n     * @param {String} [separator=\".\"]\n     * @returns {*}\n     */\n    function getFromPath (obj, path, separator) {\n        return path.split(separator || \".\").reduce(get, obj);\n    }\n    \n    /**\n     * A curried version of {@link module:lamb.get|get}.<br/>\n     * Receives a property name and builds a function expecting the object from which we want to retrieve the property.\n     * @example\n     * var user1 = {name: \"john\"};\n     * var user2 = {name: \"jane\"};\n     * var getName = _.getKey(\"name\");\n     *\n     * getName(user1) // => \"john\"\n     * getName(user2) // => \"jane\"\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {String} key\n     * @returns {Function}\n     */\n    var getKey = _curry(get, 2, true);\n    \n    /**\n     * Verifies the existence of a property in an object.\n     * @example\n     * var user1 = {name: \"john\"};\n     *\n     * _.has(user1, \"name\") // => true\n     * _.has(user1, \"surname\") // => false\n     * _.has(user1, \"toString\") // => true\n     *\n     * var user2 = Object.create(null);\n     *\n     * // not inherited through the prototype chain\n     * _.has(user2, \"toString\") // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    function has (obj, key) {\n        return key in obj;\n    }\n    \n    /**\n     * Curried version of {@link module:lamb.has|has}.<br/>\n     * Returns a function expecting the object to check against the given key.\n     * @example\n     * var user1 = {name: \"john\"};\n     * var user2 = {};\n     * var hasName = _.hasKey(\"name\");\n     *\n     * hasName(user1) // => true\n     * hasName(user2) // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {String} key\n     * @returns {Function}\n     */\n    var hasKey = _curry(has, 2, true);\n    \n    /**\n     * Builds a function expecting an object to check against the given key / value pair.\n     * @example\n     * var hasTheCorrectAnswer = _.hasKeyValue(\"answer\", 42);\n     *\n     * hasTheCorrectAnswer({answer: 2}) // false\n     * hasTheCorrectAnswer({answer: 42}) // true\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {String} key\n     * @param {*} value\n     * @returns {Function}\n     */\n    var hasKeyValue = function (key, value) {\n        return compose(partial(is, value), getKey(key));\n    };\n    \n    /**\n     * Verifies if an object has the specified property and that the property isn't inherited through\n     * the prototype chain.<br/>\n     * @example <caption>Comparison con <code>has</code>.</caption>\n     * var user = {name: \"john\"};\n     *\n     * _.has(user, \"name\") // => true\n     * _.has(user, \"surname\") // => false\n     * _.has(user, \"toString\") // => true\n     *\n     * _.hasOwn(user, \"name\") // => true\n     * _.hasOwn(user, \"surname\") // => false\n     * _.hasOwn(user, \"toString\") // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    var hasOwn = generic(_objectProto.hasOwnProperty);\n    \n    /**\n     * Curried version of {@link module:lamb.hasOwn|hasOwn}.<br/>\n     * Returns a function expecting the object to check against the given key.\n     * @example\n     * var user = {name: \"john\"};\n     * var hasOwnName = _.hasOwnKey(\"name\");\n     * var hasOwnToString = _.hasOwnToString(\"toString\");\n     *\n     * hasOwnName(user) // => true\n     * hasOwnToString(user) // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {String} key\n     * @returns {Function}\n     */\n    var hasOwnKey = _curry(hasOwn, 2, true);\n    \n    /**\n     * Returns an object containing only the specified properties of the given object.<br/>\n     * Non existent properties will be ignored.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.pick(user, [\"name\", \"age\"]) // => {\"name\": \"john\", \"age\": 30};\n     * _.pick(user, [\"name\", \"email\"]) // => {\"name\": \"john\"}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} source\n     * @param {String[]} whitelist\n     * @returns {Object}\n     */\n    function pick (source, whitelist) {\n        var result = {};\n    \n        whitelist.forEach(function (key) {\n            if (key in source) {\n                result[key] = source[key];\n            }\n        });\n    \n        return result;\n    }\n    \n    /**\n     * Builds a function expecting an object whose properties will be checked against the given predicate.<br/>\n     * The properties satisfying the predicate will be included in the resulting object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     * var pickIfIstring = _.pickIf(_.isType(\"String\"));\n     *\n     * pickIfIstring(user) // => {name: \"john\", surname: \"doe\"}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {ObjectIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    function pickIf (predicate, predicateContext) {\n        return function (source) {\n            var result = {};\n    \n            for (var key in source) {\n                if (predicate.call(predicateContext, source[key], key, source)) {\n                    result[key] = source[key];\n                }\n            }\n    \n            return result;\n        };\n    }\n    \n    /**\n     * Returns a copy of the source object without the specified properties.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.skip(user, [\"name\", \"age\"]) // => {surname: \"doe\"};\n     * _.skip(user, [\"name\", \"email\"]) // => {surname: \"doe\", age: 30};\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} source\n     * @param {String[]} blacklist\n     * @returns {Object}\n     */\n    function skip (source, blacklist) {\n        var result = {};\n    \n        for (var key in source) {\n            if (blacklist.indexOf(key) === -1) {\n                result[key] = source[key];\n            }\n        }\n    \n        return result;\n    }\n    \n    /**\n     * Builds a function expecting an object whose properties will be checked against the given predicate.<br/>\n     * The properties satisfying the predicate will be omitted in the resulting object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     * var skipIfIstring = _.skipIf(_.isType(\"String\"));\n     *\n     * skipIfIstring(user) // => {age: 30}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {ObjectIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    function skipIf (predicate, predicateContext) {\n        return pickIf(not(predicate), predicateContext);\n    }\n    \n    /**\n     * Validates an object with the given list of {@link module:lamb.checker|checker} functions.\n     * @example\n     * var hasContent = function (s) { return s.trim().length > 0; };\n     * var isAdult = function (age) { return age >= 18; };\n     * var userCheckers = [\n     *     _.checker(hasContent, \"Name is required\", [\"name\"]),\n     *     _.checker(hasContent, \"Surname is required\", [\"surname\"]),\n     *     _.checker(isAdult, \"Must be at least 18 years old\", [\"age\"])\n     * ];\n     *\n     * var user1 = {name: \"john\", surname: \"doe\", age: 30};\n     * var user2 = {name: \"jane\", surname: \"\", age: 15};\n     *\n     * _.validate(user1, userCheckers) // => []\n     * _.validate(user2, userCheckers) // => [[\"Surname is required\", [\"surname\"]], [\"Must be at least 18 years old\", [\"age\"]]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @param {Function[]} checkers\n     * @returns {Array<Array<String, String[]>>} An array of errors in the form returned by {@link module:lamb.checker|checker}, or an empty array.\n     */\n    function validate (obj, checkers) {\n        return checkers.reduce(function (errors, checker) {\n            var result = checker(obj);\n            result.length && errors.push(result);\n            return errors;\n        }, []);\n    }\n    \n    /**\n     * A curried version of {@link module:lamb.validate|validate} accepting a list of {@link module:lamb.checker|checkers} and\n     * returning a function expecting the object to validate.\n     * @example\n     * var hasContent = function (s) { return s.trim().length > 0; };\n     * var isAdult = function (age) { return age >= 18; };\n     * var userCheckers = [\n     *     _.checker(hasContent, \"Name is required\", [\"name\"]),\n     *     _.checker(hasContent, \"Surname is required\", [\"surname\"]),\n     *     _.checker(isAdult, \"Must be at least 18 years old\", [\"age\"])\n     * ];\n     * var validateUser = _.validateWith(userCheckers);\n     *\n     * var user1 = {name: \"john\", surname: \"doe\", age: 30};\n     * var user2 = {name: \"jane\", surname: \"\", age: 15};\n     *\n     * validateUser(user1) // => []\n     * validateUser(user2) // => [[\"Surname is required\", [\"surname\"]], [\"Must be at least 18 years old\", [\"age\"]]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {Function[]} checkers\n     * @returns {Function}\n     */\n    var validateWith = _curry(validate, 2, true);\n    \n    /**\n     * Generates an array with the values of the enumerable own properties of the given object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.values(user) // => [\"john\", \"doe\", 30]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @returns {Array}\n     */\n    function values (obj) {\n        var keys = Object.keys(obj);\n        var keysLen = keys.length;\n        var result = [];\n    \n        for (var i = 0; i < keysLen; i++) {\n            result[i] = obj[keys[i]];\n        }\n    \n        return result;\n    }\n    \n    lamb.checker = checker;\n    lamb.get = get;\n    lamb.getFromPath = getFromPath;\n    lamb.getKey = getKey;\n    lamb.has = has;\n    lamb.hasKey = hasKey;\n    lamb.hasKeyValue = hasKeyValue;\n    lamb.hasOwn = hasOwn;\n    lamb.hasOwnKey = hasOwnKey;\n    lamb.pick = pick;\n    lamb.pickIf = pickIf;\n    lamb.skip = skip;\n    lamb.skipIf = skipIf;\n    lamb.validate = validate;\n    lamb.validateWith = validateWith;\n    lamb.values = values;\n    \n    \n    function _getPadding (source, char, len) {\n        return repeat(char[0] || \" \", Math.ceil(len - source.length));\n    }\n    \n    /**\n     * Pads a string to the desired length with the given char starting from the beginning of the string.\n     * @example\n     * _.padLeft(\"foo\", \"-\", 0) // => \"foo\"\n     * _.padLeft(\"foo\", \"-\", -1) // => \"foo\"\n     * _.padLeft(\"foo\", \"-\", 5) // => \"--foo\"\n     * _.padLeft(\"foo\", \"-\", 3) // => \"foo\"\n     * _.padLeft(\"foo\", \"ab\", 7) // => \"aaaafoo\"\n     * _.padLeft(\"foo\", \"\", 5) // => \"  foo\"\n     * _.padLeft(\"\", \"-\", 5) // => \"-----\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {String} source\n     * @param {String} [char=\" \"] - The padding char. If a string is passed only the first char is used.\n     * @param {Number} len\n     * @returns {String}\n     */\n    function padLeft (source, char, len) {\n        return _getPadding(source, char, len) + source;\n    }\n    \n    /**\n     * Pads a string to the desired length with the given char starting from the end of the string.\n     * @example\n     * _.padRight(\"foo\", \"-\", 0) // => \"foo\"\n     * _.padRight(\"foo\", \"-\", -1) // => \"foo\"\n     * _.padRight(\"foo\", \"-\", 5) // => \"foo--\"\n     * _.padRight(\"foo\", \"-\", 3) // => \"foo\"\n     * _.padRight(\"foo\", \"ab\", 7) // => \"fooaaaa\"\n     * _.padRight(\"foo\", \"\", 5) // => \"foo  \"\n     * _.padRight(\"\", \"-\", 5) // => \"-----\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {String} source\n     * @param {String} [char=\" \"] - The padding char. If a string is passed only the first char is used.\n     * @param {Number} len\n     * @returns {String}\n     */\n    function padRight (source, char, len) {\n        return source + _getPadding(source, char, len);\n    }\n    \n    /**\n     * Builds a new string by repeating the source string the desired amount of times.<br/>\n     * Note that unlike the current ES6 proposal for [String.prototype.repeat]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat},\n     * this function doesn't throw a RangeError if <code>count</code> is negative, but returns an empty string instead.\n     * @example\n     * _.repeat(\"Hello\", -1) // => \"\"\n     * _.repeat(\"Hello\", 1) // => \"Hello\"\n     * _.repeat(\"Hello\", 3) // => \"HelloHelloHello\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {String} source\n     * @param {Number} count\n     * @returns {String}\n     */\n    function repeat (source, count) {\n        var result = \"\";\n    \n        for (var i = 0; i < count; i++) {\n            result += source;\n        }\n    \n        return result;\n    }\n    \n    /**\n     * Builds a predicate expecting a string to test against the given regular expression pattern.\n     * @example\n     * var hasNumbersOnly = _.testWith(/^\\d+$/);\n     *\n     * hasNumbersOnly(\"123\") // => true\n     * hasNumbersOnly(\"123 Kg\") // => false\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {RegExp} pattern\n     * @returns {Function}\n     */\n    function testWith (pattern) {\n        return _reProto.test.bind(pattern);\n    }\n    \n    lamb.padLeft = padLeft;\n    lamb.padRight = padRight;\n    lamb.repeat = repeat;\n    lamb.testWith = testWith;\n    \n    \n    /**\n     * Verifies if a value is <code>null</code> or <code>undefined</code>.\n     * @example\n     * _.isNil(NaN) // => false\n     * _.isNil({}) // => false\n     * _.isNil(null) // => true\n     * _.isNil(void 0) // => true\n     * _.isNil() // => true\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @function\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    var isNil = anyOf(isNull, isUndefined);\n    \n    /**\n     * Verifies if a value is <code>null</code>.\n     * @example\n     * _.isNull(null) // => true\n     * _.isNull(void 0) // => false\n     * _.isNull(false) // => false\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isNull (value) {\n        return value === null;\n    }\n    \n    /**\n     * Builds a predicate that expects a value to check against the specified type.\n     * @example\n     * var isString = _.isType(\"String\");\n     *\n     * isString(\"Hello\") // => true\n     * isString(new String(\"Hi\")) // => true\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @param {String} type\n     * @returns {Function}\n     */\n    function isType (type) {\n        return function (value) {\n            return typeOf(value) === type;\n        };\n    }\n    \n    /**\n     * Verifies if a value is <code>undefined</code>.\n     * @example\n     * _.isUndefined(null) // => false\n     * _.isUndefined(void 0) // => true\n     * _.isUndefined(false) // => false\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isUndefined (value) {\n        // using void because undefined could be theoretically shadowed\n        return value === void 0;\n    }\n    \n    /**\n     * Retrieves the \"type tag\" from the given value.\n     * @example\n     * _.typeOf(Object.prototype.toString) // => \"Function\"\n     * _.typeOf(/a/) // => \"RegExp\"\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @param {*} value\n     * @returns {String}\n     */\n    function typeOf (value) {\n        return _objectProto.toString.call(value).replace(/^\\[\\w+\\s+|\\]$/g, \"\");\n    }\n    \n    lamb.isNil = isNil;\n    lamb.isNull = isNull;\n    lamb.isType = isType;\n    lamb.isUndefined = isUndefined;\n    lamb.typeOf = typeOf;\n    \n    /* istanbul ignore next */\n    if (typeof exports === \"object\") {\n        module.exports = lamb;\n    } else if (typeof define === \"function\" && define.amd) {\n        define(function() { return lamb; });\n    } else {\n        host.lamb = lamb;\n    }\n}(this);\n\n/**\n * @callback AccumulatorCallback\n * @global\n * @param {*} previousValue The value returned it the last execution of the accumulator or, in the first iteration, the {@link module:lamb.reduce|initialValue} if supplied.\n * @param {*} currentValue The value being processed in the current iteration.\n * @param {Number} idx - The index of the element being processed.\n * @param {ArrayLike} arrayLike - The list being traversed.\n */\n\n/**\n * The built-in arguments object.\n * @typedef {arguments} arguments\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments|arguments} in Mozilla documentation.\n */\n\n/**\n * The built-in Array object.\n * @typedef {Array} Array\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array|Array} in Mozilla documentation.\n */\n\n/**\n * Any array-like object.\n * @typedef {Array|String|arguments|?} ArrayLike\n * @global\n */\n\n/**\n * The built-in Boolean object.\n * @typedef {Boolean} Boolean\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean|Boolean} in Mozilla documentation.\n */\n\n/**\n * The built-in Date object.\n * @typedef {Date} Date\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date|Date} in Mozilla documentation.\n */\n\n/**\n * The built-in Function object.\n * @typedef {Function} function\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function|Function} and\n *      {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions|Functions} in Mozilla documentation.\n */\n\n/**\n * @callback ListIteratorCallback\n * @global\n * @param {*} element - The element being evaluated.\n * @param {Number} idx - The index of the element within the list.\n * @param {ArrayLike} arrayLike - The list being traversed.\n */\n\n/**\n * The built-in Number object.\n * @typedef {Number} Number\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number} in Mozilla documentation.\n */\n\n/**\n * The built-in Object object.\n * @typedef {Object} Object\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object|Object} in Mozilla documentation.\n */\n\n/**\n * @callback ObjectIteratorCallback\n * @global\n * @param {*} value - The value of the current property.\n * @param {String} key - The property name.\n * @param {Object} source - The object being traversed.\n */\n\n/**\n * The built-in RegExp object.\n * @typedef {RegExp} RegExp\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp|RegExp} in Mozilla documentation.\n */\n\n/**\n * The built-in String object.\n * @typedef {String} String\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String|String} in Mozilla documentation.\n */\n"],"sourceRoot":"/source/"}