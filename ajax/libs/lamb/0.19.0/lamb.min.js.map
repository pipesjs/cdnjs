{"version":3,"sources":["lamb.js"],"names":["host","always","value","compose","functions","arguments","args","len","length","apply","this","identity","partial","fn","slice","boundArg","lastArgumentIdx","newArgs","argsLen","i","_","push","_findSliceEndIndex","arrayLike","predicate","predicateContext","idx","call","_flatten","array","output","forEach","Array","isArray","contains","fromIndex","isIn","difference","rest","shallowFlatten","isInRest","filter","not","dropWhile","filterWith","find","result","element","findIndex","flatMapWith","iteratee","iterateeContext","flatMap","flatten","getAt","index","Math","floor","group","key","groupBy","intersection","uniques","item","every","isSVZ","list","mapWith","map","partition","el","partitionWith","pluck","getKey","pluckKey","reverse","setAt","clamp","_arrayProto","concat","takeWhile","transpose","j","minLen","min","seen","_comparer","a","b","String","_compareWith","criteria","isDescSort","criterion","compare","isDescending","_getInsertionIndex","comparer","start","end","pivot","_makeCriteria","sorters","_makeCriterion","_sorter","Object","reader","insert","splice","sort","data","sortWith","_currier","arity","isRightCurry","slicer","argsHolder","_curry","isAutoCurry","aritize","binary","curry","curryRight","curryable","curryableRight","debounce","timespan","timeoutID","context","debounced","clearTimeout","setTimeout","flip","getArgAt","invokerOn","target","methodName","method","type","invoker","boundArgs","mapArgs","mapper","tapArgs","readers","throttle","lastCall","now","Date","unary","adapter","isUndefined","allOf","predicates","anyOf","some","condition","trueFn","falseFn","applyArgsTo","applyArgs","is","isGT","isGTE","isLT","isLTE","add","n","max","divide","modulo","multiply","randomInt","random","range","limit","step","ceil","sequence","remainder","subtract","_immutable","obj","indexOf","freeze","getOwnPropertyNames","isNull","_keyToPair","_merge","getKeys","reduce","source","checker","message","keyPaths","pathSeparator","getValues","getPathIn","enumerables","keys","fromPairs","pairsList","pair","getIn","getPath","path","separator","split","has","immutable","make","values","valuesLen","pick","whitelist","pickIf","setIn","setKey","skip","blacklist","skipIf","validate","checkers","errors","_getPadding","char","repeat","padLeft","padRight","count","testWith","pattern","_reProto","test","bind","isType","typeName","_objectProto","toString","replace","lamb","create","_version","prototype","RegExp","generic","Function","reduceRight","drop","dropN","head","init","last","tail","take","takeN","union","zip","zipWithIndex","sorter","sorterDesc","pipe","wrap","isNot","_pairsFrom","_tearFrom","_valuesFrom","hasKey","hasKeyValue","hasOwn","hasOwnProperty","hasOwnKey","merge","mergeOwn","ownPairs","ownValues","pairs","tear","tearOwn","validateWith","isNil","exports","module","define","amd"],"mappings":"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","file":"lamb.min.js","sourcesContent":["/**\n * @overview lamb - A lightweight, and docile, JavaScript library to help embracing functional programming.\n * @author Andrea Scartabelli <andrea.scartabelli@gmail.com>\n * @version 0.19.0\n * @module lamb\n * @license MIT\n * @preserve\n */\n!function (host) {\n    \"use strict\";\n\n    var lamb = Object.create(null);\n\n    /**\n     * The current module version.\n     * @memberof module:lamb\n     * @private\n     * @category Core\n     * @type String\n     */\n    lamb._version =  \"0.19.0\";\n\n    // alias used as a placeholder argument for partial application\n    var _ = lamb;\n\n    // some prototype shortcuts for internal use\n    var _arrayProto = Array.prototype;\n    var _objectProto = Object.prototype;\n    var _reProto = RegExp.prototype;\n\n    /**\n     * Builds a function that returns a constant value.\n     * It's actually the simplest form of the K combinator or Kestrel.\n     * @example\n     * var truth = _.always(true);\n     *\n     * truth() // => true\n     * truth(false) // => true\n     * truth(1, 2) // => true\n     *\n     * // the value being returned is actually the\n     * // very same value passed to the function\n     * var foo = {bar: \"baz\"};\n     * var alwaysFoo = _.always(foo);\n     *\n     * alwaysFoo() === foo // => true\n     *\n     * @memberof module:lamb\n     * @category Core\n     * @see [SKI combinator calculus]{@link https://en.wikipedia.org/wiki/SKI_combinator_calculus}\n     * @param {*} value\n     * @returns {Function}\n     */\n    function always (value) {\n        return function () {\n            return value;\n        };\n    }\n\n    /**\n     * Returns a function that is the composition of the functions given as parameters.\n     * Each function consumes the result of the function that follows.\n     * @example\n     * var sayHi = function (name) { return \"Hi, \" + name; };\n     * var capitalize = function (s) {\n     *     return s[0].toUpperCase() + s.substr(1).toLowerCase();\n     * };\n     * var fixNameAndSayHi = _.compose(sayHi, capitalize);\n     *\n     * sayHi(\"bOb\") // => \"Hi, bOb\"\n     * fixNameAndSayHi(\"bOb\") // \"Hi, Bob\"\n     *\n     * var getName = _.getKey(\"name\");\n     * var users = [{name: \"fred\"}, {name: \"bOb\"}];\n     * var sayHiToUser = _.compose(fixNameAndSayHi, getName);\n     *\n     * users.map(sayHiToUser) // [\"Hi, Fred\", \"Hi, Bob\"]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    function compose () {\n        var functions = arguments;\n\n        return function () {\n            var args = arguments;\n            var len = functions.length;\n\n            while (len--) {\n                args = [functions[len].apply(this, args)];\n            }\n\n            return args[0];\n        };\n    }\n\n    /**\n     * Creates generic functions out of methods.\n     * @memberof module:lamb\n     * @category Core\n     * @author A very little change on a great idea by [Irakli Gozalishvili]{@link https://github.com/Gozala/}. Thanks for this *beautiful* one-liner (never liked your \"unbind\" naming choice, though).\n     * @function\n     * @example\n     * // Lamb's \"filter\" is actually implemented like this\n     * var filter = _.generic(Array.prototype.filter);\n     * var isLowerCase = function (s) { return s.toLowerCase() === s; };\n     *\n     * filter([\"Foo\", \"bar\", \"baZ\"], isLowerCase) // => [\"bar\"]\n     *\n     * // the function will work with any array-like object\n     * filter(\"fooBAR\", isLowerCase) // => [\"f\", \"o\", \"o\"]\n     *\n     * @param {Function} method\n     * @returns {Function}\n     */\n    var generic = Function.bind.bind(Function.call);\n\n    /**\n     * The I combinator. Any value passed to the function is simply returned as it is.\n     * @example\n     * var foo = {bar: \"baz\"};\n     *\n     * _.identity(foo) === foo // true\n     *\n     * @memberof module:lamb\n     * @category Core\n     * @see [SKI combinator calculus]{@link https://en.wikipedia.org/wiki/SKI_combinator_calculus}\n     * @param {*} value\n     * @returns {*} The value passed as parameter.\n     */\n    function identity (value) {\n        return value;\n    }\n\n    /**\n     * Builds a partially applied function. The <code>lamb</code> object itself can be used as a placeholder argument:\n     * it's useful to alias it as <code>_</code> or <code>__</code>.\n     * @example\n     * var weights = [\"2 Kg\", \"10 Kg\", \"1 Kg\", \"7 Kg\"];\n     * var parseInt10 = _.partial(parseInt, _, 10);\n     *\n     * weights.map(parseInt10) // => [2, 10, 1, 7]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {...*} args\n     * @returns {Function}\n     */\n    function partial (fn) {\n        var args = slice(arguments, 1);\n\n        return function () {\n            var lastArgumentIdx = 0;\n            var newArgs = [];\n            var argsLen = args.length;\n\n            for (var i = 0, boundArg; i < argsLen; i++) {\n                boundArg = args[i];\n                newArgs[i] = boundArg === _ ? arguments[lastArgumentIdx++] : boundArg;\n            }\n\n            for (var len = arguments.length; lastArgumentIdx < len; lastArgumentIdx++) {\n                newArgs.push(arguments[lastArgumentIdx]);\n            }\n\n            return fn.apply(this, newArgs);\n        };\n    }\n\n    lamb.always = always;\n    lamb.compose = compose;\n    lamb.generic = generic;\n    lamb.identity = identity;\n    lamb.partial = partial;\n\n\n    /**\n     * Builds an array comprised of all values of the array-like object passing the <code>predicate</code> test.<br/>\n     * It's a generic version of [Array.prototype.filter]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter}.\n     * @example\n     * var isLowerCase = function (s) { return s.toLowerCase() === s; };\n     *\n     * _.filter([\"Foo\", \"bar\", \"baZ\"], isLowerCase) // => [\"bar\"]\n     *\n     * // the function will work with any array-like object\n     * _.filter(\"fooBAR\", isLowerCase) // => [\"f\", \"o\", \"o\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Array}\n     */\n    var filter = generic(_arrayProto.filter);\n\n    /**\n     * Executes the provided <code>iteratee</code> for each element of the given array-like object.<br/>\n     * It's a generic version of [Array.prototype.forEach]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach}.\n     * @example <caption>Adding a CSS class to all elements of a NodeList in a browser environment</caption>\n     * var addClass = function (className) {\n     *     return function (element) {\n     *         element.classList.add(className);\n     *     };\n     * };\n     * var paragraphs = document.querySelectorAll(\"#some-container p\");\n     *\n     * _.forEach(paragraphs, addClass(\"main\"));\n     * // each \"p\" element in the container will have the \"main\" class now\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     */\n    var forEach = generic(_arrayProto.forEach);\n\n    /**\n     * Creates an array from the results of the provided <code>iteratee</code>.<br/>\n     * It's a generic version of [Array.prototype.map]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map}.\n     * @example\n     * function getSquareRoots () {\n     *     return _.map(arguments, Math.sqrt);\n     * }\n     *\n     * getSquareRoots(4, 9, 16) // => [2, 3, 4]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    var map = generic(_arrayProto.map);\n\n    /**\n     * Reduces (or folds) the values of an array-like object, starting from the first, to a new value using the provided <code>accumulator</code> function.<br/>\n     * It's a generic version of [Array.prototype.reduce]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce}.\n     * @example\n     * _.reduce([1, 2, 3, 4], _.add) // => 10\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {AccumulatorCallback} accumulator\n     * @param {*} [initialValue]\n     * @returns {*}\n     */\n    var reduce = generic(_arrayProto.reduce);\n\n    /**\n     * Same as {@link module:lamb.reduce|reduce}, but starts the fold operation from the last element instead.<br/>\n     * It's a generic version of [Array.prototype.reduceRight]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight}.\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {AccumulatorCallback} accumulator\n     * @param {*} [initialValue]\n     * @returns {*}\n     */\n    var reduceRight = generic(_arrayProto.reduceRight);\n\n    /**\n     * Builds an array by extracting a portion of an array-like object.<br/>\n     * It's a generic version of [Array.prototype.slice]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice}.\n     * @example\n     * _.slice([\"foo\", \"bar\", \"baz\"], 0, 2) // => [\"foo\", \"bar\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike - Any array like object.\n     * @param {Number} [start=0] - Zero-based index at which to begin extraction.\n     * @param {Number} [end=arrayLike.length] - Zero-based index at which to end extraction. Extracts up to but not including end.\n     * @returns {Array}\n     */\n    var slice = generic(_arrayProto.slice);\n\n    lamb.filter = filter;\n    lamb.forEach = forEach;\n    lamb.map = map;\n    lamb.reduce = reduce;\n    lamb.reduceRight = reduceRight;\n    lamb.slice = slice;\n\n\n    function _findSliceEndIndex (arrayLike, predicate, predicateContext) {\n        var idx = -1;\n        var len = arrayLike.length;\n\n        while (++idx < len && predicate.call(predicateContext, arrayLike[idx], idx, arrayLike));\n\n        return idx;\n    }\n\n    function _flatten (array, output) {\n        array.forEach(function (value) {\n            if (Array.isArray(value)) {\n                _flatten(value, output);\n            } else {\n                output.push(value);\n            }\n        });\n\n        return output;\n    }\n\n    /**\n     * Builds a predicate to check if an array-like object contains the given value.<br/>\n     * Please note that the equality test is made with {@link module:lamb.isSVZ|isSVZ}; so you can\n     * check for <code>NaN</code>, but <code>0</code> and <code>-0</code> are the same value.<br/>\n     * See also {@link module:lamb.isIn|isIn} for an uncurried version.\n     * @example\n     * var containsNaN = _.contains(NaN, 0);\n     *\n     * containsNaN([0, 1, 2, 3, NaN]) // => true\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {*} value\n     * @param {Number} [fromIndex=0] The position at which to begin searching for the given value.\n     * @returns {Function}\n     */\n    function contains (value, fromIndex) {\n        return function (arrayLike) {\n            return isIn(arrayLike, value, fromIndex);\n        };\n    }\n\n    /**\n     * Returns an array of items present only in the first of the given arrays.<br/>\n     * Note that since version <code>0.13.0</code> this function uses the [\"SameValueZero\" comparison]{@link module:lamb.isSVZ|isSVZ}.\n     * @example\n     * var a1 = [1, 2, 3, 4];\n     * var a2 = [2, 4, 5];\n     * var a3 = [4, 5, 3, 1];\n     *\n     * _.difference(a1, a2) // => [1, 3]\n     * _.difference(a1, a2, a3) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {Array} array\n     * @param {...Array} other\n     * @returns {Array}\n     */\n    function difference (array) {\n        var rest = shallowFlatten(slice(arguments, 1));\n        var isInRest = partial(isIn, rest, _, 0);\n        return array.filter(not(isInRest));\n    }\n\n    /**\n     * Builds an array without the first <code>n</code> elements of the given array or array-like object.\n     * Note that, being this only a shortcut for a specific use case of {@link module:lamb.slice|slice},\n     * <code>n</code> can be a negative number.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.drop(arr, 2) // => [3, 4, 5]\n     * _.drop(arr, -1) // => [5]\n     * _.drop(arr, -10) // => [1, 2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.dropN|dropN}\n     * @see {@link module:lamb.take|take}, {@link module:lamb.takeN|takeN}\n     * @see {@link module:lamb.takeWhile|takeWhile}, {@link module:lamb.dropWhile|dropWhile}\n     * @param {ArrayLike} arrayLike\n     * @param {Number} n\n     * @returns {Array}\n     */\n    var drop = binary(slice);\n\n    /**\n     * A curried version of {@link module:lamb.drop|drop} that expects the number of elements\n     * to drop to build a function waiting for the list to take the elements from.\n     * See the note and examples for {@link module:lamb.drop|drop} about passing a negative <code>n</code>.\n     * @example\n     * var drop2 = _.dropN(2);\n     *\n     * drop2([1, 2, 3, 4, 5]) // => [3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.drop|drop}\n     * @see {@link module:lamb.take|take}, {@link module:lamb.takeN|takeN}\n     * @see {@link module:lamb.takeWhile|takeWhile}, {@link module:lamb.dropWhile|dropWhile}\n     * @param {Number} n\n     * @returns {Function}\n     */\n    var dropN = _curry(drop, 2, true);\n\n    /**\n     * Builds a function that drops the first <code>n</code> elements satisfying a predicate from an array or array-like object.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var dropWhileIsEven = _.dropWhile(isEven);\n     *\n     * dropWhileIsEven([2, 4, 6, 8]) // => []\n     * dropWhileIsEven([2, 4, 7, 8]) // => [7, 8]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.takeWhile|takeWhile}\n     * @see {@link module:lamb.drop|drop}, {@link module:lamb.dropN|dropN}\n     * @see {@link module:lamb.take|take}, {@link module:lamb.takeN|takeN}\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    function dropWhile (predicate, predicateContext) {\n        return function (arrayLike) {\n            return slice(arrayLike, _findSliceEndIndex(arrayLike, predicate, predicateContext));\n        };\n    }\n\n    /**\n     * Returns a partial application of {@link module:lamb.filter|filter} that uses the given predicate and\n     * the optional context to build a function expecting the array-like object to act upon.\n     * @example\n     * var isLowerCase = function (s) { return s.toLowerCase() === s; };\n     * var getLowerCaseEntries = _.filterWith(isLowerCase);\n     *\n     * getLowerCaseEntries([\"Foo\", \"bar\", \"baZ\"]) // => [\"bar\"]\n     *\n     * // array-like objects can be used as well\n     * getLowerCaseEntries(\"fooBAR\") // => [\"f\", \"o\", \"o\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    function filterWith (predicate, predicateContext) {\n        return partial(filter, _, predicate, predicateContext);\n    }\n\n    /**\n     * Searches for an element satisfying the predicate in the given array-like object and returns it if\n     * the search is successful. Returns <code>undefined</code> otherwise.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 40}\n     * ];\n     *\n     * _.find(persons, _.hasKeyValue(\"age\", 40)) // => {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40}\n     * _.find(persons, _.hasKeyValue(\"age\", 41)) // => undefined\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {*}\n     */\n    function find (arrayLike, predicate, predicateContext) {\n        var result;\n\n        for (var i = 0, len = arrayLike.length, element; i < len; i++) {\n            element = arrayLike[i];\n\n            if (predicate.call(predicateContext, element, i, arrayLike)) {\n                result = element;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Searches for an element satisfying the predicate in the given array-like object and returns its\n     * index if the search is successful. Returns <code>-1</code> otherwise.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 40}\n     * ];\n     *\n     * _.findIndex(persons, _.hasKeyValue(\"age\", 40)) // => 1\n     * _.findIndex(persons, _.hasKeyValue(\"age\", 41)) // => -1\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Number}\n     */\n    function findIndex (arrayLike, predicate, predicateContext) {\n        var result = -1;\n\n        for (var i = 0, len = arrayLike.length; i < len; i++) {\n            if (predicate.call(predicateContext, arrayLike[i], i, arrayLike)) {\n                result = i;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Similar to {@link module:lamb.map|map}, but if the mapping function returns an array this will\n     * be concatenated, rather than pushed, to the final result.\n     * @example <caption>showing the difference with <code>map</code></caption>\n     * var words = [\"foo\", \"bar\"];\n     * var toCharArray = function (s) { return s.split(\"\"); };\n     *\n     * _.map(words, toCharArray) // => [[\"f\", \"o\", \"o\"], [\"b\", \"a\", \"r\"]]\n     * _.flatMap(words, toCharArray) // => [\"f\", \"o\", \"o\", \"b\", \"a\", \"r\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {Array} array\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    var flatMap = compose(shallowFlatten, map);\n\n    /**\n     * Builds a partial application of {@link module:lamb.flatMap|flatMap} using the given iteratee\n     * and the optional context. The resulting function expects the array to act upon.\n     * @example\n     * var toCharArray = function (s) { return s.split(\"\"); };\n     * var wordsToCharArray = _.flatMapWith(toCharArray);\n     *\n     * wordsToCharArray([\"foo\", \"bar\"]) // => [\"f\", \"o\", \"o\", \"b\", \"a\", \"r\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Function}\n     */\n    function flatMapWith (iteratee, iterateeContext) {\n        return partial(flatMap, _, iteratee, iterateeContext);\n    }\n\n    /**\n     * Flattens an array. See also {@link module:lamb.shallowFlatten|shallowFlatten}.\n     * @example <caption>showing the difference with <code>shallowFlatten</code></caption>\n     * var arr = [1, 2, [3, 4, [5, 6]], 7, 8];\n     *\n     * _.flatten(arr) // => [1, 2, 3, 4, 5, 6, 7, 8]\n     * _.shallowFlatten(arr) // => [1, 2, 3, 4, [5, 6], 7, 8]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {Array} array\n     * @returns {Array}\n     */\n    function flatten (array) {\n        return _flatten(array, []);\n    }\n\n    /**\n     * Retrieves the element at the given index in an array-like object.<br/>\n     * Like {@link module:lamb.slice|slice} the index can be negative.<br/>\n     * If the index isn't supplied, or if its value isn't an integer within the array-like bounds,\n     * the function will return <code>undefined</code>.\n     * @example\n     * var getFifthElement = _.getAt(4);\n     *\n     * getFifthElement([1, 2, 3, 4, 5]) // => 5\n     * getFifthElement(\"foo bar\") // => \"b\"\n     * getFifthElement([]) // => undefined\n     * getFifthElement(\"foo\") // => undefined\n     *\n     * @example <caption>Using negative indexes</caption>\n     * _.getAt(-2)([1, 2, 3]) // => 2\n     * _.getAt(-3)(\"foo\") // => \"f\"\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.head|head} and {@link module:lamb.last|last} for common use cases shortcuts.\n     * @param {Number} index\n     * @returns {Function}\n     */\n    function getAt (index) {\n        return function (arrayLike) {\n            return Math.floor(index) === index ? arrayLike[index < 0 ? index + arrayLike.length : index] : void 0;\n        };\n    }\n\n    /**\n     * Transforms an array-like object into a lookup table using the provided iteratee as a grouping\n     * criterion to generate keys and values.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"city\": \"New York\"},\n     *     {\"name\": \"John\", \"city\": \"New York\"},\n     *     {\"name\": \"Mario\", \"city\": \"Rome\"},\n     *     {\"name\": \"Paolo\"}\n     * ];\n     * var getCity = _.getKey(\"city\");\n     * var personsByCity = _.group(persons, getCity);\n     *\n     * // \"personsByCity\" holds:\n     * // {\n     * //     \"New York\": [\n     * //         {\"name\": \"Jane\", \"city\": \"New York\"},\n     * //         {\"name\": \"John\", \"city\": \"New York\"}\n     * //     ],\n     * //     \"Rome\": [\n     * //         {\"name\": \"Mario\", \"city\": \"Rome\"}\n     * //     ],\n     * //     \"undefined\": [\n     * //         {\"name\": \"Paolo\"}\n     * //     ]\n     * // }\n     *\n     * @example <caption>Adding a custom value for missing keys</caption>\n     *\n     * var getCityOrUnknown = _.condition(\n     *     _.hasKey(\"city\"),\n     *     getCity,\n     *     _.always(\"Unknown\")\n     * );\n     *\n     * personsByCity = _.group(persons, getCityOrUnknown);\n     *\n     * // \"personsByCity\" now holds:\n     * // {\n     * //     \"New York\": [\n     * //         {\"name\": \"Jane\", \"city\": \"New York\"},\n     * //         {\"name\": \"John\", \"city\": \"New York\"}\n     * //     ],\n     * //     \"Rome\": [\n     * //         {\"name\": \"Mario\", \"city\": \"Rome\"}\n     * //     ],\n     * //     \"Unknown\": [\n     * //         {\"name\": \"Paolo\"}\n     * //     ]\n     * // }\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.groupBy|groupBy}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Object}\n     */\n    function group (arrayLike, iteratee, iterateeContext) {\n        var result = {};\n        var len = arrayLike.length;\n\n        for (var i = 0, element; i < len; i++) {\n            element = arrayLike[i];\n            var key = iteratee.call(iterateeContext, element, i, arrayLike);\n\n            if (key in result) {\n                result[key].push(element);\n            } else {\n                result[key] = [element];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Using the provided iteratee, and its optional context, builds a partial application\n     * of {@link module:lamb.group|group} expecting the array-like object to act upon.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"age\": 12},\n     *     {\"name\": \"John\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"age\": 15}\n     * ];\n     *\n     * var getAgeStatus = function (person) { return person.age > 20 ? \"over 20\" : \"under 20\"; };\n     * var groupByAgeStatus = _.groupBy(getAgeStatus);\n     *\n     * var personsByAgeStatus = groupByAgeStatus(persons);\n     *\n     * // \"personsByAgeStatus\" holds:\n     * // {\n     * //     \"under 20\": [\n     * //         {\"name\": \"Jane\", \"age\": 12},\n     * //         {\"name\": \"Mario\", \"age\": 18},\n     * //         {\"name\": \"Paolo\", \"age\": 15}\n     * //     ],\n     * //     \"over 20\": [\n     * //         {\"name\": \"John\", \"age\": 40}\n     * //     ]\n     * // }\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.group|group}\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Function}\n     */\n    function groupBy (iteratee, iterateeContext) {\n        return partial(group, _, iteratee, iterateeContext);\n    }\n\n    /**\n     * Retrieves the first element of an array-like object.<br/>\n     * Just a common use case of {@link module:lamb.getAt|getAt} exposed for convenience.\n     * @example\n     * _.head([1, 2, 3]) // => 1\n     * _.head(\"hello\") // => \"h\"\n     * _.head([]) // => undefined\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.last|last}\n     * @param {ArrayLike} arrayLike\n     * @returns {*}\n     */\n    var head = getAt(0);\n\n    /**\n     * Returns a copy of the given array-like object without the last element.\n     * @example\n     * _.init([1, 2, 3, 4]) // => [1, 2, 3]\n     * _.init([1]) // => []\n     * _.init([]) // => []\n     *\n     * @memberOf module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.tail|tail}\n     * @see {@link module:lamb.head|head}, {@link module:lamb.last|last}\n     * @param {ArrayLike} arrayLike\n     * @returns {Array}\n     */\n    var init = partial(slice, _, 0, -1);\n\n    /**\n     * Returns an array of every item present in all given arrays.<br/>\n     * Note that since version <code>0.13.0</code> this function uses the [\"SameValueZero\" comparison]{@link module:lamb.isSVZ|isSVZ}.\n     * @example\n     * var a1 = [1, 2, 3, 4];\n     * var a2 = [2, 5, 4, 6];\n     * var a3 = [5, 6, 7];\n     *\n     * _.intersection(a1, a2) // => [2, 4]\n     * _.intersection(a1, a3) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {...Array} array\n     * @return {Array}\n     */\n    function intersection () {\n        var rest = slice(arguments, 1);\n        return uniques(arguments[0]).filter(function (item) {\n            return rest.every(contains(item));\n        });\n    }\n\n    /**\n     * Checks if an array-like object contains the given value.<br/>\n     * Please note that the equality test is made with {@link module:lamb.isSVZ|isSVZ}; so you can\n     * check for <code>NaN</code>, but <code>0</code> and <code>-0</code> are the same value.<br/>\n     * See also {@link module:lamb.contains|contains} for a curried version building a predicate.\n     * @example\n     * var numbers = [0, 1, 2, 3, NaN];\n     *\n     * _.isIn(numbers, 1) // => true\n     * _.isIn(numbers, 0) // => true\n     * _.isIn(numbers, -0) // => true\n     * _.isIn(numbers, NaN) // => true\n     * _.isIn(numbers, 2, 3) // => false\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @param {*} value\n     * @param {Number} [fromIndex=0] The position at which to begin searching for the given value.\n     * @returns {Boolean}\n     */\n    function isIn (arrayLike, value, fromIndex) {\n        var result = false;\n\n        for (var i = fromIndex >>> 0, len = arrayLike.length; i < len; i++) {\n            if (isSVZ(value, arrayLike[i])) {\n                result = true;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Retrieves the last element of an array-like object.<br/>\n     * Just a common use case of {@link module:lamb.getAt|getAt} exposed for convenience.\n     * @example\n     * _.last([1, 2, 3]) // => 3\n     * _.last(\"hello\") // => \"o\"\n     * _.last([]) // => undefined\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.head|head}\n     * @param {ArrayLike} arrayLike\n     * @returns {*}\n     */\n    var last = getAt(-1);\n\n    /**\n     * Generates an array with the values passed as arguments.\n     * @example\n     * _.list(1, 2, 3) // => [1, 2, 3]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {...*} value\n     * @returns {Array}\n     */\n    function list () {\n        return arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);\n    }\n\n    /**\n     * Builds a partial application of {@link module:lamb.map|map} using the given iteratee and the optional context.\n     * The resulting function expects the array-like object to act upon.\n     * @example\n     * var square = function (n) { return n * n; };\n     * var getSquares = _.mapWith(square);\n     *\n     * getSquares([1, 2, 3, 4, 5]) // => [1, 4, 9, 16, 25]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {function}\n     */\n    function mapWith (iteratee, iterateeContext) {\n        return partial(map, _, iteratee, iterateeContext);\n    }\n\n    /**\n     * Splits an array-like object in two lists: the first with the elements satisfying the given predicate,\n     * the others with the remaining elements.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     *\n     * _.partition(numbers, isEven) // => [[2, 4, 6, 8, 10], [1, 3, 5, 7, 9]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.partitionWith|partitionWith}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Array<Array<*>, Array<*>>}\n     */\n    function partition (arrayLike, predicate, predicateContext) {\n        var result = [[], []];\n        var len = arrayLike.length;\n\n        for (var i = 0, el; i < len; i++) {\n            el = arrayLike[i];\n            result[predicate.call(predicateContext, el, i, arrayLike) ? 0 : 1].push(el);\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds a partial application of {@link module:lamb.partition|partition} using the given predicate and the optional context.\n     * The resulting function expects the array-like object to act upon.\n     * @example\n     * var users = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"active\": false},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"active\": true},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"active\": true},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"active\": false}\n     * ];\n     * var isActive = _.hasKeyValue(\"active\", true);\n     * var splitByActiveStatus = _.partitionWith(isActive);\n     *\n     * splitByActiveStatus(users) // =>\n     * // [[\n     * //     {\"name\": \"John\", \"surname\": \"Doe\", \"active\": true},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"active\": true}\n     * // ], [\n     * //     {\"name\": \"Jane\", \"surname\": \"Doe\", \"active\": false},\n     * //     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"active\": false}\n     * // ]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.partition|partition}\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    function partitionWith (predicate, predicateContext) {\n        return partial(partition, _, predicate, predicateContext);\n    }\n\n    /**\n     * \"Plucks\" the values of the specified key from a list of objects.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 15}\n     * ];\n     *\n     * _.pluck(persons, \"age\") // => [12, 40, 18, 15]\n     *\n     * var lists = [\n     *     [1, 2],\n     *     [3, 4, 5],\n     *     [6]\n     * ];\n     *\n     * _.pluck(lists, \"length\") // => [2, 3, 1]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.pluckKey|pluckKey}\n     * @param {ArrayLike} arrayLike\n     * @param {String} key\n     * @returns {Array}\n     */\n    function pluck (arrayLike, key) {\n        return map(arrayLike, getKey(key));\n    }\n\n    /**\n     * A curried version of {@link module:lamb.pluck|pluck} expecting the key to retrieve to\n     * build a function waiting for the array-like object to act upon.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 15}\n     * ];\n     * var getAges = _.pluckKey(\"age\");\n     *\n     * getAges(persons) // => [12, 40, 18, 15]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.pluck|pluck}\n     * @function\n     * @param {String} key\n     * @returns {Function}\n     */\n    function pluckKey (key) {\n        return mapWith(getKey(key));\n    }\n\n    /**\n     * Reverses a copy of the given array-like object.\n     * @example\n     * var arr = [1, 2, 3];\n     *\n     * _.reverse(arr) // => [3, 2, 1];\n     *\n     * // `arr` still is [1, 2, 3]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @returns {Array}\n     */\n    function reverse (arrayLike) {\n        return slice(arrayLike).reverse();\n    }\n\n    /**\n     * Builds a function that creates a copy of an array-like object with the given\n     * index changed to the provided value.<br/>\n     * If the index is not an integer or if it's out of bounds, the function\n     * will return a copy of the original array.<br/>\n     * Negative indexes are allowed.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.setAt(2, 99)(arr) // => [1, 2, 99, 4, 5]\n     * arr // => [1, 2, 3, 4, 5]\n     *\n     * _.setAt(10, 99)(arr) // => [1, 2, 3, 4, 5] (not a reference to `arr`)\n     *\n     * @example <caption>Using negative indexes</caption>\n     * _.setAt(-1, 99)(arr) // => [1, 2, 3, 4, 99]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {Number} index\n     * @param {*} value\n     * @returns {Function}\n     */\n    function setAt (index, value) {\n        return function (arrayLike) {\n            var result = slice(arrayLike);\n            var len = arrayLike.length;\n\n            if (clamp(index, -len, len - 1) === Math.floor(index)) {\n                result[index + (index < 0 ? len : 0)] = value;\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Flattens the \"first level\" of an array.<br/>\n     * See also {@link module:lamb.flatten|flatten}.\n     * @example <caption>showing the difference with <code>flatten</code></caption>\n     * var arr = [1, 2, [3, 4, [5, 6]], 7, 8];\n     *\n     * _.flatten(arr) // => [1, 2, 3, 4, 5, 6, 7, 8]\n     * _.shallowFlatten(arr) // => [1, 2, 3, 4, [5, 6], 7, 8]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {Array} array\n     * @returns {Array}\n     */\n    function shallowFlatten (array) {\n        return _arrayProto.concat.apply([], array);\n    }\n\n    /**\n     * Returns a copy of the given array-like object without the first element.\n     * @example\n     * _.tail([1, 2, 3, 4]) // => [2, 3, 4]\n     * _.tail([1]) // => []\n     * _.tail([]) // => []\n     *\n     * @memberOf module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.init|init}\n     * @see {@link module:lamb.head|head}, {@link module:lamb.last|last}\n     * @param {ArrayLike} arrayLike\n     * @returns {Array}\n     */\n    var tail = partial(slice, _, 1, void 0);\n\n    /**\n     * Retrieves the first <code>n</code> elements from an array or array-like object.\n     * Note that, being this a partial application of {@link module:lamb.slice|slice},\n     * <code>n</code> can be a negative number.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.take(arr, 3) // => [1, 2, 3]\n     * _.take(arr, -1) // => [1, 2, 3, 4]\n     * _.take(arr, -10) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.takeN|takeN}\n     * @see {@link module:lamb.drop|drop}, {@link module:lamb.dropN|dropN}\n     * @see {@link module:lamb.takeWhile|takeWhile}, {@link module:lamb.dropWhile|dropWhile}\n     * @param {ArrayLike} arrayLike\n     * @param {Number} n\n     * @returns {Array}\n     */\n    var take = partial(slice, _, 0, _);\n\n    /**\n     * A curried version of {@link module:lamb.take|take} that expects the number of elements\n     * to retrieve to build a function waiting for the list to take the elements from.\n     * See the note and examples for {@link module:lamb.take|take} about passing a negative <code>n</code>.\n     * @example\n     * var take2 = _.takeN(2);\n     *\n     * take2([1, 2, 3, 4, 5]) // => [1, 2]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.take|take}\n     * @see {@link module:lamb.drop|drop}, {@link module:lamb.dropN|dropN}\n     * @see {@link module:lamb.takeWhile|takeWhile}, {@link module:lamb.dropWhile|dropWhile}\n     * @param {Number} n\n     * @returns {Function}\n     */\n    var takeN = _curry(take, 2, true);\n\n    /**\n     * Builds a function that takes the first <code>n</code> elements satisfying a predicate from an array or array-like object.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var takeWhileIsEven = _.takeWhile(isEven);\n     *\n     * takeWhileIsEven([1, 2, 4, 6, 8]) // => []\n     * takeWhileIsEven([2, 4, 7, 8]) // => [2, 4]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.dropWhile|dropWhile}\n     * @see {@link module:lamb.take|take}, {@link module:lamb.takeN|takeN}\n     * @see {@link module:lamb.drop|drop}, {@link module:lamb.dropN|dropN}\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} predicateContext\n     * @returns {Function}\n     */\n    function takeWhile (predicate, predicateContext) {\n        return function (arrayLike) {\n            return slice(arrayLike, 0, _findSliceEndIndex(arrayLike, predicate, predicateContext));\n        };\n    }\n\n    /**\n     * Transposes a matrix. Can also be used to reverse a {@link module:lamb.zip|zip} operation.<br/>\n     * Just like {@link module:lamb.zip|zip}, the received array-like objects will be truncated to the\n     * shortest length.\n     * @example <caption>transposing a matrix</caption>\n     * _.transpose([\n     *     [1, 2, 3],\n     *     [4, 5, 6],\n     *     [7, 8, 9]\n     * ]) // =>\n     * // [\n     * //     [1, 4, 7],\n     * //     [2, 5, 8],\n     * //     [3, 6, 9]\n     * // ]\n     *\n     * @example <caption>showing the relationship with <code>zip</code></caption>\n     * var zipped = _.zip([\"a\", \"b\", \"c\"], [1, 2, 3]); // => [[\"a\", 1], [\"b\", 2], [\"c\", 3]]\n     *\n     * _.transpose(zipped) // => [[\"a\", \"b\", \"c\"], [1, 2, 3]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike<ArrayLike<*>>} arrayLike\n     * @returns {Array<Array<*>>}\n     */\n    function transpose (arrayLike) {\n        var result = [];\n        var minLen = apply(Math.min, pluck(arrayLike, \"length\")) >>> 0;\n        var len = arrayLike.length;\n\n        for (var i = 0, j; i < minLen; i++) {\n            result.push([]);\n\n            for (j = 0; j < len; j++) {\n                result[i][j] = arrayLike[j][i];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns a list of every unique element present in the given array-like objects.\n     * @example\n     * _.union([1, 2, 3, 2], [3, 4], [1, 5]) // => [1, 2, 3, 4, 5]\n     * _.union(\"abc\", \"bcd\", \"cde\") // => [\"a\", \"b\", \"c\", \"d\", \"e\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {...ArrayLike} arrayLike\n     * @returns {Array}\n     */\n    var union = compose(uniques, flatMapWith(unary(slice)), list);\n\n    /**\n     * Returns an array comprised of the unique elements of the given array-like object.<br/>\n     * Can work with lists of complex objects if supplied with an iteratee.<br/>\n     * Note that since version <code>0.13.0</code> this function uses the [\"SameValueZero\" comparison]{@link module:lamb.isSVZ|isSVZ}.\n     * @example <caption>with simple values</caption>\n     * _.uniques([1, 2, 2, 3, 4, 3, 5, 1]) // => [1, 2, 3, 4, 5]\n     *\n     * @example <caption>with complex values</caption>\n     * var data  = [\n     *     {id: \"1\"},\n     *     {id: \"4\"},\n     *     {id: \"5\"},\n     *     {id: \"1\"},\n     *     {id: \"5\"},\n     * ];\n     *\n     * _.uniques(data, _.getKey(\"id\")) // => [{id: \"1\"}, {id: \"4\"}, {\"id\": 5}]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} [iteratee] Defaults to the [identity function]{@link module:lamb.identity}.\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    function uniques (arrayLike, iteratee, iterateeContext) {\n        if (typeof iteratee !== \"function\") {\n            iteratee = identity;\n        }\n\n        var result = [];\n        var seen = [];\n        var value;\n\n        for (var i = 0; i < arrayLike.length; i++) {\n            value = iteratee.call(iterateeContext, arrayLike[i], i , arrayLike);\n\n            if (!isIn(seen, value)) {\n                seen.push(value);\n                result.push(arrayLike[i]);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds a list of arrays out of the given array-like objects by pairing items with the same index.<br/>\n     * The received array-like objects will be truncated to the shortest length.<br/>\n     * See also {@link module:lamb.zipWithIndex|zipWithIndex} and {@link module:lamb.transpose|transpose} for the reverse operation.\n     * @example\n     * _.zip(\n     *     [\"a\", \"b\", \"c\"],\n     *     [1, 2, 3],\n     *     [true, false, true]\n     * ) // => [[\"a\", 1, true], [\"b\", 2, false], [\"c\", 3, true]]\n     *\n     * _.zip([1, 2, 3, 4], [5, 6, 7]) // => [[1, 5], [2, 6], [3, 7]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {...ArrayLike} arrayLike\n     * @returns {Array<Array<*>>}\n     */\n    var zip = compose(transpose, list);\n\n    /**\n     * \"{@link module:lamb.zip|Zips}\" an array-like object by pairing its values with their index.\n     * @example\n     * _.zipWithIndex([\"a\", \"b\", \"c\"]) // => [[\"a\", 0], [\"b\", 1], [\"c\", 2]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @returns {Array<Array<*, Number>>}\n     */\n    var zipWithIndex = mapWith(binary(list));\n\n    lamb.contains = contains;\n    lamb.difference = difference;\n    lamb.drop = drop;\n    lamb.dropN = dropN;\n    lamb.dropWhile = dropWhile;\n    lamb.filterWith = filterWith;\n    lamb.find = find;\n    lamb.findIndex = findIndex;\n    lamb.flatMap = flatMap;\n    lamb.flatMapWith = flatMapWith;\n    lamb.flatten = flatten;\n    lamb.getAt = getAt;\n    lamb.group = group;\n    lamb.groupBy = groupBy;\n    lamb.head = head;\n    lamb.init = init;\n    lamb.intersection = intersection;\n    lamb.isIn = isIn;\n    lamb.last = last;\n    lamb.list = list;\n    lamb.mapWith = mapWith;\n    lamb.partition = partition;\n    lamb.partitionWith = partitionWith;\n    lamb.pluck = pluck;\n    lamb.pluckKey = pluckKey;\n    lamb.reverse = reverse;\n    lamb.setAt = setAt;\n    lamb.shallowFlatten = shallowFlatten;\n    lamb.tail = tail;\n    lamb.take = take;\n    lamb.takeN = takeN;\n    lamb.takeWhile = takeWhile;\n    lamb.transpose = transpose;\n    lamb.union = union;\n    lamb.uniques = uniques;\n    lamb.zip = zip;\n    lamb.zipWithIndex = zipWithIndex;\n\n\n    function _comparer (a, b) {\n        var result = 0;\n\n        if (typeof a !== typeof b) {\n            a = String(a);\n            b = String(b);\n        }\n\n        if (!isSVZ(a, b)) {\n            if (a > b || a !== a) {\n                result = 1;\n            } else if (a < b || b !== b) {\n                result = -1;\n            }\n        }\n\n        return result;\n    }\n\n    function _compareWith (criteria) {\n        var len = criteria.length;\n\n        return function (a, b) {\n            var result = 0;\n            var isDescSort;\n            var criterion;\n\n            for (var i = 0; i < len; i++) {\n                criterion = criteria[i];\n                result = criterion.compare(a.value, b.value);\n\n                if (result !== 0) {\n                    isDescSort = criteria[i].isDescending;\n                    break;\n                }\n            }\n\n            if (result === 0) {\n                isDescSort = criteria[len - 1].isDescending;\n                result = a.index - b.index;\n            }\n\n            return isDescSort ? -result : result;\n        };\n    }\n\n    function _getInsertionIndex (array, element, comparer, start, end) {\n        if (array.length === 0) {\n            return 0;\n        }\n\n        var pivot = (start + end) >> 1;\n        var result = comparer({\n            value: element,\n            index: pivot\n        }, {\n            value: array[pivot],\n            index: pivot\n        });\n\n        if (end - start <= 1) {\n            return result < 0 ? pivot : pivot + 1;\n        } else if (result < 0) {\n            return _getInsertionIndex(array, element, comparer, start, pivot);\n        } else if (result === 0) {\n            return pivot + 1;\n        } else {\n            return _getInsertionIndex(array, element, comparer, pivot, end);\n        }\n    }\n\n    function _makeCriteria (sorters) {\n        return sorters.length ? sorters.map(_makeCriterion) : [_sorter()];\n    }\n\n    function _makeCriterion (criterion) {\n        return typeof Object(criterion).compare === \"function\" ? criterion : _sorter(criterion);\n    }\n\n    function _sorter (reader, isDescending, comparer) {\n        return {\n            isDescending: isDescending === true,\n            compare: function (a, b) {\n                if (typeof reader === \"function\" && reader !== identity) {\n                    a = reader(a);\n                    b = reader(b);\n                }\n\n                return (comparer || _comparer)(a, b);\n            }\n        };\n    }\n\n    /**\n     * Inserts an element in a copy of a sorted array respecting the sort order.\n     * @example <caption>with simple values</caption>\n     * _.insert([], 1) // => [1]\n     * _.insert([2, 4, 6], 5) // => [2, 4, 5, 6]\n     * _.insert([4, 2, 1], 3, _.sorterDesc()) // => [4, 3, 2, 1]\n     *\n     * @example <caption>with complex values</caption>\n     * var persons = [\n     *     {\"name\": \"jane\", \"surname\": \"doe\"},\n     *     {\"name\": \"John\", \"surname\": \"Doe\"},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * ];\n     *\n     * var getLowerCaseName = _.compose(\n     *     _.invoker(\"toLowerCase\"),\n     *     _.getKey(\"name\")\n     * );\n     *\n     * var result = _.insert(\n     *     persons,\n     *     {\"name\": \"marco\", \"surname\": \"Rossi\"},\n     *     getLowerCaseName\n     * );\n     *\n     * // `result` holds:\n     * // [\n     * //     {\"name\": \"jane\", \"surname\": \"doe\"},\n     * //     {\"name\": \"John\", \"surname\": \"Doe\"},\n     * //     {\"name\": \"marco\", \"surname\": \"Rossi\"},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.sort|sort}, {@link module:lamb.sortWith|sortWith}\n     * @see {@link module:lamb.sorter|sorter}, {@link module:lamb.sorterDesc|sorterDesc}\n     * @param {Array} array\n     * @param {*} element\n     * @param {...(Sorter|Function)} [sorter={@link module:lamb.sorter|sorter()}] - The sorting criteria used to sort the array.\n     * @returns {Array}\n     */\n    function insert (array, element) {\n        var criteria = _makeCriteria(slice(arguments, 2));\n        var result = array.concat();\n        var idx = _getInsertionIndex(array, element, _compareWith(criteria), 0, array.length);\n\n        result.splice(idx, 0, element);\n        return result;\n    }\n\n    /**\n     * Returns a [stably]{@link https://en.wikipedia.org/wiki/Sorting_algorithm#Stability} sorted copy of an\n     * array-like object using the given criteria.<br/>\n     * Sorting criteria are built using Lamb's {@link module:lamb.sorter|sorter} function, but you can also\n     * pass simple \"reader\" functions and default ascending sorters will be built for you.<br/>\n     * A \"reader\" is a function that evaluates the array element and supplies the value to be used in the comparison.<br/>\n     * Please note that if the arguments received by the default comparer aren't of the same type, they will be compared as strings.\n     *\n     * @example <caption>Stable sort:</caption>\n     * var persons = [\n     *     {\"name\": \"John\", \"surname\" :\"Doe\"},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\"},\n     *     {\"name\": \"John\", \"surname\" :\"Moe\"},\n     *     {\"name\": \"Jane\", \"surname\": \"Foe\"}\n     * ];\n     *\n     * var personsByName = _.sort(persons, _.getKey(\"name\"));\n     *\n     * // personsByName holds:\n     * // [\n     * //     {\"name\": \"Jane\", \"surname\": \"Foe\"},\n     * //     {\"name\": \"John\", \"surname\" :\"Doe\"},\n     * //     {\"name\": \"John\", \"surname\" :\"Moe\"},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * // ]\n     *\n     * @example <caption>Stable multi-sort:</caption>\n     * var personsByNameAscSurnameDesc = _.sort(\n     *     persons,\n     *     _.getKey(\"name\"),\n     *     _.sorterDesc(_.getKey(\"surname\"))\n     * );\n     *\n     * // personsByNameAscSurnameDesc holds:\n     * // [\n     * //     {\"name\": \"Jane\", \"surname\": \"Foe\"},\n     * //     {\"name\": \"John\", \"surname\" :\"Moe\"},\n     * //     {\"name\": \"John\", \"surname\" :\"Doe\"},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * // ]\n     *\n     * @example <caption>Using custom comparers:</caption>\n     * var localeSorter = new Intl.Collator(\"it\");\n     * var chars = [\"a\", \"è\", \"à\", \"é\", \"c\", \"b\", \"e\"];\n     *\n     * _.sort(chars, localeSorter) // => [\"a\", \"à\", \"b\", \"c\", \"e\", \"é\", \"è\"]\n     *\n     * var localeSorterDesc = _.sorterDesc(_.identity, localeSorter.compare);\n     *\n     * _.sort(chars, localeSorterDesc) // => [\"è\", \"é\", \"e\", \"c\", \"b\", \"à\", \"a\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.sortWith|sortWith}\n     * @see {@link module:lamb.sorter|sorter}, {@link module:lamb.sorterDesc|sorterDesc}\n     * @param {ArrayLike} arrayLike\n     * @param {...(Sorter|Function)} [sorter={@link module:lamb.sorter|sorter()}]\n     * @returns {Array}\n     */\n    function sort (arrayLike) {\n        var criteria = _makeCriteria(slice(arguments, 1));\n        var data = [];\n        var result = [];\n        var len = arrayLike.length;\n\n        for (var i = 0; i < len; i++) {\n            data.push({\n                value: arrayLike[i],\n                index: i\n            });\n        }\n\n        data.sort(_compareWith(criteria));\n\n        for (i = 0; i < len; i++) {\n            result.push(data[i].value);\n        }\n\n        return result;\n    }\n\n    /**\n     * Creates an ascending sort criterion with the provided <code>reader</code> and <code>comparer</code>.<br/>\n     * See {@link module:lamb.sort|sort} for various examples.\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.insert|insert}\n     * @see {@link module:lamb.sort|sort}, {@link module:lamb.sortWith|sortWith}\n     * @see {@link module:lamb.sorterDesc|sorterDesc}\n     * @param {Function} [reader={@link module:lamb.identity|identity}] A function meant to generate a simple value from a complex one. The function should evaluate the array element and supply the value to be passed to the comparer.\n     * @param {Function} [comparer] An optional custom comparer function.\n     * @returns {Sorter}\n     */\n    var sorter = partial(_sorter, _, false, _);\n\n    /**\n     * Creates a descending sort criterion with the provided <code>reader</code> and <code>comparer</code>.<br/>\n     * See {@link module:lamb.sort|sort} for various examples.\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.insert|insert}\n     * @see {@link module:lamb.sort|sort}, {@link module:lamb.sortWith|sortWith}\n     * @see {@link module:lamb.sorter|sorter}\n     * @param {Function} [reader={@link module:lamb.identity|identity}] A function meant to generate a simple value from a complex one. The function should evaluate the array element and supply the value to be passed to the comparer.\n     * @param {Function} [comparer] An optional custom comparer function.\n     * @returns {Sorter}\n     */\n    var sorterDesc = partial(_sorter, _, true, _);\n\n    /**\n     * Builds a partial application of {@link module:lamb.sort|sort} using the provided criteria. The returned\n     * function expects the array-like object to sort.\n     * As usual, sorting criteria are built using Lamb's {@link module:lamb.sorter|sorter} function, but you can also\n     * pass simple \"reader\" functions and default ascending sorters will be built.<br/>\n     * A \"reader\" is a function that evaluates the array element and supplies the value to be used in the comparison.<br/>\n     * See {@link module:lamb.sort|sort} for more examples.\n     *\n     * @example\n     * var sortAsNumbers = _.sortWith(parseFloat);\n     * var weights = [\"2 Kg\", \"10 Kg\", \"1 Kg\", \"7 Kg\"];\n     *\n     * sortAsNumbers(weights) // => [\"1 Kg\", \"2 Kg\", \"7 Kg\", \"10 Kg\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.sort|sort}\n     * @see {@link module:lamb.sorter|sorter}, {@link module:lamb.sorterDesc|sorterDesc}\n     * @param {...(Sorter|Function)} [sorter={@link module:lamb.sorter|sorter()}]\n     * @returns {Function}\n     */\n    function sortWith () {\n        var sorters = slice(arguments);\n\n        return function (arrayLike) {\n            return sort.apply(null, [arrayLike].concat(sorters));\n        };\n    }\n\n    lamb.insert = insert;\n    lamb.sort = sort;\n    lamb.sorter = sorter;\n    lamb.sorterDesc = sorterDesc;\n    lamb.sortWith = sortWith;\n\n\n    function _currier (fn, arity, isRightCurry, slicer, argsHolder) {\n        return function () {\n            var args = argsHolder.concat(slicer(arguments));\n\n            if (args.length >= arity) {\n                return fn.apply(this, isRightCurry ? args.reverse() : args);\n            } else {\n                return _currier(fn, arity, isRightCurry, slicer, args);\n            }\n        };\n    }\n\n    function _curry (fn, arity, isRightCurry, isAutoCurry) {\n        var slicer = isAutoCurry ? slice : function (a) {\n            return a.length ? [a[0]] : [];\n        };\n\n        if ((arity >>> 0) !== arity) {\n            arity = fn.length;\n        }\n\n        return _currier(fn, arity, isRightCurry, slicer, []);\n    }\n\n    /**\n     * Applies the passed function to the given argument list.\n     * @example\n     * _.apply(_.add, [3, 4]) // => 7\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {ArrayLike} args\n     * @returns {*}\n     */\n    function apply (fn, args) {\n        return fn.apply(fn, slice(args));\n    }\n\n    /**\n     * A curried version of {@link module:lamb.apply|apply}. Expects an array-like object to use as arguments\n     * and builds a function waiting for the target of the application.\n     * @example\n     * var data = [3, 4];\n     * var applyDataTo = _.applyArgs(data);\n     *\n     * applyDataTo(_.add) // => 7\n     * applyDataTo(_.multiply) // => 12\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @function\n     * @param {ArrayLike} args\n     * @returns {Function}\n     */\n    var applyArgs = _curry(apply, 2, true);\n\n    /**\n     * Builds a function that passes only the specified amount of arguments to the given function.<br/>\n     * See also {@link module:lamb.binary|binary} and {@link module:lamb.unary|unary} for common use\n     * cases shortcuts.\n     * @example\n     * var data = [\"1-2\", \"13-5\", \"6-23\"];\n     * var getDashIndex = _.invoker(\"indexOf\", \"-\");\n     *\n     * data.map(getDashIndex) // => [1, 2, -1]\n     * data.map(_.aritize(getDashIndex, 1)) // = > [1, 2, 1]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {Number} arity\n     * @returns {Function}\n     */\n    function aritize (fn, arity) {\n        return function () {\n            return apply(fn, slice(arguments, 0, arity));\n        };\n    }\n\n    /**\n     * Builds a function that passes only two arguments to the given function.<br/>\n     * It's simply a shortcut for a common use case of {@link module:lamb.aritize|aritize},\n     * exposed for convenience.<br/>\n     * See also {@link module:lamb.unary|unary}.\n     * @example\n     * _.list(1, 2, 3, 4, 5) // => [1, 2, 3, 4, 5]\n     * _.binary(_.list)(1, 2, 3, 4, 5) // => [1, 2]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function binary (fn) {\n        return function (a, b) {\n            return fn(a, b);\n        };\n    }\n\n    /**\n     * Transforms the evaluation of the given function in the evaluation of a sequence of functions\n     * expecting only one argument. Each function of the sequence is a partial application of the\n     * original one, which will be applied when the specified (or derived) arity is consumed.<br/>\n     * Currying will start from the leftmost argument: use {@link module:lamb.curryRight|curryRight}\n     * for right currying.<br/>\n     * See also {@link module:lamb.curryable|curryable}, {@link module:lamb.curryableRight|curryableRight}\n     * and {@link module:lamb.partial|partial}.\n     * @example\n     * var multiplyBy = _.curry(_.multiply);\n     * var multiplyBy10 = multiplyBy(10);\n     *\n     * multiplyBy10(5) // => 50\n     * multiplyBy10()(5) // => 50\n     * multiplyBy10()()(2) // => 20\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {Number} [arity=fn.length]\n     * @returns {Function}\n     */\n    function curry (fn, arity) {\n        return _curry(fn, arity, false);\n    }\n\n    /**\n     * Same as {@link module:lamb.curry|curry}, but currying starts from the rightmost argument.\n     * @example\n     * var divideBy = _.curryRight(_.divide);\n     * var halve = divideBy(2);\n     * halve(3) // => 1.5\n     * halve(3, 7) // => 1.5\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {Number} [arity=fn.length]\n     * @returns {Function}\n     */\n    function curryRight (fn, arity) {\n        return _curry(fn, arity, true);\n    }\n\n    /**\n     * Builds an auto-curried function. The resulting function can be called multiple times with\n     * any number of arguments, and the original function will be applied only when the specified\n     * (or derived) arity is consumed.<br/>\n     * Currying will start from the leftmost argument: use {@link module:lamb.curryableRight|curryableRight}\n     * for right currying.<br/>\n     * Note that you can pass undefined values as arguments explicitly, if you are so inclined, but empty\n     * calls doesn't consume the arity.<br/>\n     * See also {@link module:lamb.curry|curry}, {@link module:lamb.curryRight|curryRight} and\n     * {@link module:lamb.partial|partial}.\n     * @example\n     * var collectFourElements = _.curryable(_.list, 4);\n     *\n     * collectFourElements(2)(3)(4)(5) // => [2, 3, 4, 5]\n     * collectFourElements(2)(3, 4)(5) // => [2, 3, 4, 5]\n     * collectFourElements(2, 3, 4, 5) // => [2, 3, 4, 5]\n     * collectFourElements()(2)()(3, 4, 5) // => [2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {Number} [arity=fn.length]\n     * @returns {Function}\n     */\n    function curryable (fn, arity) {\n        return _curry(fn, arity, false, true);\n    }\n\n    /**\n     * Same as {@link module:lamb.curryable|curryable}, but currying starts from the rightmost argument.\n     * @example\n     * var collectFourElements = _.curryableRight(_.list, 4);\n     *\n     * collectFourElements(2)(3)(4)(5) // => [5, 4, 3, 2]\n     * collectFourElements(2)(3, 4)(5) // => [5, 4, 3, 2]\n     * collectFourElements(2, 3, 4, 5) // => [5, 4, 3, 2]\n     * collectFourElements()(2)()(3, 4, 5) // => [5, 4, 3, 2]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {Number} [arity=fn.length]\n     * @returns {Function}\n     */\n    function curryableRight (fn, arity) {\n        return _curry(fn, arity, true, true);\n    }\n\n    /**\n     * Returns a function that will execute the given function only if it stops being called for the specified timespan.<br/>\n     * See also {@link module:lamb.throttle|throttle} for a different behaviour where the first call happens immediately.\n     * @example <caption>A common use case of <code>debounce</code> in a browser environment</caption>\n     * var updateLayout = function () {\n     *     // some heavy DOM operations here\n     * };\n     *\n     * window.addEventListener(\"resize\", _.debounce(updateLayout, 200), false);\n     *\n     * // The resize event is fired repeteadly until the user stops resizing the\n     * // window, while the `updateLayout` function is called only once: 200 ms\n     * // after he stopped.\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {Number} timespan - Expressed in milliseconds\n     * @returns {Function}\n     */\n    function debounce (fn, timespan) {\n        var timeoutID;\n\n        return function () {\n            var context = this;\n            var args = arguments;\n            var debounced = function () {\n                timeoutID = null;\n                fn.apply(context, args);\n            };\n\n            clearTimeout(timeoutID);\n            timeoutID = setTimeout(debounced, timespan);\n        };\n    }\n\n    /**\n     * Returns a function that applies its arguments to the original function in reverse order.\n     * @example\n     * _.list(1, 2, 3) // => [1, 2, 3]\n     * _.flip(_.list)(1, 2, 3) // => [3, 2, 1]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function flip (fn) {\n        return function () {\n            var args = slice(arguments).reverse();\n            return fn.apply(this, args);\n        };\n    }\n\n    /**\n     * Builds a function that returns the argument received at the given index.<br/>\n     * As with {@link module:lamb.getAt|getAt} negative indexes are allowed.<br/>\n     * The resulting function will return <code>undefined</code> if no arguments are\n     * passed or if the index is out of bounds.\n     * @example\n     * var getFirstArg = getArgAt(0);\n     * var getLastArg = getArgAt(-1);\n     *\n     * getFirstArg(1, 2, 3) // => 1\n     * getLastArg(1, 2, 3) // => 3\n     *\n     * getArgAt()(1, 2, 3) // => undefined\n     * getArgAt(6)(1, 2, 3) // => undefined\n     * getArgAt(1)() // => undefined\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Number} index\n     * @returns {Function}\n     */\n    function getArgAt (index) {\n        return compose(getAt(index), list);\n    }\n\n    /**\n     * Accepts an object and builds a function expecting a method name, and optionally arguments, to call on such object.\n     * Like {@link module:lamb.invoker|invoker}, if no method with the given name is found the function will return <code>undefined</code>.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var arr = [1, 2, 3, 4, 5];\n     * var invokerOnArr = _.invokerOn(arr);\n     *\n     * invokerOnArr(\"filter\", isEven) // => [2, 4]\n     * invokerOnArr(\"slice\", 1, 3) // => [2, 3]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.invoker|invoker}\n     * @param {Object} target\n     * @returns {Function}\n     */\n    function invokerOn (target) {\n        return function (methodName) {\n            var args = slice(arguments, 1);\n            var method = target[methodName];\n            return type(method) === \"Function\" ? method.apply(target, args) : void 0;\n        };\n    }\n\n    /**\n     * Builds a function that will invoke the given method name on any received object and return\n     * the result. If no method with such name is found the function will return <code>undefined</code>.\n     * Along with the method name it's possible to supply some arguments that will be bound to the method call.<br/>\n     * Further arguments can also be passed when the function is actually called, and they will be concatenated\n     * to the bound ones.<br/>\n     * If different objects share a method name it's possible to build polymorphic functions as you can see in\n     * the example below.<br/>\n     * {@link module:lamb.condition|Condition} can be used to wrap <code>invoker</code> to avoid this behaviour\n     * by adding a predicate, while {@link module:lamb.adapter|adapter} can build more complex polymorphic functions\n     * without the need of homonymy.<br/>\n     * Returning <code>undefined</code> or checking for such value is meant to favor composition and interoperability\n     * between the aforementioned functions: for a more standard behaviour see also {@link module:lamb.generic|generic}.\n     * See also {@link module:lamb.invokerOn|invokerOn}.\n     * @example <caption>Basic polymorphism with <code>invoker</code></caption>\n     * var polySlice = _.invoker(\"slice\");\n     *\n     * polySlice([1, 2, 3, 4, 5], 1, 3) // => [2, 3]\n     * polySlice(\"Hello world\", 1, 3) // => \"el\"\n     *\n     * @example <caption>With bound arguments</caption>\n     * var substrFrom2 = _.invoker(\"substr\", 2);\n     * substrFrom2(\"Hello world\") // => \"llo world\"\n     * substrFrom2(\"Hello world\", 5) // => \"llo w\"\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {String} methodName\n     * @param {...*} [boundArg]\n     * @returns {Function}\n     */\n    function invoker (methodName) {\n        var boundArgs = slice(arguments, 1);\n\n        return function (target) {\n            var args = slice(arguments, 1);\n            var method = target[methodName];\n            return type(method) === \"Function\" ? method.apply(target, boundArgs.concat(args)) : void 0;\n        };\n    }\n\n    /**\n     * Builds a function that allows to map over the received arguments before applying them to the original one.\n     * @example\n     * var sumArray = _.invoker(\"reduce\", _.add);\n     * var sum = _.compose(sumArray, _.list);\n     *\n     * sum(1, 2, 3, 4, 5) // => 15\n     *\n     * var square = _.partial(Math.pow, _, 2);\n     * var sumSquares = _.mapArgs(sum, square);\n     *\n     * sumSquares(1, 2, 3, 4, 5) // => 55\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {ListIteratorCallback} mapper\n     * @returns {Function}\n     */\n    function mapArgs (fn, mapper) {\n        return compose(partial(apply, fn), mapWith(mapper), list);\n    }\n\n    /**\n     * Creates a pipeline of functions, where each function consumes the result of the previous one.<br/>\n     * See also {@link module:lamb.compose|compose}.\n     * @example\n     * var square = _.partial(Math.pow, _, 2);\n     * var getMaxAndSquare = _.pipe(Math.max, square);\n     *\n     * getMaxAndSquare(3, 5) // => 25\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @function\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    var pipe = flip(compose);\n\n    /**\n     * Builds a function that allows to \"tap\" into the arguments of the original one.\n     * This allows to extract simple values from complex ones, transform arguments or simply intercept them.\n     * If a \"tapper\" isn't found the argument is passed as it is.\n     * @example\n     * var someObject = {count: 5};\n     * var someArrayData = [2, 3, 123, 5, 6, 7, 54, 65, 76, 0];\n     * var getDataAmount = _.tapArgs(_.add, _.getKey(\"count\"), _.getKey(\"length\"));\n     *\n     * getDataAmount(someObject, someArrayData); // => 15\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {...?Function} [tapper]\n     * @returns {Function}\n     */\n    function tapArgs (fn) {\n        var readers = slice(arguments, 1);\n\n        return function () {\n            var len = arguments.length;\n            var args = [];\n\n            for (var i = 0; i < len; i++) {\n                args.push(readers[i] ? readers[i](arguments[i]) : arguments[i]);\n            }\n\n            return fn.apply(this, args);\n        };\n    }\n\n    /**\n     * Returns a function that will invoke the passed function at most once in the given timespan.<br/>\n     * The first call in this case happens as soon as the function is invoked; see also {@link module:lamb.debounce|debounce}\n     * for a different behaviour where the first call is delayed.\n     * @example\n     * var log = _.throttle(console.log.bind(console), 5000);\n     *\n     * log(\"Hi\"); // console logs \"Hi\"\n     * log(\"Hi again\"); // nothing happens\n     * // after five seconds\n     * log(\"Hello world\"); // console logs \"Hello world\"\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {Number} timespan - Expressed in milliseconds.\n     * @returns {Function}\n     */\n    function throttle (fn, timespan) {\n        var result;\n        var lastCall = 0;\n\n        return function () {\n            var now = Date.now();\n\n            if (now - lastCall >= timespan) {\n                lastCall = now;\n                result = fn.apply(this, arguments);\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Builds a function that passes only one argument to the given function.<br/>\n     * It's simply a shortcut for a common use case of {@link module:lamb.aritize|aritize},\n     * exposed for convenience.<br/>\n     * See also {@link module:lamb.binary|binary}.\n     * @example\n     * var weights = [\"2 Kg\", \"10 Kg\", \"1 Kg\", \"7 Kg\"];\n     *\n     * weights.map(_.unary(parseInt)) // => [2, 10, 1, 7]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function unary (fn) {\n        return function (a) {\n            return fn(a);\n        };\n    }\n\n    /**\n     * Wraps the function <code>fn</code> inside a <code>wrapper</code> function.<br/>\n     * This allows to conditionally execute <code>fn</code>, to tamper with its arguments or return value\n     * and to run code before and after its execution.<br/>\n     * Being this nothing more than a \"{@link module:lamb.flip|flipped}\" [partial application]{@link module:lamb.partial},\n     * you can also easily build new functions from existent ones.\n     * @example\n     * var arrayMax = _.wrap(Math.max, _.apply);\n     *\n     * arrayMax([4, 5, 2, 6, 1]) // => 6\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @function\n     * @param {Function} fn\n     * @param {Function} wrapper\n     * @returns {Function}\n     */\n    var wrap = binary(flip(partial));\n\n    lamb.apply = apply;\n    lamb.applyArgs = applyArgs;\n    lamb.aritize = aritize;\n    lamb.binary = binary;\n    lamb.curry = curry;\n    lamb.curryRight = curryRight;\n    lamb.curryable = curryable;\n    lamb.curryableRight = curryableRight;\n    lamb.debounce = debounce;\n    lamb.flip = flip;\n    lamb.getArgAt = getArgAt;\n    lamb.invokerOn = invokerOn;\n    lamb.invoker = invoker;\n    lamb.mapArgs = mapArgs;\n    lamb.pipe = pipe;\n    lamb.tapArgs = tapArgs;\n    lamb.throttle = throttle;\n    lamb.unary = unary;\n    lamb.wrap = wrap;\n\n\n    /**\n     * Accepts a series of functions and builds a function that applies the received arguments to each one and\n     * returns the first non <code>undefined</code> value.<br/>\n     * Meant to work in sinergy with {@link module:lamb.condition|condition} and {@link module:lamb.invoker|invoker},\n     * can be useful as a strategy pattern for functions, to mimic conditional logic and also to build polymorphic functions.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var filterString = _.compose(_.invoker(\"join\", \"\"), _.filter);\n     * var filterAdapter = _.adapter(\n     *     _.invoker(\"filter\"),\n     *     _.condition(_.isType(\"String\"), filterString)\n     * );\n     *\n     * filterAdapter([1, 2, 3, 4, 5, 6], isEven)) // => [2, 4, 6]\n     * filterAdapter(\"123456\", isEven)) // => \"246\"\n     * filterAdapter({}, isEven)) // => undefined\n     *\n     * // obviously it's composable\n     * var filterWithDefault = _.adapter(filterAdapter, _.always(\"Not implemented\"));\n     *\n     * filterWithDefault([1, 2, 3, 4, 5, 6], isEven)) // => [2, 4, 6]\n     * filterWithDefault(\"123456\", isEven)) // => \"246\"\n     * filterWithDefault({}, isEven)) // => \"Not implemented\"\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    function adapter () {\n        var functions = slice(arguments);\n\n        return function () {\n            var len = functions.length;\n            var result;\n\n            for (var i = 0; i < len; i++) {\n                result = apply(functions[i], arguments);\n\n                if (!isUndefined(result)) {\n                    break;\n                }\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Builds a predicate that returns true if all the given predicates are satisfied.\n     * The arguments passed to the resulting function are applied to every predicate unless one of them returns false.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var isPositive = function (n) { return n > 0; };\n     * var isPositiveEven = _.allOf(isEven, isPositive);\n     *\n     * isPositiveEven(-2) // => false\n     * isPositiveEven(11) // => false\n     * isPositiveEven(6) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.anyOf|anyOf}\n     * @param {...Function} predicate\n     * @returns {Function}\n     */\n    function allOf () {\n        var predicates = slice(arguments);\n\n        return function () {\n            var args = arguments;\n\n            return predicates.every(function (predicate) {\n                return predicate.apply(null, args);\n            });\n        };\n    }\n\n    /**\n     * Builds a predicate that returns true if at least one of the given predicates is satisfied.\n     * The arguments passed to the resulting function are applied to every predicate until one of them returns true.\n     * @example\n     * // Lamb's \"isNil\" is actually implemented like this\n     * var isNil = _.anyOf(_.isNull, _.isUndefined);\n     *\n     * isNil(NaN) // => false\n     * isNil({}) // => false\n     * isNil(null) // => true\n     * isNil(void 0) // => true\n     * isNil() // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.allOf|allOf}\n     * @param {...Function} predicate\n     * @returns {Function}\n     */\n    function anyOf () {\n        var predicates = slice(arguments);\n\n        return function () {\n            var args = arguments;\n\n            return predicates.some(function (predicate) {\n                return predicate.apply(null, args);\n            });\n        };\n    }\n\n    /**\n     * Builds a function that will apply the received arguments to <code>trueFn</code>, if the predicate is satisfied with\n     * the same arguments, or to <code>falseFn</code> otherwise.<br/>\n     * If <code>falseFn</code> isn't provided and the predicate isn't satisfied the function will return <code>undefined</code>.<br/>\n     * Although you can use other <code>condition</code>s as <code>trueFn</code> or <code>falseFn</code>, it's probably better to\n     * use {@link module:lamb.adapter|adapter} to build more complex behaviours.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0};\n     * var halve = function (n) { return n / 2; };\n     * var halveIfEven = _.condition(isEven, halve, _.identity);\n     *\n     * halveIfEven(5) // => 5\n     * halveIfEven(6) // => 3\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.invoker|invoker}\n     * @param {Function} predicate\n     * @param {Function} trueFn\n     * @param {Function} [falseFn]\n     * @returns {Function}\n     */\n    function condition (predicate, trueFn, falseFn) {\n        return function () {\n            var applyArgsTo = applyArgs(arguments);\n            return applyArgsTo(predicate) ? applyArgsTo(trueFn) : falseFn ? applyArgsTo(falseFn) : void 0;\n        };\n    }\n\n    /**\n     * Verifies that the two supplied values are the same value using the \"SameValue\" comparison.<br/>\n     * Note that this doesn't behave as the strict equality operator, but rather as a shim of ES6's\n     * [Object.is]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is}.\n     * Differences are that <code>0</code> and <code>-0</code> aren't the same value and, finally, <code>NaN</code> is equal to itself.<br/>\n     * See also {@link module:lamb.isSVZ|isSVZ} which performs the check using the \"SameValueZero\" comparison.\n     * @example\n     * var testObject = {};\n     *\n     * _.is({}, testObject) // => false\n     * _.is(testObject, testObject) // => true\n     * _.is(\"foo\", \"foo\") // => true\n     * _.is(0, -0) // => false\n     * _.is(0 / 0, NaN) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see [SameValue comparison]{@link https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevalue}\n     * @see [SameValueZero comparison]{@link https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero}\n     * @param {*} a\n     * @param {*} b\n     * @returns {Boolean}\n     */\n    function is (a, b) {\n        return a === 0 && b === 0 ? 1 / a === 1 / b : isSVZ(a, b);\n    }\n\n    /**\n     * Verifies that the first given value is greater than the second.\n     * @example\n     * var pastDate = new Date(2010, 2, 12);\n     * var today = new Date();\n     *\n     * _.isGT(today, pastDate) // true\n     * _.isGT(pastDate, today) // false\n     * _.isGT(3, 4) // false\n     * _.isGT(3, 3) // false\n     * _.isGT(3, 2) // true\n     * _.isGT(0, -0) // false\n     * _.isGT(-0, 0) // false\n     * _.isGT(\"a\", \"A\") // true\n     * _.isGT(\"b\", \"a\") // true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isGT (a, b) {\n        return a > b;\n    }\n\n    /**\n     * Verifies that the first given value is greater than or equal to the second.\n     * Regarding equality, beware that this is simply a wrapper for the native operator, so <code>-0 === 0</code>.\n     * @example\n     * _.isGTE(3, 4) // false\n     * _.isGTE(3, 3) // true\n     * _.isGTE(3, 2) // true\n     * _.isGTE(0, -0) // true\n     * _.isGTE(-0, 0) // true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isGTE (a, b) {\n        return a >= b;\n    }\n\n    /**\n     * Verifies that the first given value is less than the second.\n     * @example\n     * var pastDate = new Date(2010, 2, 12);\n     * var today = new Date();\n     *\n     * _.isLT(today, pastDate) // false\n     * _.isLT(pastDate, today) // true\n     * _.isLT(3, 4) // true\n     * _.isLT(3, 3) // false\n     * _.isLT(3, 2) // false\n     * _.isLT(0, -0) // false\n     * _.isLT(-0, 0) // false\n     * _.isLT(\"a\", \"A\") // false\n     * _.isLT(\"a\", \"b\") // true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isLT (a, b) {\n        return a < b;\n    }\n\n    /**\n     * Verifies that the first given value is less than or equal to the second.\n     * Regarding equality, beware that this is simply a wrapper for the native operator, so <code>-0 === 0</code>.\n     * @example\n     * _.isLTE(3, 4) // true\n     * _.isLTE(3, 3) // true\n     * _.isLTE(3, 2) // false\n     * _.isLTE(0, -0) // true\n     * _.isLTE(-0, 0) // true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isLTE (a, b) {\n        return a <= b;\n    }\n\n    /**\n     * A simple negation of {@link module:lamb.is|is}, exposed for convenience.\n     * @example\n     * _.isNot(\"foo\", \"foo\") // => false\n     * _.isNot(0, -0) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @function\n     * @param {*} valueA\n     * @param {*} valueB\n     * @returns {Boolean}\n     */\n    var isNot = not(is);\n\n    /**\n     * Verifies that the two supplied values are the same value using the \"SameValueZero\" comparison.<br/>\n     * With this comparison <code>NaN</code> is equal to itself, but <code>0</code> and <code>-0</code> are\n     * considered the same value too.<br/>\n     * See also {@link module:lamb.is|is} to perform a \"SameValue\" comparison.\n     * @example\n     * var testObject = {};\n     *\n     * _.isSVZ({}, testObject) // => false\n     * _.isSVZ(testObject, testObject) // => true\n     * _.isSVZ(\"foo\", \"foo\") // => true\n     * _.isSVZ(0, -0) // => true\n     * _.isSVZ(0 / 0, NaN) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see [SameValue comparison]{@link https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevalue}\n     * @see [SameValueZero comparison]{@link https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero}\n     * @param {*} a\n     * @param {*} b\n     * @returns {Boolean}\n     */\n    function isSVZ (a, b) {\n        return a !== a ? b !== b : a === b;\n    }\n\n    /**\n     * Returns a predicate that negates the given one.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var isOdd = _.not(isEven);\n     *\n     * isOdd(5) // => true\n     * isOdd(4) // => false\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Function} predicate\n     * @returns {Function}\n     */\n    function not (predicate) {\n        return function () {\n            return !predicate.apply(null, arguments);\n        };\n    }\n\n    lamb.adapter = adapter;\n    lamb.allOf = allOf;\n    lamb.anyOf = anyOf;\n    lamb.condition = condition;\n    lamb.is = is;\n    lamb.isGT = isGT;\n    lamb.isGTE = isGTE;\n    lamb.isLT = isLT;\n    lamb.isLTE = isLTE;\n    lamb.isNot = isNot;\n    lamb.isSVZ = isSVZ;\n    lamb.not = not;\n\n\n    /**\n     * Adds two numbers.\n     * @example\n     * _.add(4, 5) // => 9\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function add (a, b) {\n        return a + b;\n    }\n\n    /**\n     * \"Clamps\" a number within the given limits.\n     * @example\n     * _.clamp(-5, 0, 10) // => 0\n     * _.clamp(5, 0, 10) // => 5\n     * _.clamp(15, 0, 10) // => 10\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} n\n     * @param {Number} min\n     * @param {Number} max\n     * @returns {Number}\n     */\n    function clamp (n, min, max) {\n        return n < min ? min : n > max ? max : n;\n    }\n\n    /**\n     * Divides two numbers.\n     * @example\n     * _.divide(5, 2) // => 2.5\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function divide (a, b) {\n        return a / b;\n    }\n\n    /**\n     * Performs the modulo operation and should not be confused with the {@link module:lamb.remainder|remainder}.\n     * The function performs a floored division to calculate the result and not a truncated one, hence the sign of\n     * the dividend is not kept, unlike the {@link module:lamb.remainder|remainder}.\n     * @example\n     * _.modulo(5, 3) // => 2\n     * _.remainder(5, 3) // => 2\n     *\n     * _.modulo(-5, 3) // => 1\n     * _.remainder(-5, 3) // => -2\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link http://en.wikipedia.org/wiki/Modulo_operation}\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function modulo (a, b) {\n        return a - (b * Math.floor(a / b));\n    }\n\n    /**\n     * Multiplies two numbers.\n     * @example\n     * _.multiply(5, 3) // => 15\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function multiply (a, b) {\n        return a * b;\n    }\n\n    /**\n     * Generates a random integer between two given integers, both included.\n     * Note that no safety measure is taken if the provided arguments aren't integers, so\n     * you may end up with unexpected (not really) results.\n     * For example <code>randomInt(0.1, 1.2)</code> could be <code>2</code>.\n     * @example\n     *\n     * _.randomInt(1, 10) // => an integer >=1 && <= 10\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} min\n     * @param {Number} max\n     * @returns {Number}\n     */\n    function randomInt (min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    /**\n     * Generates an arithmetic progression of numbers starting from <code>start</code> up to,\n     * but not including, <code>limit</code>, using the given <code>step</code>.\n     * @example\n     * _.range(2, 10) // => [2, 3, 4, 5, 6, 7, 8, 9]\n     * _.range(2, 10, 0) // => [2]\n     * _.range(1, -10, -2) // => [1, -1, -3, -5, -7, -9]\n     * _.range(1, -10, 2) // => [1]\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} start\n     * @param {Number} limit\n     * @param {Number} [step=1]\n     * @returns {Number[]}\n     */\n    function range (start, limit, step) {\n        if (step === 0 || arguments.length < 2) {\n            return [start];\n        }\n\n        if (!step) {\n            step = 1;\n        }\n\n        var len = Math.max(Math.ceil((limit - start) / step), 0);\n        return sequence(start, len, partial(add, step));\n    }\n\n    /**\n     * Gets the remainder of the division of two numbers.\n     * Not to be confused with the {@link module:lamb.modulo|modulo} as the remainder\n     * keeps the sign of the dividend and may lead to some unexpected results.\n     * @example\n     * // example of wrong usage of the remainder\n     * // (in this case the modulo operation should be used)\n     * var isOdd = function (n) { return _.remainder(n, 2) === 1; };\n     * isOdd(-3) // => false as -3 % 2 === -1\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link http://en.wikipedia.org/wiki/Modulo_operation}\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function remainder (a, b) {\n        return a % b;\n    }\n\n    /**\n     * Generates a sequence of values of the desired length with the provided iteratee.\n     * The values being iterated, and received by the iteratee, are the results generated so far.\n     * @example\n     * var fibonacci = function (n, idx, list) {\n     *     return n + (list[idx - 1] || 0);\n     * };\n     *\n     * _.sequence(1, 10, fibonacci) // => [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {*} start - The starting value\n     * @param {Number} len - The desired length for the sequence\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    function sequence (start, len, iteratee, iterateeContext) {\n        var result = [start];\n\n        for (var i = 0, limit = len - 1; i < limit; i++) {\n            result.push(iteratee.call(iterateeContext, result[i], i, result));\n        }\n\n        return result;\n    }\n\n    /**\n     * Subtracts two numbers.\n     * @example\n     * _.subtract(5, 3) // => 2\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function subtract (a, b) {\n        return a - b;\n    }\n\n    lamb.add = add;\n    lamb.clamp = clamp;\n    lamb.divide = divide;\n    lamb.modulo = modulo;\n    lamb.multiply = multiply;\n    lamb.randomInt = randomInt;\n    lamb.range = range;\n    lamb.remainder = remainder;\n    lamb.sequence = sequence;\n    lamb.subtract = subtract;\n\n\n    function _immutable (obj, seen) {\n        if (seen.indexOf(obj) === -1) {\n            seen.push(Object.freeze(obj));\n\n            Object.getOwnPropertyNames(obj).forEach(function (key) {\n                var value = obj[key];\n\n                if (typeof value === \"object\" && !isNull(value)) {\n                    _immutable(value, seen);\n                }\n            });\n        }\n\n        return obj;\n    }\n\n    function _keyToPair (key) {\n        return [key, this[key]];\n    }\n\n    function _merge (getKeys) {\n        return reduce(slice(arguments, 1), function (result, source) {\n            forEach(getKeys(source), function (key) {\n                result[key] = source[key];\n            });\n\n            return result;\n        }, {});\n    }\n\n    var _pairsFrom = _curry(function (getKeys, obj) {\n        return getKeys(obj).map(_keyToPair, obj);\n    });\n\n    var _tearFrom = _curry(function  (getKeys, obj) {\n        return getKeys(obj).reduce(function (result, key) {\n            result[0].push(key);\n            result[1].push(obj[key]);\n            return result;\n        }, [[], []]);\n    });\n\n    var _valuesFrom = _curry(function (getKeys, obj) {\n        return getKeys(obj).map(partial(getIn, obj));\n    });\n\n    /**\n     * Builds a <code>checker</code> function meant to be used with {@link module:lamb.validate|validate}.<br/>\n     * Note that the function accepts multiple <code>keyPaths</code> as a means to compare their values. In\n     * other words all the received <code>keyPaths</code> will be passed as arguments to the <code>predicate</code>\n     * to run the test.<br/>\n     * If you want to run the same single property check with multiple properties, you should build\n     * multiple <code>checker</code>s and combine them with {@link module:lamb.validate|validate}.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         username: \"jdoe\",\n     *         password: \"abc123\",\n     *         passwordConfirm: \"abc123\"\n     *     }\n     * };\n     * var pwdMatch = _.checker(\n     *     _.is,\n     *     \"Passwords don't match\",\n     *     [\"login.password\", \"login.passwordConfirm\"]\n     * );\n     *\n     * pwdMatch(user) // => []\n     *\n     * user.login.passwordConfirm = \"avc123\";\n     *\n     * pwdMatch(user) // => [\"Passwords don't match\", [\"login.password\", \"login.passwordConfirm\"]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.validate|validate}, {@link module:lamb.validateWith|validateWith}\n     * @param {Function} predicate - The predicate to test the object properties\n     * @param {String} message - The error message\n     * @param {String[]} keyPaths - The array of property names, or {@link module:lamb.getPathIn|paths}, to test.\n     * @param {String} [pathSeparator=\".\"]\n     * @returns {Array<String, String[]>} An error in the form <code>[\"message\", [\"propertyA\", \"propertyB\"]]</code> or an empty array.\n     */\n    function checker (predicate, message, keyPaths, pathSeparator) {\n        return function (obj) {\n            var getValues = partial(getPathIn, obj, _, pathSeparator);\n            return predicate.apply(obj, keyPaths.map(getValues)) ? [] : [message, keyPaths];\n        };\n    }\n\n    /**\n     * Creates an array with all the enumerable properties of the given object.\n     * @example <caption>showing the difference with <code>Object.keys</code></caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3},\n     *     d: {value: 4, enumerable: true}\n     * });\n     *\n     * Object.keys(foo) // => [\"d\"]\n     * _.enumerables(foo) // => [\"d\", \"a\"]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see [Object.keys]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys}\n     * @param {Object} obj\n     * @returns {String[]}\n     */\n    function enumerables (obj) {\n        var keys = [];\n\n        for (var key in obj) {\n            keys.push(key);\n        }\n\n        return keys;\n    }\n\n    /**\n     * Builds an object from a list of key / value pairs like the one\n     * returned by [pairs]{@link module:lamb.pairs} or {@link module:lamb.ownPairs|ownPairs}.<br/>\n     * In case of duplicate keys the last key / value pair is used.\n     * @example\n     * _.fromPairs([[\"a\", 1], [\"b\", 2], [\"c\", 3]]) // => {\"a\": 1, \"b\": 2, \"c\": 3}\n     * _.fromPairs([[\"a\", 1], [\"b\", 2], [\"a\", 3]]) // => {\"a\": 3, \"b\": 2}\n     * _.fromPairs([[1], [void 0, 2], [null, 3]]) // => {\"1\": undefined, \"undefined\": 2, \"null\": 3}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Array<Array<String, *>>} pairsList\n     * @returns {Object}\n     */\n    function fromPairs (pairsList) {\n        var result = {};\n\n        pairsList.forEach(function (pair) {\n            result[pair[0]] = pair[1];\n        });\n\n        return result;\n    }\n\n    /**\n     * Returns the value of the object property with the given key.\n     * @example\n     * var user = {name: \"John\"};\n     *\n     * _.getIn(user, \"name\") // => \"John\";\n     * _.getIn(user, \"surname\") // => undefined\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.getKey|getKey}\n     * @see {@link module:lamb.getPath|getPath}, {@link module:lamb.getPathIn|getPathIn}\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {*}\n     */\n    function getIn (obj, key) {\n        return obj[key];\n    }\n\n    /**\n     * A curried version of {@link module:lamb.getIn|getIn}.<br/>\n     * Receives a property name and builds a function expecting the object from which we want to retrieve the property.\n     * @example\n     * var user1 = {name: \"john\"};\n     * var user2 = {name: \"jane\"};\n     * var getName = _.getKey(\"name\");\n     *\n     * getName(user1) // => \"john\"\n     * getName(user2) // => \"jane\"\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.getIn|getIn}\n     * @see {@link module:lamb.getPath|getPath}, {@link module:lamb.getPathIn|getPathIn}\n     * @function\n     * @param {String} key\n     * @returns {Function}\n     */\n    var getKey = _curry(getIn, 2, true);\n\n    /**\n     * Builds a partial application of {@link module:lamb.getPathIn|getPathIn} with the given\n     * path and separator, expecting the object to act upon.\n     * @example\n     *  var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         \"user.name\": \"jdoe\",\n     *         password: \"abc123\"\n     *     }\n     * };\n     *\n     * var getPwd = _.getPath(\"login.password\");\n     * var getUsername = _.getPath(\"login/user.name\", \"/\");\n     *\n     * getPwd(user) // => \"abc123\";\n     * getUsername(user) // => \"jdoe\"\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.getPathIn|getPathIn}\n     * @see {@link module:lamb.getIn|getIn}, {@link module:lamb.getKey|getKey}\n     * @param {String} path\n     * @param {String} [separator=\".\"]\n     * @returns {Function}\n     */\n    function getPath (path, separator) {\n        return partial(getPathIn, _, path, separator);\n    }\n\n    /**\n     * Gets a nested property value from an object using the given path.<br/>\n     * The path is a string with property names separated by dots by default, but\n     * it can be customised with the optional third parameter.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         \"user.name\": \"jdoe\",\n     *         password: \"abc123\"\n     *     }\n     * };\n     *\n     * // same as _.getIn if no path is involved\n     * _.getPathIn(user, \"name\") // => \"John\"\n     *\n     * _.getPathIn(user, \"login.password\") // => \"abc123\";\n     * _.getPathIn(user, \"login/user.name\", \"/\") // => \"jdoe\"\n     * _.getPathIn(user, \"name.foo\") // => undefined\n     * _.getPathIn(user, \"name.foo.bar\") // => throws a TypeError\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.getPath|getPath}\n     * @see {@link module:lamb.getIn|getIn}, {@link module:lamb.getKey|getKey}\n     * @param {Object|ArrayLike} obj\n     * @param {String} path\n     * @param {String} [separator=\".\"]\n     * @returns {*}\n     */\n    function getPathIn (obj, path, separator) {\n        return path.split(separator || \".\").reduce(getIn, obj);\n    }\n\n    /**\n     * Verifies the existence of a property in an object.\n     * @example\n     * var user1 = {name: \"john\"};\n     *\n     * _.has(user1, \"name\") // => true\n     * _.has(user1, \"surname\") // => false\n     * _.has(user1, \"toString\") // => true\n     *\n     * var user2 = Object.create(null);\n     *\n     * // not inherited through the prototype chain\n     * _.has(user2, \"toString\") // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    function has (obj, key) {\n        return key in obj;\n    }\n\n    /**\n     * Curried version of {@link module:lamb.has|has}.<br/>\n     * Returns a function expecting the object to check against the given key.\n     * @example\n     * var user1 = {name: \"john\"};\n     * var user2 = {};\n     * var hasName = _.hasKey(\"name\");\n     *\n     * hasName(user1) // => true\n     * hasName(user2) // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {String} key\n     * @returns {Function}\n     */\n    var hasKey = _curry(has, 2, true);\n\n    /**\n     * Builds a function expecting an object to check against the given key / value pair.\n     * @example\n     * var hasTheCorrectAnswer = _.hasKeyValue(\"answer\", 42);\n     *\n     * hasTheCorrectAnswer({answer: 2}) // false\n     * hasTheCorrectAnswer({answer: 42}) // true\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {String} key\n     * @param {*} value\n     * @returns {Function}\n     */\n    var hasKeyValue = function (key, value) {\n        return compose(partial(is, value), getKey(key));\n    };\n\n    /**\n     * Verifies if an object has the specified property and that the property isn't inherited through\n     * the prototype chain.<br/>\n     * @example <caption>Comparison with <code>has</code>.</caption>\n     * var user = {name: \"john\"};\n     *\n     * _.has(user, \"name\") // => true\n     * _.has(user, \"surname\") // => false\n     * _.has(user, \"toString\") // => true\n     *\n     * _.hasOwn(user, \"name\") // => true\n     * _.hasOwn(user, \"surname\") // => false\n     * _.hasOwn(user, \"toString\") // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    var hasOwn = generic(_objectProto.hasOwnProperty);\n\n    /**\n     * Curried version of {@link module:lamb.hasOwn|hasOwn}.<br/>\n     * Returns a function expecting the object to check against the given key.\n     * @example\n     * var user = {name: \"john\"};\n     * var hasOwnName = _.hasOwnKey(\"name\");\n     * var hasOwnToString = _.hasOwnToString(\"toString\");\n     *\n     * hasOwnName(user) // => true\n     * hasOwnToString(user) // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {String} key\n     * @returns {Function}\n     */\n    var hasOwnKey = _curry(hasOwn, 2, true);\n\n    /**\n     * Makes an object immutable by recursively calling [Object.freeze]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze}\n     * on its members.<br/>\n     * Any attempt to extend or modify the object can throw a <code>TypeError</code> or fail silently,\n     * depending on the environment and the [strict mode]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode} directive.\n     * @example\n     * var user = _.immutable({\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         username: \"jdoe\",\n     *         password: \"abc123\"\n     *     },\n     *     luckyNumbers: [13, 17]\n     * });\n     *\n     * // All of these statements will fail and possibly\n     * // throw a TypeError (see the function description)\n     * user.name = \"Joe\";\n     * delete user.name;\n     * user.newProperty = [];\n     * user.login.password = \"foo\";\n     * user.luckyNumbers.push(-13);\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @returns {Object}\n     */\n    function immutable (obj) {\n        return _immutable(obj, []);\n    }\n\n    /**\n     * Builds an object from the two given lists, using the first one as keys and the last one as values.<br/>\n     * If the list of keys is longer than the values one, the keys will be created with <code>undefined</code> values.<br/>\n     * If more values than keys are supplied, the extra values will be ignored.<br/>\n     * See also {@link module:lamb.tear|tear} and {@link module:lamb.tearOwn|tearOwn} for the reverse operation.\n     * @example\n     * _.make([\"a\", \"b\", \"c\"], [1, 2, 3]) // => {a: 1, b: 2, c: 3}\n     * _.make([\"a\", \"b\", \"c\"], [1, 2]) // => {a: 1, b: 2, c: undefined}\n     * _.make([\"a\", \"b\"], [1, 2, 3]) // => {a: 1, b: 2}\n     * _.make([null, void 0, 2], [1, 2, 3]) // => {\"null\": 1, \"undefined\": 2, \"2\": 3}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {String[]} keys\n     * @param {Array} values\n     * @returns {Object}\n     */\n    function make (keys, values) {\n        var result = {};\n        var valuesLen = values.length;\n\n        for (var i = 0, len = keys.length; i < len; i++) {\n            result[keys[i]] = i < valuesLen ? values[i] : void 0;\n        }\n\n        return result;\n    }\n\n    /**\n     * Merges the enumerable properties of the provided sources into a new object.<br/>\n     * In case of key homonymy each source has precedence over the previous one.<br/>\n     * See also {@link module:lamb.mergeOwn|mergeOwn} for merging only own properties of\n     * the given sources.\n     * @example\n     * _.merge({a: 1}, {b: 3, c: 4}, {b: 5}) // => {a: 1, b: 5, c: 4}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {...Object} source\n     * @returns {Object}\n     */\n    var merge = partial(_merge, enumerables);\n\n    /**\n     * Same as {@link module:lamb.merge|merge}, but only the own properties of the sources are taken into account.\n     * @example <caption>showing the difference with <code>merge</code></caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2, enumerable: true}, z: {value: 5}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3, enumerable: true}\n     * });\n     *\n     * var bar = {d: 4};\n     *\n     * _.merge(foo, bar) // => {a: 1, b: 2, c: 3, d: 4}\n     * _.mergeOwn(foo, bar) // => {c: 3, d: 4}\n     *\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {...Object} source\n     * @returns {Object}\n     */\n    var mergeOwn = partial(_merge, Object.keys);\n\n    /**\n     * Same as {@link module:lamb.pairs|pairs}, but only the own enumerable properties of the object are\n     * taken into account.<br/>\n     * See also {@link module:lamb.fromPairs|fromPairs} for the reverse operation.\n     * @example <caption>showing the difference with <code>pairs</code></caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2, enumerable: true}, z: {value: 5}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3, enumerable: true}\n     * });\n     *\n     * _.pairs(foo) // => [[\"c\", 3], [\"b\", 2], [\"a\", 1]]\n     * _.ownPairs(foo) // => [[\"c\", 3]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {Object} obj\n     * @returns {Array<Array<String, *>>}\n     */\n    var ownPairs = _pairsFrom(Object.keys);\n\n    /**\n     * Same as {@link module:lamb.values|values}, but only the own enumerable properties of the object are\n     * taken into account.<br/>\n     * @example <caption>showing the difference with <code>values</code></caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2, enumerable: true}, z: {value: 5}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3, enumerable: true}\n     * });\n     *\n     * _.values(foo) // => [3, 2, 1]\n     * _.ownValues(foo) // => [3]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {Object} obj\n     * @returns {Array}\n     */\n    var ownValues = _valuesFrom(Object.keys);\n\n    /**\n     * Converts an object into an array of key / value pairs of its enumerable properties.<br/>\n     * See also {@link module:lamb.ownPairs|ownPairs} for picking only the own enumerable\n     * properties and {@link module:lamb.fromPairs|fromPairs} for the reverse operation.\n     * @example\n     * _.pairs({a: 1, b: 2, c: 3}) // => [[\"a\", 1], [\"b\", 2], [\"c\", 3]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {Object} obj\n     * @returns {Array<Array<String, *>>}\n     */\n    var pairs = _pairsFrom(enumerables);\n\n    /**\n     * Returns an object containing only the specified properties of the given object.<br/>\n     * Non existent properties will be ignored.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.pick(user, [\"name\", \"age\"]) // => {\"name\": \"john\", \"age\": 30};\n     * _.pick(user, [\"name\", \"email\"]) // => {\"name\": \"john\"}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.pickIf|pickIf}\n     * @param {Object} source\n     * @param {String[]} whitelist\n     * @returns {Object}\n     */\n    function pick (source, whitelist) {\n        var result = {};\n\n        whitelist.forEach(function (key) {\n            if (key in source) {\n                result[key] = source[key];\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Builds a function expecting an object whose properties will be checked against the given predicate.<br/>\n     * The properties satisfying the predicate will be included in the resulting object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     * var pickIfIsString = _.pickIf(_.isType(\"String\"));\n     *\n     * pickIfIsString(user) // => {name: \"john\", surname: \"doe\"}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.pick|pick}\n     * @param {ObjectIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    function pickIf (predicate, predicateContext) {\n        return function (source) {\n            var result = {};\n\n            for (var key in source) {\n                if (predicate.call(predicateContext, source[key], key, source)) {\n                    result[key] = source[key];\n                }\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Sets the specified key to the given value in a copy of the provided object.<br/>\n     * All the enumerable keys of the source object will be simply copied to an empty\n     * object without breaking references.<br/>\n     * If the specified key is not part of the source object, it will be added to the\n     * result.<br/>\n     * The main purpose of the function is to work on simple plain objects used as\n     * data structures, such as JSON objects, and makes no effort to play nice with\n     * objects created from an OOP perspective (it's not worth it).<br/>\n     * For example the prototype of the result will be <code>Object</code>'s regardless\n     * of the <code>source</code>'s one.\n     * @example\n     * var user = {name: \"John\", surname: \"Doe\", age: 30};\n     *\n     * _.setIn(user, \"name\", \"Jane\") // => {name: \"Jane\", surname: \"Doe\", age: 30}\n     *\n     * // `user` still is {name: \"John\", surname: \"Doe\", age: 30}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.setKey|setKey}\n     * @param {Object} source\n     * @param {String} key\n     * @param {*} value\n     * @returns {Object}\n     */\n    function setIn (source, key, value) {\n        return _merge(enumerables, source, make([key], [value]));\n    }\n\n    /**\n     * Builds a partial application of {@link module:lamb.setIn|setIn} with the provided\n     * <code>key</code> and <code>value</code>.<br/>\n     * The resulting function expects the object to act upon.<br/>\n     * Please refer to {@link module:lamb.setIn|setIn}'s description for explanations about\n     * how the copy of the source object is made.\n     * @example\n     * var user = {name: \"John\", surname: \"Doe\", age: 30};\n     * var setAgeTo40 = _.setKey(\"age\", 40);\n     *\n     * setAgeTo40(user) // => {name: \"john\", surname: \"doe\", age: 40}\n     *\n     * // `user` still is {name: \"John\", surname: \"Doe\", age: 30}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.setIn|setIn}\n     * @param {String} key\n     * @param {*} value\n     * @returns {Function}\n     */\n    function setKey (key, value) {\n        return partial(setIn, _, key, value);\n    }\n\n    /**\n     * Returns a copy of the source object without the specified properties.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.skip(user, [\"name\", \"age\"]) // => {surname: \"doe\"};\n     * _.skip(user, [\"name\", \"email\"]) // => {surname: \"doe\", age: 30};\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.skipIf|skipIf}\n     * @param {Object} source\n     * @param {String[]} blacklist\n     * @returns {Object}\n     */\n    function skip (source, blacklist) {\n        var result = {};\n\n        for (var key in source) {\n            if (blacklist.indexOf(key) === -1) {\n                result[key] = source[key];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds a function expecting an object whose properties will be checked against the given predicate.<br/>\n     * The properties satisfying the predicate will be omitted in the resulting object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     * var skipIfIstring = _.skipIf(_.isType(\"String\"));\n     *\n     * skipIfIstring(user) // => {age: 30}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.skip|skip}\n     * @param {ObjectIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    function skipIf (predicate, predicateContext) {\n        return pickIf(not(predicate), predicateContext);\n    }\n\n    /**\n     * Tears an object apart by transforming it in an array of two lists: one containing its enumerable keys,\n     * the other containing the corresponding values.<br/>\n     * Although this \"tearing apart\" may sound as a rather violent process, the source object will be unharmed.<br/>\n     * See also {@link module:lamb.tearOwn|tearOwn} for picking only the own enumerable properties and\n     * {@link module:lamb.make|make} for the reverse operation.\n     * @example\n     * _.tear({a: 1, b: 2, c: 3}) // => [[\"a\", \"b\", \"c\"], [1, 2, 3]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {Object} obj\n     * @returns {Array<Array<String>, Array<*>>}\n     */\n    var tear = _tearFrom(enumerables);\n\n    /**\n     * Same as {@link module:lamb.tear|tear}, but only the own properties of the object are taken into account.<br/>\n     * See also {@link module:lamb.make|make} for the reverse operation.\n     * @example <caption>showing the difference with <code>tear</code></caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2, enumerable: true}, z: {value: 5}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3, enumerable: true}\n     * });\n     *\n     * _.tear(foo) // => [[\"c\", \"b\", \"a\"], [3, 2, 1]]\n     * _.tearOwn(foo) // => [[\"c\"], [3]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {Object} obj\n     * @returns {Array<Array<String>, Array<*>>}\n     */\n    var tearOwn = _tearFrom(Object.keys);\n\n    /**\n     * Validates an object with the given list of {@link module:lamb.checker|checker} functions.\n     * @example\n     * var hasContent = function (s) { return s.trim().length > 0; };\n     * var isAdult = function (age) { return age >= 18; };\n     * var userCheckers = [\n     *     _.checker(hasContent, \"Name is required\", [\"name\"]),\n     *     _.checker(hasContent, \"Surname is required\", [\"surname\"]),\n     *     _.checker(isAdult, \"Must be at least 18 years old\", [\"age\"])\n     * ];\n     *\n     * var user1 = {name: \"john\", surname: \"doe\", age: 30};\n     * var user2 = {name: \"jane\", surname: \"\", age: 15};\n     *\n     * _.validate(user1, userCheckers) // => []\n     * _.validate(user2, userCheckers) // => [[\"Surname is required\", [\"surname\"]], [\"Must be at least 18 years old\", [\"age\"]]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.validateWith|validateWith}\n     * @see {@link module:lamb.checker|checker}\n     * @param {Object} obj\n     * @param {Function[]} checkers\n     * @returns {Array<Array<String, String[]>>} An array of errors in the form returned by {@link module:lamb.checker|checker}, or an empty array.\n     */\n    function validate (obj, checkers) {\n        return checkers.reduce(function (errors, checker) {\n            var result = checker(obj);\n            result.length && errors.push(result);\n            return errors;\n        }, []);\n    }\n\n    /**\n     * A curried version of {@link module:lamb.validate|validate} accepting a list of {@link module:lamb.checker|checkers} and\n     * returning a function expecting the object to validate.\n     * @example\n     * var hasContent = function (s) { return s.trim().length > 0; };\n     * var isAdult = function (age) { return age >= 18; };\n     * var userCheckers = [\n     *     _.checker(hasContent, \"Name is required\", [\"name\"]),\n     *     _.checker(hasContent, \"Surname is required\", [\"surname\"]),\n     *     _.checker(isAdult, \"Must be at least 18 years old\", [\"age\"])\n     * ];\n     * var validateUser = _.validateWith(userCheckers);\n     *\n     * var user1 = {name: \"john\", surname: \"doe\", age: 30};\n     * var user2 = {name: \"jane\", surname: \"\", age: 15};\n     *\n     * validateUser(user1) // => []\n     * validateUser(user2) // => [[\"Surname is required\", [\"surname\"]], [\"Must be at least 18 years old\", [\"age\"]]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.validate|validate}\n     * @see {@link module:lamb.checker|checker}\n     * @function\n     * @param {Function[]} checkers\n     * @returns {Function}\n     */\n    var validateWith = _curry(validate, 2, true);\n\n    /**\n     * Generates an array with the values of the enumerable properties of the given object.<br/>\n     * See also {@link module:lamb.ownValues|ownValues} for picking only the own properties of the object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.values(user) // => [\"john\", \"doe\", 30]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {Object} obj\n     * @returns {Array}\n     */\n    var values = _valuesFrom(enumerables);\n\n    lamb.checker = checker;\n    lamb.enumerables = enumerables;\n    lamb.fromPairs = fromPairs;\n    lamb.getIn = getIn;\n    lamb.getKey = getKey;\n    lamb.getPath = getPath;\n    lamb.getPathIn = getPathIn;\n    lamb.has = has;\n    lamb.hasKey = hasKey;\n    lamb.hasKeyValue = hasKeyValue;\n    lamb.hasOwn = hasOwn;\n    lamb.hasOwnKey = hasOwnKey;\n    lamb.immutable = immutable;\n    lamb.make = make;\n    lamb.merge = merge;\n    lamb.mergeOwn = mergeOwn;\n    lamb.ownPairs = ownPairs;\n    lamb.ownValues = ownValues;\n    lamb.pairs = pairs;\n    lamb.pick = pick;\n    lamb.pickIf = pickIf;\n    lamb.setIn = setIn;\n    lamb.setKey = setKey;\n    lamb.skip = skip;\n    lamb.skipIf = skipIf;\n    lamb.tear = tear;\n    lamb.tearOwn = tearOwn;\n    lamb.validate = validate;\n    lamb.validateWith = validateWith;\n    lamb.values = values;\n\n\n    function _getPadding (source, char, len) {\n        return repeat(char[0] || \" \", Math.ceil(len - source.length));\n    }\n\n    /**\n     * Pads a string to the desired length with the given char starting from the beginning of the string.\n     * @example\n     * _.padLeft(\"foo\", \"-\", 0) // => \"foo\"\n     * _.padLeft(\"foo\", \"-\", -1) // => \"foo\"\n     * _.padLeft(\"foo\", \"-\", 5) // => \"--foo\"\n     * _.padLeft(\"foo\", \"-\", 3) // => \"foo\"\n     * _.padLeft(\"foo\", \"ab\", 7) // => \"aaaafoo\"\n     * _.padLeft(\"foo\", \"\", 5) // => \"  foo\"\n     * _.padLeft(\"\", \"-\", 5) // => \"-----\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {String} source\n     * @param {String} [char=\" \"] - The padding char. If a string is passed only the first char is used.\n     * @param {Number} len\n     * @returns {String}\n     */\n    function padLeft (source, char, len) {\n        return _getPadding(source, char, len) + source;\n    }\n\n    /**\n     * Pads a string to the desired length with the given char starting from the end of the string.\n     * @example\n     * _.padRight(\"foo\", \"-\", 0) // => \"foo\"\n     * _.padRight(\"foo\", \"-\", -1) // => \"foo\"\n     * _.padRight(\"foo\", \"-\", 5) // => \"foo--\"\n     * _.padRight(\"foo\", \"-\", 3) // => \"foo\"\n     * _.padRight(\"foo\", \"ab\", 7) // => \"fooaaaa\"\n     * _.padRight(\"foo\", \"\", 5) // => \"foo  \"\n     * _.padRight(\"\", \"-\", 5) // => \"-----\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {String} source\n     * @param {String} [char=\" \"] - The padding char. If a string is passed only the first char is used.\n     * @param {Number} len\n     * @returns {String}\n     */\n    function padRight (source, char, len) {\n        return source + _getPadding(source, char, len);\n    }\n\n    /**\n     * Builds a new string by repeating the source string the desired amount of times.<br/>\n     * Note that unlike the current ES6 proposal for [String.prototype.repeat]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat},\n     * this function doesn't throw a RangeError if <code>count</code> is negative, but returns an empty string instead.\n     * @example\n     * _.repeat(\"Hello\", -1) // => \"\"\n     * _.repeat(\"Hello\", 1) // => \"Hello\"\n     * _.repeat(\"Hello\", 3) // => \"HelloHelloHello\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {String} source\n     * @param {Number} count\n     * @returns {String}\n     */\n    function repeat (source, count) {\n        var result = \"\";\n\n        for (var i = 0; i < count; i++) {\n            result += source;\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds a predicate expecting a string to test against the given regular expression pattern.\n     * @example\n     * var hasNumbersOnly = _.testWith(/^\\d+$/);\n     *\n     * hasNumbersOnly(\"123\") // => true\n     * hasNumbersOnly(\"123 Kg\") // => false\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {RegExp} pattern\n     * @returns {Function}\n     */\n    function testWith (pattern) {\n        return _reProto.test.bind(pattern);\n    }\n\n    lamb.padLeft = padLeft;\n    lamb.padRight = padRight;\n    lamb.repeat = repeat;\n    lamb.testWith = testWith;\n\n\n    /**\n     * Verifies if a value is <code>null</code> or <code>undefined</code>.\n     * @example\n     * _.isNil(NaN) // => false\n     * _.isNil({}) // => false\n     * _.isNil(null) // => true\n     * _.isNil(void 0) // => true\n     * _.isNil() // => true\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.isNull|isNull} and {@link module:lamb.isNull|isUndefined} for individual checks.\n     * @function\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    var isNil = anyOf(isNull, isUndefined);\n\n    /**\n     * Verifies if a value is <code>null</code>.\n     * @example\n     * _.isNull(null) // => true\n     * _.isNull(void 0) // => false\n     * _.isNull(false) // => false\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.isNil|isNil} if you want to check for <code>undefined</code> too.\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isNull (value) {\n        return value === null;\n    }\n\n    /**\n     * Builds a predicate that expects a value to check against the specified type.\n     * @example\n     * var isString = _.isType(\"String\");\n     *\n     * isString(\"Hello\") // => true\n     * isString(new String(\"Hi\")) // => true\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.type|type}\n     * @param {String} typeTag\n     * @returns {Function}\n     */\n    function isType (typeName) {\n        return function (value) {\n            return type(value) === typeName;\n        };\n    }\n\n    /**\n     * Verifies if a value is <code>undefined</code>.\n     * @example\n     * _.isUndefined(null) // => false\n     * _.isUndefined(void 0) // => true\n     * _.isUndefined(false) // => false\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.isNil|isNil} if you want to check for <code>null</code> too.\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isUndefined (value) {\n        // using void because undefined could be theoretically shadowed\n        return value === void 0;\n    }\n\n    /**\n     * Retrieves the \"type tag\" from the given value.\n     * @example\n     * var x = 5;\n     * var y = new Number(5);\n     *\n     * typeof x // => \"number\"\n     * typeof y // => \"object\"\n     * _.type(x) // => \"Number\"\n     * _.type(y) // => \"Number\"\n     *\n     * _.type(Object.prototype.toString) // => \"Function\"\n     * _.type(/a/) // => \"RegExp\"\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.isType|isType}\n     * @param {*} value\n     * @returns {String}\n     */\n    function type (value) {\n        return _objectProto.toString.call(value).replace(/^\\[\\w+\\s+|\\]$/g, \"\");\n    }\n\n    lamb.isNil = isNil;\n    lamb.isNull = isNull;\n    lamb.isType = isType;\n    lamb.isUndefined = isUndefined;\n    lamb.type = type;\n\n    /* istanbul ignore next */\n    if (typeof exports === \"object\") {\n        module.exports = lamb;\n    } else if (typeof define === \"function\" && define.amd) {\n        define(function() { return lamb; });\n    } else {\n        host.lamb = lamb;\n    }\n}(this);\n\n/**\n * @callback AccumulatorCallback\n * @global\n * @param {*} previousValue The value returned it the last execution of the accumulator or, in the first iteration, the {@link module:lamb.reduce|initialValue} if supplied.\n * @param {*} currentValue The value being processed in the current iteration.\n * @param {Number} idx - The index of the element being processed.\n * @param {ArrayLike} arrayLike - The list being traversed.\n */\n\n/**\n * The built-in arguments object.\n * @typedef {arguments} arguments\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments|arguments} in Mozilla documentation.\n */\n\n/**\n * The built-in Array object.\n * @typedef {Array} Array\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array|Array} in Mozilla documentation.\n */\n\n/**\n * Any array-like object.\n * @typedef {Array|String|arguments|?} ArrayLike\n * @global\n */\n\n/**\n * The built-in Boolean object.\n * @typedef {Boolean} Boolean\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean|Boolean} in Mozilla documentation.\n */\n\n/**\n * The built-in Date object.\n * @typedef {Date} Date\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date|Date} in Mozilla documentation.\n */\n\n/**\n * The built-in Function object.\n * @typedef {Function} function\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function|Function} and\n *      {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions|Functions} in Mozilla documentation.\n */\n\n/**\n * @callback ListIteratorCallback\n * @global\n * @param {*} element - The element being evaluated.\n * @param {Number} idx - The index of the element within the list.\n * @param {ArrayLike} arrayLike - The list being traversed.\n */\n\n/**\n * The built-in Number object.\n * @typedef {Number} Number\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number} in Mozilla documentation.\n */\n\n/**\n * The built-in Object object.\n * @typedef {Object} Object\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object|Object} in Mozilla documentation.\n */\n\n/**\n * @callback ObjectIteratorCallback\n * @global\n * @param {*} value - The value of the current property.\n * @param {String} key - The property name.\n * @param {Object} source - The object being traversed.\n */\n\n/**\n * The built-in RegExp object.\n * @typedef {RegExp} RegExp\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp|RegExp} in Mozilla documentation.\n */\n\n/**\n * Represent a sorting criteria used by {@link module:lamb.insert|insert}, {@link module:lamb.sort|sort} and {@link module:lamb.sortWith|sortWith},\n * and it's usually built using {@link module:lamb.sorter|sorter} and {@link module:lamb.sorterDesc|sorterDesc}.\n * @typedef {Sorter} Sorter\n * @global\n * @property {Boolean} isDescending\n * @property {Function} compare\n */\n\n/**\n * The built-in String object.\n * @typedef {String} String\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String|String} in Mozilla documentation.\n */\n"],"sourceRoot":"/source/"}