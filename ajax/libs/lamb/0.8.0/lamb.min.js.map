{"version":3,"sources":["lamb.js"],"names":["host","always","value","compose","functions","arguments","args","len","length","apply","this","identity","partial","fn","slice","boundArg","lastArgumentIdx","newArgs","argsLen","i","_","push","_findSliceEndIndex","arrayLike","predicate","predicateContext","idx","call","_flatten","array","output","forEach","Array","isArray","_shallowFlatten","_arrayProto","concat","_getInsertionIndex","element","comparer","reader","start","end","sorter","ascending","pivot","compared","difference","rest","filter","item","indexOf","dropWhile","find","result","findIndex","flatten","doShallow","group","iteratee","iterateeContext","key","groupBy","intersection","uniques","every","other","insert","splice","list","mapWith","map","pluck","getKey","a","b","takeWhile","seen","_currier","arity","isRightCurry","slicer","argsHolder","reverse","_curry","isAutoCurry","aritize","curry","curryable","debounce","timespan","timeoutID","context","debounced","clearTimeout","setTimeout","flip","invoker","methodName","boundArgs","target","method","typeOf","mapArgs","mapper","tapArgs","readers","throttle","lastCall","now","Date","adapter","isUndefined","allOf","predicates","anyOf","some","condition","trueFn","falseFn","applyArgsTo","applyArgs","is","isGT","isGTE","isLT","isLTE","not","add","divide","modulo","Math","floor","multiply","randomInt","min","max","random","range","limit","step","ceil","sequence","remainder","subtract","_immutable","obj","Object","freeze","getOwnPropertyNames","isNull","checker","message","keyPaths","pathSeparator","getValues","getWithPath","fromPairs","pairsList","pair","get","path","separator","split","reduce","has","immutable","make","keys","values","valuesLen","pairs","prop","pick","source","whitelist","pickIf","skip","blacklist","skipIf","tear","validate","checkers","errors","_getPadding","char","repeat","padLeft","padRight","count","testWith","pattern","_reProto","test","bind","isType","type","_objectProto","toString","replace","lamb","create","_version","prototype","_fnProto","Function","RegExp","generic","reduceRight","_concat","drop","dropN","flatMap","descending","take","takeN","union","pipe","wrap","isNot","hasKey","hasKeyValue","hasOwn","hasOwnProperty","hasOwnKey","validateWith","isNil","exports","module","define","amd"],"mappings":"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","file":"lamb.min.js","sourcesContent":["/**\n * @overview lamb - A lightweight, and docile, JavaScript library to help embracing functional programming.\n * @author Andrea Scartabelli <andrea.scartabelli@gmail.com>\n * @version 0.8.0\n * @module lamb\n * @license MIT\n * @preserve\n */\n!function (host) {\n    \"use strict\";\n\n    var lamb = Object.create(null);\n\n    /**\n     * The current module version.\n     * @memberof module:lamb\n     * @private\n     * @category Core\n     * @type String\n     */\n    lamb._version =  \"0.8.0\";\n    \n    // alias used as a placeholder argument for partial application\n    var _ = lamb;\n    \n    // some prototype shortcuts for internal use\n    var _arrayProto = Array.prototype;\n    var _fnProto = Function.prototype;\n    var _objectProto = Object.prototype;\n    var _reProto = RegExp.prototype;\n    \n    /**\n     * Builds a function that returns a constant value.\n     * It's actually the simplest form of the K combinator or Kestrel.\n     * @example\n     * var truth = _.always(true);\n     *\n     * truth() // => true\n     * truth(false) // => true\n     * truth(1, 2) // => true\n     *\n     * // the value being returned is actually the\n     * // very same value passed to the function\n     * var foo = {bar: \"baz\"};\n     * var alwaysFoo = _.always(foo);\n     *\n     * alwaysFoo() === foo // => true\n     *\n     * @memberof module:lamb\n     * @category Core\n     * @see [SKI combinator calculus]{@link https://en.wikipedia.org/wiki/SKI_combinator_calculus}\n     * @param {*} value\n     * @returns {Function}\n     */\n    function always (value) {\n        return function () {\n            return value;\n        };\n    }\n    \n    /**\n     * Returns a function that is the composition of the functions given as parameters.\n     * Each function consumes the result of the function that follows.\n     * @example\n     * var sayHi = function (name) { return \"Hi, \" + name; };\n     * var capitalize = function (s) {\n     *     return s[0].toUpperCase() + s.substr(1).toLowerCase();\n     * };\n     * var fixNameAndSayHi = _.compose(sayHi, capitalize);\n     *\n     * sayHi(\"bOb\") // => \"Hi, bOb\"\n     * fixNameAndSayHi(\"bOb\") // \"Hi, Bob\"\n     *\n     * var getName = _.getKey(\"name\");\n     * var users = [{name: \"fred\"}, {name: \"bOb\"}];\n     * var sayHiToUser = _.compose(fixNameAndSayHi, getName);\n     *\n     * users.map(sayHiToUser) // [\"Hi, Fred\", \"Hi, Bob\"]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    function compose () {\n        var functions = arguments;\n    \n        return function () {\n            var args = arguments;\n            var len = functions.length;\n    \n            while (len--) {\n                args = [functions[len].apply(this, args)];\n            }\n    \n            return args[0];\n        };\n    }\n    \n    /**\n     * Creates generic functions out of methods.\n     * @memberof module:lamb\n     * @category Core\n     * @author [Irakli Gozalishvili]{@link https://github.com/Gozala/}. Thanks for this *beautiful* one-liner (never liked your \"unbind\" naming choice, though).\n     * @function\n     * @example\n     * // Lamb's \"filter\" is actually implemented like this\n     * var filter = _.generic(Array.prototype.filter);\n     * var isLowerCase = function (s) { return s.toUpperCase() !== s; };\n     *\n     * filter([\"Foo\", \"bar\", \"baZ\"], isLowerCase) // => [\"bar\"]\n     *\n     * // the function will work with any array-like object\n     * filter(\"fooBAR\", isLowerCase) // => [\"f\", \"o\", \"o\"]\n     *\n     * @param {Function} method\n     * @returns {Function}\n     */\n    var generic = _fnProto.call.bind(_fnProto.bind, _fnProto.call);\n    \n    /**\n     * The I combinator. Any value passed to the function is simply returned as it is.\n     * @example\n     * var foo = {bar: \"baz\"};\n     *\n     * _.identity(foo) === foo // true\n     *\n     * @memberof module:lamb\n     * @category Core\n     * @see [SKI combinator calculus]{@link https://en.wikipedia.org/wiki/SKI_combinator_calculus}\n     * @param {*} value\n     * @returns {*} The value passed as parameter.\n     */\n    function identity (value) {\n        return value;\n    }\n    \n    /**\n     * Builds a partially applied function. The <code>lamb</code> object itself can be used as a placeholder argument:\n     * it's useful to alias it as <code>_</code> or <code>__</code>.\n     * @example\n     * var weights = [\"2 Kg\", \"10 Kg\", \"1 Kg\", \"7 Kg\"];\n     * var parseInt10 = _.partial(parseInt, _, 10);\n     *\n     * weights.map(parseInt10) // => [2, 10, 1, 7]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {...*} args\n     * @returns {Function}\n     */\n    function partial (fn) {\n        var args = slice(arguments, 1);\n    \n        return function () {\n            var lastArgumentIdx = 0;\n            var newArgs = [];\n            var argsLen = args.length;\n    \n            for (var i = 0, boundArg; i < argsLen; i++) {\n                boundArg = args[i];\n                newArgs[i] = boundArg === _ ? arguments[lastArgumentIdx++] : boundArg;\n            }\n    \n            for (var len = arguments.length; lastArgumentIdx < len; lastArgumentIdx++) {\n                newArgs.push(arguments[lastArgumentIdx]);\n            }\n    \n            return fn.apply(this, newArgs);\n        };\n    }\n    \n    lamb.always = always;\n    lamb.compose = compose;\n    lamb.generic = generic;\n    lamb.identity = identity;\n    lamb.partial = partial;\n    \n    \n    /**\n     * Builds an array comprised of all values of the array-like object passing the <code>predicate</code> test.<br/>\n     * It's a generic version of [Array.prototype.filter]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter}.\n     * @example\n     * var isLowerCase = function (s) { return s.toUpperCase() !== s; };\n     *\n     * _.filter([\"Foo\", \"bar\", \"baZ\"], isLowerCase) // => [\"bar\"]\n     *\n     * // the function will work with any array-like object\n     * _.filter(\"fooBAR\", isLowerCase) // => [\"f\", \"o\", \"o\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Array}\n     */\n    var filter = generic(_arrayProto.filter);\n    \n    /**\n     * Executes the provided <code>iteratee</code> for each element of the given array-like object.<br/>\n     * It's a generic version of [Array.prototype.forEach]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach}.\n     * @example <caption>Adding a CSS class to all elements of a NodeList in a browser environment</caption>\n     * var addClass = function (className) {\n     *     return function (element) {\n     *         element.classList.add(className);\n     *     };\n     * };\n     * var paragraphs = document.querySelectorAll(\"#some-container p\");\n     *\n     * _.forEach(paragraphs, addClass(\"main\"));\n     * // each \"p\" element in the container will have the \"main\" class now\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     */\n    var forEach = generic(_arrayProto.forEach);\n    \n    /**\n     * Creates an array from the results of the provided <code>iteratee</code>.<br/>\n     * It's a generic version of [Array.prototype.map]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map}.\n     * @example\n     * function getSquareRoots () {\n     *     return _.map(arguments, Math.sqrt);\n     * }\n     *\n     * getSquareRoots(4, 9, 16) // => [2, 3, 4]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    var map = generic(_arrayProto.map);\n    \n    /**\n     * Reduces (or folds) the values of an array-like object, starting from the first, to a new value using the provided <code>accumulator</code> function.<br/>\n     * It's a generic version of [Array.prototype.reduce]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce}.\n     * @example\n     * _.reduce([1, 2, 3, 4], _.add) // => 10\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {AccumulatorCallback} accumulator\n     * @param {*} [initialValue]\n     * @returns {*}\n     */\n    var reduce = generic(_arrayProto.reduce);\n    \n    /**\n     * Same as {@link module:lamb.reduce|reduce}, but starts the fold operation from the last element instead.<br/>\n     * It's a generic version of [Array.prototype.reduceRight]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight}.\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {AccumulatorCallback} accumulator\n     * @param {*} [initialValue]\n     * @returns {*}\n     */\n    var reduceRight = generic(_arrayProto.reduceRight);\n    \n    /**\n     * Builds an array by extracting a portion of an array-like object.<br/>\n     * It's a generic version of [Array.prototype.slice]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice}.\n     * @example\n     * _.slice([\"foo\", \"bar\", \"baz\"], 0, 2) // => [\"foo\", \"bar\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike - Any array like object.\n     * @param {Number} [start=0] - Zero-based index at which to begin extraction.\n     * @param {Number} [end=arrayLike.length] - Zero-based index at which to end extraction. Extracts up to but not including end.\n     * @returns {Array}\n     */\n    var slice = generic(_arrayProto.slice);\n    \n    lamb.filter = filter;\n    lamb.forEach = forEach;\n    lamb.map = map;\n    lamb.reduce = reduce;\n    lamb.reduceRight = reduceRight;\n    lamb.slice = slice;\n    \n    \n    var _concat = generic(_arrayProto.concat);\n    \n    function _findSliceEndIndex (arrayLike, predicate, predicateContext) {\n        var idx = -1;\n        var len = arrayLike.length;\n    \n        while (++idx < len && predicate.call(predicateContext, arrayLike[idx], idx, arrayLike));\n    \n        return idx;\n    }\n    \n    function _flatten (array, output) {\n        output = output || [];\n    \n        array.forEach(function (value) {\n            if (Array.isArray(value)) {\n                _flatten(value, output);\n            } else {\n                output.push(value);\n            }\n        });\n    \n        return output;\n    }\n    \n    function _shallowFlatten (array) {\n        return _arrayProto.concat.apply([], array);\n    }\n    \n    function _getInsertionIndex (array, element, comparer, reader, start, end) {\n        if (array.length === 0) {\n            return 0;\n        }\n    \n        comparer = comparer || sorter.ascending;\n        reader = reader || identity;\n        start = start || 0;\n        end = end || array.length;\n    \n        var pivot = (start + end) >> 1;\n        var compared = comparer(reader(element), reader(array[pivot]));\n    \n        if (end - start <= 1) {\n            return compared === -1 ? pivot : pivot + 1;\n        }\n    \n        switch (compared) {\n            case -1:\n                return _getInsertionIndex(array, element, comparer, reader, start, pivot);\n            case 0:\n                return pivot + 1;\n            case 1:\n                return _getInsertionIndex(array, element, comparer, reader, pivot, end);\n        }\n    }\n    \n    /**\n     * Returns an array of items present only in the first of the given arrays.\n     * @example\n     * var a1 = [1, 2, 3, 4];\n     * var a2 = [2, 4, 5];\n     * var a3 = [4, 5, 3, 1];\n     *\n     * _.difference(a1, a2) // => [1, 3]\n     * _.difference(a1, a2, a3) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {Array} array\n     * @param {...Array} other\n     * @returns {Array}\n     */\n    function difference (array) {\n        var rest = _shallowFlatten(slice(arguments, 1));\n        return array.filter(function (item) {\n            return rest.indexOf(item) === -1;\n        });\n    }\n    \n    /**\n     * Builds an array without the first <code>n</code> elements of the given array or array-like object.\n     * Note that, being this only a shortcut for a specific use case of {@link module:lamb.slice|slice},\n     * <code>n</code> can be a negative number.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.drop(arr, 2) // => [3, 4, 5]\n     * _.drop(arr, -1) // => [5]\n     * _.drop(arr, -10) // => [1, 2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {Number} n\n     * @returns {Array}\n     */\n    var drop = aritize(slice, 2);\n    \n    /**\n     * A curried version of {@link module:lamb.drop|drop} that expects the number of elements\n     * to drop to build a function waiting for the list to take the elements from.\n     * See the note and examples for {@link module:lamb.drop|drop} about passing a negative <code>n</code>.\n     * @example\n     * var drop2 = _.dropN(2);\n     *\n     * drop2([1, 2, 3, 4, 5]) // => [3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {Number} n\n     * @returns {Function}\n     */\n    var dropN = _curry(drop, 2, true);\n    \n    /**\n     * Builds a function that drops the first <code>n</code> elements satisfying a predicate from an array or array-like object.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var dropWhileIsEven = _.dropWhile(isEven);\n     *\n     * dropWhileIsEven([2, 4, 6, 8]) // => []\n     * dropWhileIsEven([2, 4, 7, 8]) // => [7, 8]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    function dropWhile (predicate, predicateContext) {\n        return function (arrayLike) {\n            return slice(arrayLike, _findSliceEndIndex(arrayLike, predicate, predicateContext));\n        };\n    }\n    \n    /**\n     * Searches for an element satisfying the predicate in the given array-like object and returns it if\n     * the search is successful. Returns <code>undefined</code> otherwise.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 40}\n     * ];\n     *\n     * _.find(persons, _.hasKeyValue(\"age\", 40)) // => {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40}\n     * _.find(persons, _.hasKeyValue(\"age\", 41)) // => undefined\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {*}\n     */\n    function find (arrayLike, predicate, predicateContext) {\n        var result;\n    \n        for (var i = 0, len = arrayLike.length, element; i < len; i++) {\n            element = arrayLike[i];\n    \n            if (predicate.call(predicateContext, element, i, arrayLike)) {\n                result = element;\n                break;\n            }\n        }\n    \n        return result;\n    }\n    \n    /**\n     * Searches for an element satisfying the predicate in the given array-like object and returns its\n     * index if the search is successful. Returns <code>-1</code> otherwise.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 40}\n     * ];\n     *\n     * _.findIndex(persons, _.hasKeyValue(\"age\", 40)) // => 1\n     * _.findIndex(persons, _.hasKeyValue(\"age\", 41)) // => -1\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Number}\n     */\n    function findIndex (arrayLike, predicate, predicateContext) {\n        var result = -1;\n    \n        for (var i = 0, len = arrayLike.length; i < len; i++) {\n            if (predicate.call(predicateContext, arrayLike[i], i, arrayLike)) {\n                result = i;\n                break;\n            }\n        }\n    \n        return result;\n    }\n    \n    /**\n     * Similar to {@link module:lamb.map|map}, but if the mapping function returns an array this will\n     * be concatenated, rather than pushed, to the final result.\n     * @example <caption>showing the difference with map</caption>\n     * var words = [\"foo\", \"bar\"];\n     * var toCharArray = function (s) { return s.split(\"\"); };\n     *\n     * _.map(words, toCharArray) // => [[\"f\", \"o\", \"o\"], [\"b\", \"a\", \"r\"]]\n     * _.flatMap(words, toCharArray) // => [\"f\", \"o\", \"o\", \"b\", \"a\", \"r\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {Array} array\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    var flatMap = compose(_shallowFlatten, map);\n    \n    /**\n     * Flattens an array.\n     * @example\n     * var arr = [1, 2, [3, 4, [5, 6]], 7, 8];\n     *\n     * _.flatten(arr) // => [1, 2, 3, 4, 5, 6, 7, 8]\n     * _.flatten(arr, true) // => [1, 2, 3, 4, [5, 6], 7, 8]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {Array} array\n     * @param {Boolean} [doShallow=false] - Whether to flatten only the first \"level\" of the array or not.\n     * @returns {Array}\n     */\n    function flatten (array, doShallow) {\n        return (doShallow ? _shallowFlatten : _flatten)(array);\n    }\n    \n    /**\n     * Transforms an array-like object into a lookup table using the provided iteratee as a grouping\n     * criterion to generate keys and values.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"city\": \"New York\"},\n     *     {\"name\": \"John\", \"city\": \"New York\"},\n     *     {\"name\": \"Mario\", \"city\": \"Rome\"},\n     *     {\"name\": \"Paolo\"}\n     * ];\n     * var getCity = _.getKey(\"city\");\n     * var personsByCity = _.group(persons, getCity);\n     *\n     * // \"personsByCity\" holds:\n     * // {\n     * //     \"New York\": [\n     * //         {\"name\": \"Jane\", \"city\": \"New York\"},\n     * //         {\"name\": \"John\", \"city\": \"New York\"}\n     * //     ],\n     * //     \"Rome\": [\n     * //         {\"name\": \"Mario\", \"city\": \"Rome\"}\n     * //     ],\n     * //     \"undefined\": [\n     * //         {\"name\": \"Paolo\"}\n     * //     ]\n     * // }\n     *\n     * @example <caption>Adding a custom value for missing keys</caption>\n     *\n     * var getCityOrUnknown = _.condition(\n     *     _.hasKey(\"city\"),\n     *     getCity,\n     *     _.always(\"Unknown\")\n     * );\n     *\n     * personsByCity = _.group(persons, getCityOrUnknown);\n     *\n     * // \"personsByCity\" now holds:\n     * // {\n     * //     \"New York\": [\n     * //         {\"name\": \"Jane\", \"city\": \"New York\"},\n     * //         {\"name\": \"John\", \"city\": \"New York\"}\n     * //     ],\n     * //     \"Rome\": [\n     * //         {\"name\": \"Mario\", \"city\": \"Rome\"}\n     * //     ],\n     * //     \"Unknown\": [\n     * //         {\"name\": \"Paolo\"}\n     * //     ]\n     * // }\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Object}\n     */\n    function group (arrayLike, iteratee, iterateeContext) {\n       var result = {};\n        var len = arrayLike.length;\n    \n        for (var i = 0, element; i < len; i++) {\n            element = arrayLike[i];\n            var key = iteratee.call(iterateeContext, element, i, arrayLike);\n    \n            if (key in result) {\n                result[key].push(element);\n            } else {\n                result[key] = [element];\n            }\n        }\n    \n        return result;\n    }\n    \n    /**\n     * Using the provided iteratee, and its optional context, builds a [partial application]{@link module:lamb.partial}\n     * of {@link module:lamb.group|group} expecting the array-like object to act upon.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"age\": 12},\n     *     {\"name\": \"John\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"age\": 15}\n     * ];\n     *\n     * var getAgeStatus = function (person) { return person.age > 20 ? \"over 20\" : \"under 20\"; };\n     * var groupByAgeStatus = _.groupBy(getAgeStatus);\n     *\n     * var personsByAgeStatus = groupByAgeStatus(persons);\n     *\n     * // \"personsByAgeStatus\" holds:\n     * // {\n     * //     \"under 20\": [\n     * //         {\"name\": \"Jane\", \"age\": 12},\n     * //         {\"name\": \"Mario\", \"age\": 18},\n     * //         {\"name\": \"Paolo\", \"age\": 15}\n     * //     ],\n     * //     \"over 20\": [\n     * //         {\"name\": \"John\", \"age\": 40}\n     * //     ]\n     * // }\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Function}\n     */\n    function groupBy (iteratee, iterateeContext) {\n        return partial(group, _, iteratee, iterateeContext);\n    }\n    \n    /**\n     * Returns an array of every item present in all given arrays.\n     * @example\n     * var a1 = [1, 2, 3, 4];\n     * var a2 = [2, 5, 4, 6];\n     * var a3 = [5, 6, 7];\n     *\n     * _.intersection(a1, a2) // => [2, 4]\n     * _.intersection(a1, a3) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {...Array} array\n     * @return {Array}\n     */\n    function intersection () {\n        var rest = slice(arguments, 1);\n        return uniques(arguments[0]).filter(function (item) {\n            return rest.every(function (other) {\n                return other.indexOf(item) !== -1;\n            });\n        });\n    }\n    \n    /**\n     * Inserts an element in a copy of a sorted array respecting the sort order.\n     * @example <caption>with simple values</caption>\n     * _.insert([], 1) // => [1]\n     * _.insert([2, 4, 6], 5) // => [2, 4, 5, 6]\n     * _.insert([4, 2, 1], 3, _.sorter.descending) // => [4, 3, 2, 1]\n     *\n     * @example <caption>with complex values</caption>\n     * var persons = [\n     *     {\"name\": \"jane\", \"surname\": \"doe\"},\n     *     {\"name\": \"John\", \"surname\": \"Doe\"},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * ];\n     *\n     * var getLowerCaseName = _.compose(\n     *     _.invoker(\"toLowerCase\"),\n     *     _.getKey(\"name\")\n     * );\n     *\n     * var result = _.insert(\n     *     persons,\n     *     {\"name\": \"marco\", \"surname\": \"Rossi\"},\n     *     _.sorter.ascending,\n     *     getLowerCaseName\n     * );\n     *\n     * // `result` holds:\n     * // [\n     * //     {\"name\": \"jane\", \"surname\": \"doe\"},\n     * //     {\"name\": \"John\", \"surname\": \"Doe\"},\n     * //     {\"name\": \"marco\", \"surname\": \"Rossi\"},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {Array} array\n     * @param {*} element\n     * @param {Function} [comparer={@link module:lamb.sorter|sorter.ascending}] - The comparer function used to sort the array.\n     * @param {Function} [reader={@link module:lamb.identity|identity}] - The function that evaluates the array elements and supplies values for comparison.\n     * @returns {Array}\n     */\n    function insert (array, element, comparer, reader) {\n        var result = array.concat();\n        result.splice(_getInsertionIndex(array, element, comparer, reader), 0, element);\n        return result;\n    }\n    \n    /**\n     * Generates an array with the values passed as arguments.\n     * @example\n     * _.list(1, 2, 3) // => [1, 2, 3]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {...*} value\n     * @returns {Array}\n     */\n    function list () {\n        return slice(arguments);\n    }\n    \n    /**\n     * A curried version of {@link module:lamb.map|map} that uses the given iteratee to build a\n     * function expecting the array-like object to act upon.\n     * @example\n     * var square = function (n) { return n * n; };\n     * var getSquares = _.mapWith(square);\n     *\n     * getSquares([1, 2, 3, 4, 5]) // => [1, 4, 9, 16, 25]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {function}\n     */\n    function mapWith (iteratee, iterateeContext) {\n        return partial(map, _, iteratee, iterateeContext);\n    }\n    \n    /**\n     * \"Plucks\" the specified key from a list of objects.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 15}\n     * ];\n     *\n     * _.pluck(persons, \"age\") // => [12, 40, 18, 15]\n     *\n     * var lists = [\n     *     [1, 2],\n     *     [3, 4, 5],\n     *     [6]\n     * ];\n     *\n     * _.pluck(lists, \"length\") // => [2, 3, 1]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @param {String} key\n     * @returns {Array}\n     */\n    function pluck (arrayLike, key) {\n        return map(arrayLike, getKey(key));\n    }\n    \n    /**\n     * Generates a function to sort arrays of complex values.\n     * @example\n     * var weights = [\"2 Kg\", \"10 Kg\", \"1 Kg\", \"7 Kg\"];\n     * var asNumbers = _.sorter(_.sorter.ascending, parseFloat);\n     *\n     * weights.sort() // => [\"1 Kg\", \"10 Kg\", \"2 Kg\", \"7 Kg\"]\n     * weights.sort(asNumbers) // => [\"1 Kg\", \"2 Kg\", \"7 Kg\", \"10 Kg\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @property {Function} ascending - A default ascending comparer.\n     * @property {Function} descending - A default descending comparer.\n     * @param {Function} comparer - A comparer function to be passed to the [Array.prototype.sort]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort} method.\n     * @param {Function} reader - A function meant to generate a simple value from a complex one. The function should evaluate the array element and supply the value to be passed to the comparer.\n     * @returns {Function}\n     */\n    function sorter (comparer, reader) {\n        return function (a, b) {\n            return comparer(reader(a), reader(b));\n        };\n    }\n    sorter.ascending = function (a, b) {\n        return a < b ? -1 : a > b ? 1 : 0;\n    };\n    sorter.descending = function (a, b) {\n        return b < a ? -1 : b > a ? 1 : 0;\n    };\n    \n    /**\n     * Retrieves the first <code>n</code> elements from an array or array-like object.\n     * Note that, being this a partial application of {@link module:lamb.slice|slice},\n     * <code>n</code> can be a negative number.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.take(arr, 3) // => [1, 2, 3]\n     * _.take(arr, -1) // => [1, 2, 3, 4]\n     * _.take(arr, -10) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike\n     * @param {Number} n\n     * @returns {Array}\n     */\n    var take = partial(slice, _, 0, _);\n    \n    /**\n     * A curried version of {@link module:lamb.take|take} that expects the number of elements\n     * to retrieve to build a function waiting for the list to take the elements from.\n     * See the note and examples for {@link module:lamb.take|take} about passing a negative <code>n</code>.\n     * @example\n     * var take2 = _.takeN(2);\n     *\n     * take2([1, 2, 3, 4, 5]) // => [1, 2]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {Number} n\n     * @returns {Function}\n     */\n    var takeN = _curry(take, 2, true);\n    \n    /**\n     * Builds a function that takes the first <code>n</code> elements satisfying a predicate from an array or array-like object.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var takeWhileIsEven = _.takeWhile(isEven);\n     *\n     * takeWhileIsEven([1, 2, 4, 6, 8]) // => []\n     * takeWhileIsEven([2, 4, 7, 8]) // => [2, 4]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} predicateContext\n     * @returns {Function}\n     */\n    function takeWhile (predicate, predicateContext) {\n        return function (arrayLike) {\n            return slice(arrayLike, 0, _findSliceEndIndex(arrayLike, predicate, predicateContext));\n        };\n    }\n    \n    /**\n     * Returns a list of every unique element present in the given arrays.\n     * @example\n     * _.union([1, 2, 3, 2], [3, 4], [1, 5]) // => [1, 2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {...Array} array\n     * @returns {Array}\n     */\n    var union = compose(uniques, _concat);\n    \n    /**\n     * Returns an array comprised of the unique elements of the given array-like object.\n     * Can work with lists of complex objects if supplied with an iteratee.\n     * @example <caption>with simple values</caption>\n     * _.uniques([1, 2, 2, 3, 4, 3, 5, 1]) // => [1, 2, 3, 4, 5]\n     *\n     * @example <caption>with complex values</caption>\n     * var data  = [\n     *     {id: \"1\"},\n     *     {id: \"4\"},\n     *     {id: \"5\"},\n     *     {id: \"1\"},\n     *     {id: \"5\"},\n     * ];\n     *\n     * _.uniques(data, _.getKey(\"id\")) // => [{id: \"1\"}, {id: \"4\"}, {\"id\": 5}]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} [iteratee] Defaults to the [identity function]{@link module:lamb.identity}.\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    function uniques (arrayLike, iteratee, iterateeContext) {\n        if (typeof iteratee !== \"function\") {\n            iteratee = identity;\n        }\n    \n        var result = [];\n        var seen = [];\n        var value;\n    \n        for (var i = 0; i < arrayLike.length; i++) {\n            value = iteratee.call(iterateeContext, arrayLike[i], i , arrayLike);\n    \n            if (seen.indexOf(value) === -1) {\n                seen.push(value);\n                result.push(arrayLike[i]);\n            }\n        }\n    \n        return result;\n    }\n    \n    lamb.difference = difference;\n    lamb.drop = drop;\n    lamb.dropN = dropN;\n    lamb.dropWhile = dropWhile;\n    lamb.find = find;\n    lamb.findIndex = findIndex;\n    lamb.flatMap = flatMap;\n    lamb.flatten = flatten;\n    lamb.group = group;\n    lamb.groupBy = groupBy;\n    lamb.intersection = intersection;\n    lamb.insert = insert;\n    lamb.list = list;\n    lamb.mapWith = mapWith;\n    lamb.pluck = pluck;\n    lamb.sorter = sorter;\n    lamb.take = take;\n    lamb.takeN = takeN;\n    lamb.takeWhile = takeWhile;\n    lamb.union = union;\n    lamb.uniques = uniques;\n    \n    \n    function _currier (fn, arity, isRightCurry, slicer, argsHolder) {\n        return function () {\n            var args = argsHolder.concat(slicer(arguments));\n    \n            if (args.length >= arity) {\n                return fn.apply(this, isRightCurry ? args.reverse() : args);\n            } else {\n                return _currier(fn, arity, isRightCurry, slicer, args);\n            }\n        };\n    }\n    \n    function _curry (fn, arity, isRightCurry, isAutoCurry) {\n        var slicer = isAutoCurry ? slice : function (a) {\n            return a.length ? [a[0]] : [];\n        };\n    \n        if ((arity | 0) !== arity) {\n            arity = fn.length;\n        }\n    \n        return _currier(fn, arity, isRightCurry, slicer, []);\n    }\n    \n    /**\n     * Applies the passed function to the given argument list.\n     * @example\n     * _.apply(_.add, [3, 4]) // => 7\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {ArrayLike} args\n     * @returns {*}\n     */\n    function apply (fn, args) {\n        return fn.apply(fn, slice(args));\n    }\n    \n    /**\n     * A curried version of {@link module:lamb.apply|apply}. Expects an array-like object to use as arguments\n     * and builds a function waiting for the target of the application.\n     * @example\n     * var data = [3, 4];\n     * var applyDataTo = _.applyArgs(data);\n     *\n     * applyDataTo(_.add) // => 7\n     * applyDataTo(_.multiply) // => 12\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @function\n     * @param {ArrayLike} args\n     * @returns {Function}\n     */\n    var applyArgs = _curry(apply, 2, true);\n    \n    /**\n     * Builds a function that passes only the specified amount of arguments to the given function.\n     * @example\n     * var data = [\"1-2\", \"13-5\", \"6-23\"];\n     * var getDashIndex = _.invoker(\"indexOf\", \"-\");\n     *\n     * data.map(getDashIndex) // => [1, 2, -1]\n     * data.map(_.aritize(getDashIndex, 1)) // = > [1, 2, 1]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {Number} arity\n     * @returns {Function}\n     */\n    function aritize (fn, arity) {\n        return function () {\n            return apply(fn, slice(arguments, 0, arity));\n        };\n    }\n    \n    /**\n     * Transforms the evaluation of the given function in the evaluation of a sequence of functions expecting\n     * only one argument. Each function of the sequence is a partial application of the original one, which\n     * will be applied when the specified (or derived) arity is consumed.<br/>\n     * See also {@link module:lamb.curryable|curryable} and {@link module:lamb.partial|partial}.\n     * @example\n     * var multiplyBy = _.curry(_.multiply);\n     * var multiplyBy10 = multiplyBy(10);\n     * var divideBy = _.curry(_.divide, 2, true);\n     * var halve = divideBy(2);\n     *\n     * multiplyBy10(5) // => 50\n     * multiplyBy10()(5) // => 50\n     * multiplyBy10()()(2) // => 20\n     * halve(3) // => 1.5\n     * halve(3, 7) // => 1.5\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {?Number} [arity=fn.length]\n     * @param {Boolean} [isRightCurry=false] - Whether to start currying from the rightmost argument or not.\n     * @returns {Function}\n     */\n    function curry (fn, arity, isRightCurry) {\n        return _curry(fn, arity, isRightCurry);\n    }\n    \n    /**\n     * Builds an auto-curried function. The resulting function can be called multiple times with\n     * any number of arguments, and the original function will be applied only when the specified\n     * (or derived) arity is consumed.<br/>\n     * Note that you can pass undefined values as arguments explicitly, if you are so inclined, but empty\n     * calls doesn't consume the arity.<br/>\n     * See also {@link module:lamb.curry|curry} and {@link module:lamb.partial|partial}.\n     * @example\n     * var collectFourElements = _.curryable(_.list, 4);\n     *\n     * collectFourElements(2)(3)(4)(5) // => [2, 3, 4, 5]\n     * collectFourElements(2)(3, 4)(5) // => [2, 3, 4, 5]\n     * collectFourElements(2, 3, 4, 5) // => [2, 3, 4, 5]\n     * collectFourElements()(2)()(3, 4, 5) // => [2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {?Number} [arity=fn.length]\n     * @param {Boolean} [isRightCurry=false] - Whether to start currying from the rightmost argument or not.\n     * @returns {Function}\n     */\n    function curryable (fn, arity, isRightCurry) {\n        return _curry(fn, arity, isRightCurry, true);\n    }\n    \n    /**\n     * Returns a function that will execute the given function only if it stops being called for the specified timespan.<br/>\n     * See also {@link module:lamb.throttle|throttle} for a different behaviour where the first call happens immediately.\n     * @example <caption>A common use case of <code>debounce</code> in a browser environment</caption>\n     * var updateLayout = function () {\n     *     // some heavy DOM operations here\n     * };\n     *\n     * window.addEventListener(\"resize\", _.debounce(updateLayout, 200), false);\n     *\n     * // The resize event is fired repeteadly until the user stops resizing the\n     * // window, while the `updateLayout` function is called only once: 200 ms\n     * // after he stopped.\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {Number} timespan - Expressed in milliseconds\n     * @returns {Function}\n     */\n    function debounce (fn, timespan) {\n        var timeoutID;\n    \n        return function () {\n            var context = this;\n            var args = arguments;\n            var debounced = function () {\n                timeoutID = null;\n                fn.apply(context, args);\n            };\n    \n            clearTimeout(timeoutID);\n            timeoutID = setTimeout(debounced, timespan);\n        };\n    }\n    \n    /**\n     * Returns a function that applies its arguments to the original function in reverse order.\n     * @example\n     * _.list(1, 2, 3) // => [1, 2, 3]\n     * _.flip(_.list)(1, 2, 3) // => [3, 2, 1]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function flip (fn) {\n        return function () {\n            var args = slice(arguments).reverse();\n            return fn.apply(this, args);\n        };\n    }\n    \n    /**\n     * Builds a function that will invoke the given method name on any received object and return\n     * the result. If no method with such name is found the function will return <code>undefined</code>.\n     * Along with the method name it's possible to supply some arguments that will be bound to the method call.<br/>\n     * Further arguments can also be passed when the function is actually called, and they will be concatenated\n     * to the bound ones.<br/>\n     * If different objects share a method name it's possible to build polymorphic functions as you can see in\n     * the example below.<br/>\n     * {@link module:lamb.condition|Condition} can be used to wrap <code>invoker</code> to avoid this behaviour\n     * by adding a predicate, while {@link module:lamb.adapter|adapter} can build more complex polymorphic functions\n     * without the need of homonymy.<br/>\n     * Returning <code>undefined</code> or checking for such value is meant to favor composition and interoperability\n     * between the aforementioned functions: for a more standard behaviour see also {@link module:lamb.generic|generic}.\n     * @example <caption>Basic polymorphism with <code>invoker</code></caption>\n     * var polySlice = _.invoker(\"slice\");\n     *\n     * polySlice([1, 2, 3, 4, 5], 1, 3) // => [2, 3]\n     * polySlice(\"Hello world\", 1, 3) // => \"el\"\n     *\n     * @example <caption>With bound arguments</caption>\n     * var substrFrom2 = _.invoker(\"substr\", 2);\n     * substrFrom2(\"Hello world\") // => \"llo world\"\n     * substrFrom2(\"Hello world\", 5) // => \"llo w\"\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {String} methodName\n     * @param {...*} [boundArg]\n     * @returns {Function}\n     */\n    function invoker (methodName) {\n        var boundArgs = slice(arguments, 1);\n    \n        return function (target) {\n            var args = slice(arguments, 1);\n            var method = target[methodName];\n            return typeOf(method) === \"Function\" ? method.apply(target, boundArgs.concat(args)) : void 0;\n        };\n    }\n    \n    /**\n     * Builds a function that allows to map over the received arguments before applying them to the original one.\n     * @example\n     * var sumArray = _.invoker(\"reduce\", _.add);\n     * var sum = _.compose(sumArray, _.list);\n     *\n     * sum(1, 2, 3, 4, 5) // => 15\n     *\n     * var square = _.partial(Math.pow, _, 2);\n     * var sumSquares = _.mapArgs(sum, square);\n     *\n     * sumSquares(1, 2, 3, 4, 5) // => 55\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {ListIteratorCallback} mapper\n     * @returns {Function}\n     */\n    function mapArgs (fn, mapper) {\n        return compose(partial(apply, fn), mapWith(mapper), list);\n    }\n    \n    /**\n     * Creates a pipeline of functions, where each function consumes the result of the previous one.<br/>\n     * See also {@link module:lamb.compose|compose}.\n     * @example\n     * var square = _.partial(Math.pow, _, 2);\n     * var getMaxAndSquare = _.pipe(Math.max, square);\n     *\n     * getMaxAndSquare(3, 5) // => 25\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @function\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    var pipe = flip(compose);\n    \n    /**\n     * Builds a function that allows to \"tap\" into the arguments of the original one.\n     * This allows to extract simple values from complex ones, transform arguments or simply intercept them.\n     * If a \"tapper\" isn't found the argument is passed as it is.\n     * @example\n     * var someObject = {count: 5};\n     * var someArrayData = [2, 3, 123, 5, 6, 7, 54, 65, 76, 0];\n     * var getDataAmount = _.tapArgs(_.add, _.getKey(\"count\"), _.getKey(\"length\"));\n     *\n     * getDataAmount(someObject, someArrayData); // => 15\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {...?Function} [tapper]\n     * @returns {Function}\n     */\n    function tapArgs (fn) {\n        var readers = slice(arguments, 1);\n    \n        return function () {\n            var len = arguments.length;\n            var args = [];\n    \n            for (var i = 0; i < len; i++) {\n                args.push(readers[i] ? readers[i](arguments[i]) : arguments[i]);\n            }\n    \n            return fn.apply(this, args);\n        };\n    }\n    \n    /**\n     * Returns a function that will invoke the passed function at most once in the given timespan.<br/>\n     * The first call in this case happens as soon as the function is invoked; see also {@link module:lamb.debounce|debounce}\n     * for a different behaviour where the first call is delayed.\n     * @example\n     * var log = _.throttle(console.log.bind(console), 5000);\n     *\n     * log(\"Hi\"); // console logs \"Hi\"\n     * log(\"Hi again\"); // nothing happens\n     * // after five seconds\n     * log(\"Hello world\"); // console logs \"Hello world\"\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @param {Number} timespan - Expressed in milliseconds.\n     * @returns {Function}\n     */\n    function throttle (fn, timespan) {\n        var result;\n        var lastCall = 0;\n    \n        return function () {\n            var now = Date.now();\n    \n            if (now - lastCall >= timespan) {\n                lastCall = now;\n                result = fn.apply(this, arguments);\n            }\n    \n            return result;\n        };\n    }\n    \n    /**\n     * Wraps the function <code>fn</code> inside a <code>wrapper</code> function.<br/>\n     * This allows to conditionally execute <code>fn</code>, to tamper with its arguments or return value\n     * and to run code before and after its execution.<br/>\n     * Being this nothing more than a \"{@link module:lamb.flip|flipped}\" [partial application]{@link module:lamb.partial},\n     * you can also easily build new functions from existent ones.\n     * @example\n     * var arrayMax = _.wrap(Math.max, _.apply);\n     *\n     * arrayMax([4, 5, 2, 6, 1]) // => 6\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @function\n     * @param {Function} fn\n     * @param {Function} wrapper\n     * @returns {Function}\n     */\n    var wrap = aritize(flip(partial), 2);\n    \n    lamb.apply = apply;\n    lamb.applyArgs = applyArgs;\n    lamb.aritize = aritize;\n    lamb.curry = curry;\n    lamb.curryable = curryable;\n    lamb.debounce = debounce;\n    lamb.flip = flip;\n    lamb.invoker = invoker;\n    lamb.mapArgs = mapArgs;\n    lamb.pipe = pipe;\n    lamb.tapArgs = tapArgs;\n    lamb.throttle = throttle;\n    lamb.wrap = wrap;\n    \n    \n    /**\n     * Accepts a series of functions and builds a function that applies the received arguments to each one and\n     * returns the first non <code>undefined</code> value.<br/>\n     * Meant to work in sinergy with {@link module:lamb.condition|condition} and {@link module:lamb.invoker|invoker},\n     * can be useful as a strategy pattern for functions, to mimic conditional logic and also to build polymorphic functions.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var filterString = _.condition(\n     *     _.isType(\"String\"),\n     *     _.compose(_.invoker(\"join\", \"\"), _.filter)\n     * );\n     * var filterAdapter = _.adapter(_.invoker(\"filter\"), filterString);\n     *\n     * filterAdapter([1, 2, 3, 4, 5, 6], isEven)) // => [2, 4, 6]\n     * filterAdapter(\"123456\", isEven)) // => \"246\"\n     * filterAdapter({}, isEven)) // => undefined\n     *\n     * // obviously it's composable\n     * var filterWithDefault = _.adapter(filterAdapter, _.always(\"Not implemented\"));\n     *\n     * filterWithDefault([1, 2, 3, 4, 5, 6], isEven)) // => [2, 4, 6]\n     * filterWithDefault(\"123456\", isEven)) // => \"246\"\n     * filterWithDefault({}, isEven)) // => \"Not implemented\"\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    function adapter () {\n        var functions = slice(arguments);\n    \n        return function () {\n            var len = functions.length;\n            var result;\n    \n            for (var i = 0; i < len; i++) {\n                result = apply(functions[i], arguments);\n    \n                if (!isUndefined(result)) {\n                    break;\n                }\n            }\n    \n            return result;\n        };\n    }\n    \n    /**\n     * Builds a predicate that returns true if all the given predicates are satisfied.\n     * The arguments passed to the resulting function are applied to every predicate unless one of them returns false.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var isPositive = function (n) { return n > 0; };\n     * var isPositiveEven = _.allOf(isEven, isPositive);\n     *\n     * isPositiveEven(-2) // => false\n     * isPositiveEven(11) // => false\n     * isPositiveEven(6) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {...Function} predicate\n     * @returns {Function}\n     */\n    function allOf () {\n        var predicates = slice(arguments);\n    \n        return function () {\n            var args = arguments;\n    \n            return predicates.every(function (predicate) {\n                return predicate.apply(null, args);\n            });\n        };\n    }\n    \n    /**\n     * Builds a predicate that returns true if at least one of the given predicates is satisfied.\n     * The arguments passed to the resulting function are applied to every predicate until one of them returns true.\n     * @example\n     * // Lamb's \"isNil\" is actually implemented like this\n     * var isNil = _.anyOf(_.isNull, _.isUndefined);\n     *\n     * isNil(NaN) // => false\n     * isNil({}) // => false\n     * isNil(null) // => true\n     * isNil(void 0) // => true\n     * isNil() // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {...Function} predicate\n     * @returns {Function}\n     */\n    function anyOf () {\n        var predicates = slice(arguments);\n    \n        return function () {\n            var args = arguments;\n    \n            return predicates.some(function (predicate) {\n                return predicate.apply(null, args);\n            });\n        };\n    }\n    \n    /**\n     * Builds a function that will apply the received arguments to <code>trueFn</code>, if the predicate is satisfied with\n     * the same arguments, or to <code>falseFn</code> otherwise.<br/>\n     * If <code>falseFn</code> isn't provided and the predicate isn't satisfied the function will return <code>undefined</code>.<br/>\n     * Although you can use other <code>condition</code>s as <code>trueFn</code> or <code>falseFn</code>, it's probably better to\n     * use {@link module:lamb.adapter|adapter} to build more complex behaviours.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0};\n     * var halve = function (n) { return n / 2; };\n     * var halveIfEven = _.condition(isEven, halve, _.identity);\n     *\n     * halveIfEven(5) // => 5\n     * halveIfEven(6) // => 3\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.invoker|invoker}\n     * @param {Function} predicate\n     * @param {Function} trueFn\n     * @param {Function} [falseFn]\n     * @returns {Function}\n     */\n    function condition (predicate, trueFn, falseFn) {\n        return function () {\n            var applyArgsTo = applyArgs(arguments);\n            return applyArgsTo(predicate) ? applyArgsTo(trueFn) : falseFn ? applyArgsTo(falseFn) : void 0;\n        };\n    }\n    \n    /**\n     * Verifies that the two supplied values are the same value using strict\n     * equality. Note that this doesn't behave as the strict equality operator,\n     * but rather as a shim of ES6's [Object.is]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is}.\n     * Differences are that <code>0</code> and <code>-0</code> aren't the same value and, finally, <code>NaN</code> is equal to itself.\n     * @example\n     * var testObject = {};\n     *\n     * _.is({}, testObject) // => false\n     * _.is(testObject, testObject) // => true\n     * _.is(\"foo\", \"foo\") // => true\n     * _.is(0, -0) // => false\n     * _.is(0 / 0, NaN) => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {*} a\n     * @param {*} b\n     * @returns {Boolean}\n     */\n    function is (a, b) {\n        var result;\n    \n        if (a === 0 && b === 0) {\n            result = 1 / a === 1 / b;\n        } else if (a !== a) {\n            result = b !== b;\n        } else {\n            result = a === b;\n        }\n    \n        return result;\n    }\n    \n    /**\n     * Verifies that the first given value is greater than the second.\n     * @example\n     * var pastDate = new Date(2010, 2, 12);\n     * var today = new Date();\n     *\n     * _.isGT(today, pastDate) // true\n     * _.isGT(pastDate, today) // false\n     * _.isGT(3, 4) // false\n     * _.isGT(3, 3) // false\n     * _.isGT(3, 2) // true\n     * _.isGT(0, -0) // false\n     * _.isGT(-0, 0) // false\n     * _.isGT(\"a\", \"A\") // true\n     * _.isGT(\"b\", \"a\") // true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isGT (a, b) {\n        return a > b;\n    }\n    \n    /**\n     * Verifies that the first given value is greater than or equal to the second.\n     * Regarding equality, beware that this is simply a wrapper for the native operator, so <code>-0 === 0</code>.\n     * @example\n     * _.isGTE(3, 4) // false\n     * _.isGTE(3, 3) // true\n     * _.isGTE(3, 2) // true\n     * _.isGTE(0, -0) // true\n     * _.isGTE(-0, 0) // true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isGTE (a, b) {\n        return a >= b;\n    }\n    \n    /**\n     * Verifies that the first given value is less than the second.\n     * @example\n     * var pastDate = new Date(2010, 2, 12);\n     * var today = new Date();\n     *\n     * _.isLT(today, pastDate) // false\n     * _.isLT(pastDate, today) // true\n     * _.isLT(3, 4) // true\n     * _.isLT(3, 3) // false\n     * _.isLT(3, 2) // false\n     * _.isLT(0, -0) // false\n     * _.isLT(-0, 0) // false\n     * _.isLT(\"a\", \"A\") // false\n     * _.isLT(\"a\", \"b\") // true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isLT (a, b) {\n        return a < b;\n    }\n    \n    /**\n     * Verifies that the first given value is less than or equal to the second.\n     * Regarding equality, beware that this is simply a wrapper for the native operator, so <code>-0 === 0</code>.\n     * @example\n     * _.isLTE(3, 4) // true\n     * _.isLTE(3, 3) // true\n     * _.isLTE(3, 2) // false\n     * _.isLTE(0, -0) // true\n     * _.isLTE(-0, 0) // true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isLTE (a, b) {\n        return a <= b;\n    }\n    \n    /**\n     * A simple negation of {@link module:lamb.is|is}, exposed for convenience.\n     * @example\n     * _.isNot(\"foo\", \"foo\") // => false\n     * _.isNot(0, -0) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @function\n     * @param {*} valueA\n     * @param {*} valueB\n     * @returns {Boolean}\n     */\n    var isNot = not(is);\n    \n    /**\n     * Returns a predicate that negates the given one.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var isOdd = _.not(isEven);\n     *\n     * isOdd(5) // => true\n     * isOdd(4) // => false\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Function} predicate\n     * @returns {Function}\n     */\n    function not (predicate) {\n        return function () {\n            return !predicate.apply(null, arguments);\n        };\n    }\n    \n    lamb.adapter = adapter;\n    lamb.allOf = allOf;\n    lamb.anyOf = anyOf;\n    lamb.condition = condition;\n    lamb.is = is;\n    lamb.isGT = isGT;\n    lamb.isGTE = isGTE;\n    lamb.isLT = isLT;\n    lamb.isLTE = isLTE;\n    lamb.isNot = isNot;\n    lamb.not = not;\n    \n    \n    /**\n     * Adds two numbers.\n     * @example\n     * _.add(4, 5) // => 9\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function add (a, b) {\n        return a + b;\n    }\n    \n    /**\n     * Divides two numbers.\n     * @example\n     * _.divide(5, 2) // => 2.5\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function divide (a, b) {\n        return a / b;\n    }\n    \n    /**\n     * Performs the modulo operation and should not be confused with the {@link module:lamb.remainder|remainder}.\n     * The function performs a floored division to calculate the result and not a truncated one, hence the sign of\n     * the dividend is not kept, unlike the {@link module:lamb.remainder|remainder}.\n     * @example\n     * _.modulo(5, 3) // => 2\n     * _.remainder(5, 3) // => 2\n     *\n     * _.modulo(-5, 3) // => 1\n     * _.remainder(-5, 3) // => -2\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link http://en.wikipedia.org/wiki/Modulo_operation}\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function modulo (a, b) {\n        return a - (b * Math.floor(a / b));\n    }\n    \n    /**\n     * Multiplies two numbers.\n     * @example\n     * _.multiply(5, 3) // => 15\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function multiply (a, b) {\n        return a * b;\n    }\n    \n    /**\n     * Generates a random integer between two given integers, both included.\n     * Note that no safety measure is taken if the provided arguments aren't integers, so\n     * you may end up with unexpected (not really) results.\n     * For example <code>randomInt(0.1, 1.2)</code> could be <code>2</code>.\n     * @example\n     *\n     * _.randomInt(1, 10) // => an integer >=1 && <= 10\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} min\n     * @param {Number} max\n     * @returns {Number}\n     */\n    function randomInt (min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n    \n    /**\n     * Generates an arithmetic progression of numbers starting from <code>start</code> up to,\n     * but not including, <code>limit</code>, using the given <code>step</code>.\n     * @example\n     * _.range(2, 10) // => [2, 3, 4, 5, 6, 7, 8, 9]\n     * _.range(2, 10, 0) // => [2]\n     * _.range(1, -10, -2) // => [1, -1, -3, -5, -7, -9]\n     * _.range(1, -10, 2) // => [1]\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} start\n     * @param {Number} limit\n     * @param {Number} [step=1]\n     * @returns {Number[]}\n     */\n    function range (start, limit, step) {\n        if (step === 0 || arguments.length < 2) {\n            return [start];\n        }\n    \n        if (!step) {\n            step = 1;\n        }\n    \n        var len = Math.max(Math.ceil((limit - start) / step), 0);\n        return sequence(start, len, partial(add, step));\n    }\n    \n    /**\n     * Gets the remainder of the division of two numbers.\n     * Not to be confused with the {@link module:lamb.modulo|modulo} as the remainder\n     * keeps the sign of the dividend and may lead to some unexpected results.\n     * @example\n     * // example of wrong usage of the remainder\n     * // (in this case the modulo operation should be used)\n     * var isOdd = function (n) { return _.remainder(n, 2) === 1; };\n     * isOdd(-3) // => false as -3 % 2 === -1\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link http://en.wikipedia.org/wiki/Modulo_operation}\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function remainder (a, b) {\n        return a % b;\n    }\n    \n    /**\n     * Generates a sequence of values of the desired length with the provided iteratee.\n     * The values being iterated, and received by the iteratee, are the results generated so far.\n     * @example\n     * var fibonacci = function (n, idx, list) {\n     *     return n + (list[idx - 1] || 0);\n     * };\n     *\n     * _.sequence(1, 10, fibonacci) // => [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {*} start - The starting value\n     * @param {Number} len - The desired length for the sequence\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    function sequence (start, len, iteratee, iterateeContext) {\n        var result = [start];\n    \n        for (var i = 0, limit = len - 1; i < limit; i++) {\n            result.push(iteratee.call(iterateeContext, result[i], i, result));\n        }\n    \n        return result;\n    }\n    \n    /**\n     * Subtracts two numbers.\n     * @example\n     * _.subtract(5, 3) // => 2\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function subtract (a, b) {\n        return a - b;\n    }\n    \n    lamb.add = add;\n    lamb.divide = divide;\n    lamb.modulo = modulo;\n    lamb.multiply = multiply;\n    lamb.randomInt = randomInt;\n    lamb.range = range;\n    lamb.remainder = remainder;\n    lamb.sequence = sequence;\n    lamb.subtract = subtract;\n    \n    \n    function _immutable (obj, seen) {\n        if (seen.indexOf(obj) === -1) {\n            seen.push(Object.freeze(obj));\n    \n            Object.getOwnPropertyNames(obj).forEach(function (key) {\n                var value = obj[key];\n    \n                if (typeof value === \"object\" && !isNull(value)) {\n                    _immutable(value, seen);\n                }\n            });\n        }\n    \n        return obj;\n    }\n    \n    /**\n     * Builds a <code>checker</code> function meant to be used with {@link module:lamb.validate|validate}.<br/>\n     * Note that the function accepts multiple <code>keyPaths</code> as a means to compare their values. In\n     * other words all the received <code>keyPaths</code> will be passed as arguments to the <code>predicate</code>\n     * to run the test.<br/>\n     * If you want to run the same single property check with multiple properties, you should build\n     * multiple <code>checker</code>s and combine them with {@link module:lamb.validate|validate}.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         username: \"jdoe\",\n     *         password: \"abc123\",\n     *         passwordConfirm: \"abc123\"\n     *     }\n     * };\n     * var pwdMatch = _.checker(\n     *     _.is,\n     *     \"Passwords don't match\",\n     *     [\"login.password\", \"login.passwordConfirm\"]\n     * );\n     *\n     * pwdMatch(user) // => []\n     *\n     * user.login.passwordConfirm = \"avc123\";\n     *\n     * pwdMatch(user) // => [\"Passwords don't match\", [\"login.password\", \"login.passwordConfirm\"]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Function} predicate - The predicate to test the object properties\n     * @param {String} message - The error message\n     * @param {String[]} keyPaths - The array of property names, or {@link module:lamb.getWithPath|paths}, to test.\n     * @param {String} [pathSeparator=\".\"]\n     * @returns {Array<String, String[]>} An error in the form <code>[\"message\", [\"propertyA\", \"propertyB\"]]</code> or an empty array.\n     */\n    function checker (predicate, message, keyPaths, pathSeparator) {\n        return function (obj) {\n            var errors = [];\n            var getValues = partial(getWithPath, obj, _, pathSeparator);\n    \n            return predicate.apply(obj, keyPaths.map(getValues)) ? [] : [message, keyPaths];\n        };\n    }\n    \n    /**\n     * Builds an object from a list of key / value pairs like the one\n     * returned by [pairs]{@link module:lamb.pairs}.<br/>\n     * In case of duplicate keys the last key / value pair is used.\n     * @example\n     * _.fromPairs([[\"a\", 1], [\"b\", 2], [\"c\", 3]]) // => {\"a\": 1, \"b\": 2, \"c\": 3}\n     * _.fromPairs([[\"a\", 1], [\"b\", 2], [\"a\", 3]]) // => {\"a\": 3, \"b\": 2}\n     * _.fromPairs([[1], [void 0, 2], [null, 3]]) // => {\"1\": undefined, \"undefined\": 2, \"null\": 3}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Array<Array<String, *>>} pairsList\n     * @returns {Object}\n     */\n    function fromPairs (pairsList) {\n        var result = {};\n    \n        pairsList.forEach(function (pair) {\n            result[pair[0]] = pair[1];\n        });\n    \n        return result;\n    }\n    \n    /**\n     * Returns the value of the object property with the given key.\n     * @example\n     * var user {name: \"John\"};\n     *\n     * _.get(user, \"name\") // => \"John\";\n     * _.get(user, \"surname\") // => undefined\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {*}\n     */\n    function get (obj, key) {\n        return obj[key];\n    }\n    \n    /**\n     * A curried version of {@link module:lamb.get|get}.<br/>\n     * Receives a property name and builds a function expecting the object from which we want to retrieve the property.\n     * @example\n     * var user1 = {name: \"john\"};\n     * var user2 = {name: \"jane\"};\n     * var getName = _.getKey(\"name\");\n     *\n     * getName(user1) // => \"john\"\n     * getName(user2) // => \"jane\"\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {String} key\n     * @returns {Function}\n     */\n    var getKey = _curry(get, 2, true);\n    \n    /**\n     * Gets a nested property value from an object using the given path.<br/>\n     * The path is a string with property names separated by dots by default, but\n     * it can be customised with the optional third parameter.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         user.name: \"jdoe\",\n     *         password: \"abc123\"\n     *     }\n     * };\n     *\n     * // same as _.get if no path is involved\n     * _.getWithPath(user, \"name\") // => \"John\"\n     *\n     * _.getWithPath(user, \"login.password\") // => \"abc123\";\n     * _.getWithPath(user, \"login/user.name\", \"/\") // => \"jdoe\"\n     * _.getWithPath(user, \"name.foo\") // => undefined\n     * _.getWithPath(user, \"name.foo.bar\") // => throws a TypeError\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object|ArrayLike} obj\n     * @param {String} path\n     * @param {String} [separator=\".\"]\n     * @returns {*}\n     */\n    function getWithPath (obj, path, separator) {\n        return path.split(separator || \".\").reduce(get, obj);\n    }\n    \n    /**\n     * Verifies the existence of a property in an object.\n     * @example\n     * var user1 = {name: \"john\"};\n     *\n     * _.has(user1, \"name\") // => true\n     * _.has(user1, \"surname\") // => false\n     * _.has(user1, \"toString\") // => true\n     *\n     * var user2 = Object.create(null);\n     *\n     * // not inherited through the prototype chain\n     * _.has(user2, \"toString\") // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    function has (obj, key) {\n        return key in obj;\n    }\n    \n    /**\n     * Curried version of {@link module:lamb.has|has}.<br/>\n     * Returns a function expecting the object to check against the given key.\n     * @example\n     * var user1 = {name: \"john\"};\n     * var user2 = {};\n     * var hasName = _.hasKey(\"name\");\n     *\n     * hasName(user1) // => true\n     * hasName(user2) // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {String} key\n     * @returns {Function}\n     */\n    var hasKey = _curry(has, 2, true);\n    \n    /**\n     * Builds a function expecting an object to check against the given key / value pair.\n     * @example\n     * var hasTheCorrectAnswer = _.hasKeyValue(\"answer\", 42);\n     *\n     * hasTheCorrectAnswer({answer: 2}) // false\n     * hasTheCorrectAnswer({answer: 42}) // true\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {String} key\n     * @param {*} value\n     * @returns {Function}\n     */\n    var hasKeyValue = function (key, value) {\n        return compose(partial(is, value), getKey(key));\n    };\n    \n    /**\n     * Verifies if an object has the specified property and that the property isn't inherited through\n     * the prototype chain.<br/>\n     * @example <caption>Comparison with <code>has</code>.</caption>\n     * var user = {name: \"john\"};\n     *\n     * _.has(user, \"name\") // => true\n     * _.has(user, \"surname\") // => false\n     * _.has(user, \"toString\") // => true\n     *\n     * _.hasOwn(user, \"name\") // => true\n     * _.hasOwn(user, \"surname\") // => false\n     * _.hasOwn(user, \"toString\") // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    var hasOwn = generic(_objectProto.hasOwnProperty);\n    \n    /**\n     * Curried version of {@link module:lamb.hasOwn|hasOwn}.<br/>\n     * Returns a function expecting the object to check against the given key.\n     * @example\n     * var user = {name: \"john\"};\n     * var hasOwnName = _.hasOwnKey(\"name\");\n     * var hasOwnToString = _.hasOwnToString(\"toString\");\n     *\n     * hasOwnName(user) // => true\n     * hasOwnToString(user) // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {String} key\n     * @returns {Function}\n     */\n    var hasOwnKey = _curry(hasOwn, 2, true);\n    \n    /**\n     * Makes an object immutable by recursively calling [Object.freeze]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze}\n     * on its members.<br/>\n     * Any attempt to extend or modify the object can throw a <code>TypeError</code> or fail silently,\n     * depending on the environment and the [strict mode]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode} directive.\n     * @example\n     * var user = _.immutable({\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         username: \"jdoe\",\n     *         password: \"abc123\"\n     *     },\n     *     luckyNumbers: [13, 17]\n     * });\n     *\n     * // Any of these statements will fail and possibly\n     * // throw a TypeError (see the function description)\n     * user.name = \"Joe\";\n     * delete user.name;\n     * user.newProperty = [];\n     * user.login.password = \"foo\";\n     * user.luckyNumbers.push(-13);\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @returns {Object}\n     */\n    function immutable (obj) {\n        return _immutable(obj, []);\n    }\n    \n    /**\n     * Builds an object from the two given lists, using the first one as keys and the last one as values.<br/>\n     * If the list of keys is longer than the values one, the keys will be created with <code>undefined</code> values.<br/>\n     * If more values than keys are supplied, the extra values will be ignored.<br/>\n     * See also [tear]{@link module:lamb.tear} for the reverse operation.\n     * @example\n     * _.make([\"a\", \"b\", \"c\"], [1, 2, 3]) // => {a: 1, b: 2, c: 3}\n     * _.make([\"a\", \"b\", \"c\"], [1, 2]) // => {a: 1, b: 2, c: undefined}\n     * _.make([\"a\", \"b\"], [1, 2, 3]) // => {a: 1, b: 2}\n     * _.make([null, void 0, 2], [1, 2, 3]) // => {\"null\": 1, \"undefined\": 2, \"2\": 3}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {String[]} keys\n     * @param {Array} values\n     * @returns {Object}\n     */\n    function make (keys, values) {\n        var result = {};\n        var valuesLen = values.length;\n    \n        for (var i = 0, len = keys.length; i < len; i++) {\n            result[keys[i]] = i < valuesLen ? values[i] : void 0;\n        }\n    \n        return result;\n    }\n    \n    /**\n     * Converts an object into an array of key / value pairs of its enumerable properties.<br/>\n     * See also [fromPairs]{@link module:lamb.fromPairs} for the reverse operation.\n     * @example\n     * _.pairs({a: 1, b: 2, c: 3}) // => [[\"a\", 1], [\"b\", 2], [\"c\", 3]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @returns {Array<Array<String, *>>}\n     */\n    function pairs (obj) {\n        var result = [];\n    \n        for (var prop in obj) {\n            result.push([prop, obj[prop]]);\n        }\n    \n        return result;\n    }\n    \n    /**\n     * Returns an object containing only the specified properties of the given object.<br/>\n     * Non existent properties will be ignored.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.pick(user, [\"name\", \"age\"]) // => {\"name\": \"john\", \"age\": 30};\n     * _.pick(user, [\"name\", \"email\"]) // => {\"name\": \"john\"}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} source\n     * @param {String[]} whitelist\n     * @returns {Object}\n     */\n    function pick (source, whitelist) {\n        var result = {};\n    \n        whitelist.forEach(function (key) {\n            if (key in source) {\n                result[key] = source[key];\n            }\n        });\n    \n        return result;\n    }\n    \n    /**\n     * Builds a function expecting an object whose properties will be checked against the given predicate.<br/>\n     * The properties satisfying the predicate will be included in the resulting object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     * var pickIfIstring = _.pickIf(_.isType(\"String\"));\n     *\n     * pickIfIstring(user) // => {name: \"john\", surname: \"doe\"}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {ObjectIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    function pickIf (predicate, predicateContext) {\n        return function (source) {\n            var result = {};\n    \n            for (var key in source) {\n                if (predicate.call(predicateContext, source[key], key, source)) {\n                    result[key] = source[key];\n                }\n            }\n    \n            return result;\n        };\n    }\n    \n    /**\n     * Returns a copy of the source object without the specified properties.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.skip(user, [\"name\", \"age\"]) // => {surname: \"doe\"};\n     * _.skip(user, [\"name\", \"email\"]) // => {surname: \"doe\", age: 30};\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} source\n     * @param {String[]} blacklist\n     * @returns {Object}\n     */\n    function skip (source, blacklist) {\n        var result = {};\n    \n        for (var key in source) {\n            if (blacklist.indexOf(key) === -1) {\n                result[key] = source[key];\n            }\n        }\n    \n        return result;\n    }\n    \n    /**\n     * Builds a function expecting an object whose properties will be checked against the given predicate.<br/>\n     * The properties satisfying the predicate will be omitted in the resulting object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     * var skipIfIstring = _.skipIf(_.isType(\"String\"));\n     *\n     * skipIfIstring(user) // => {age: 30}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {ObjectIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    function skipIf (predicate, predicateContext) {\n        return pickIf(not(predicate), predicateContext);\n    }\n    \n    /**\n     * Tears an object apart by transforming it in an array of two lists: one containing its enumerable keys,\n     * the other containing the corresponding values.<br/>\n     * Although this \"tearing apart\" may sound as a rather violent process, the source object will be unharmed.<br/>\n     * See also [make]{@link module:lamb.make} for the reverse operation.\n     * @example\n     * _.tear({a: 1, b: 2, c: 3}) // => [[\"a\", \"b\", \"c\"], [1, 2, 3]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @returns {Array<Array<String>, Array<*>>}\n     */\n    function tear (obj) {\n        var keys = [];\n        var values = [];\n    \n        for (var prop in obj) {\n            keys.push(prop);\n            values.push(obj[prop]);\n        }\n    \n        return [keys, values];\n    }\n    \n    /**\n     * Validates an object with the given list of {@link module:lamb.checker|checker} functions.\n     * @example\n     * var hasContent = function (s) { return s.trim().length > 0; };\n     * var isAdult = function (age) { return age >= 18; };\n     * var userCheckers = [\n     *     _.checker(hasContent, \"Name is required\", [\"name\"]),\n     *     _.checker(hasContent, \"Surname is required\", [\"surname\"]),\n     *     _.checker(isAdult, \"Must be at least 18 years old\", [\"age\"])\n     * ];\n     *\n     * var user1 = {name: \"john\", surname: \"doe\", age: 30};\n     * var user2 = {name: \"jane\", surname: \"\", age: 15};\n     *\n     * _.validate(user1, userCheckers) // => []\n     * _.validate(user2, userCheckers) // => [[\"Surname is required\", [\"surname\"]], [\"Must be at least 18 years old\", [\"age\"]]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @param {Function[]} checkers\n     * @returns {Array<Array<String, String[]>>} An array of errors in the form returned by {@link module:lamb.checker|checker}, or an empty array.\n     */\n    function validate (obj, checkers) {\n        return checkers.reduce(function (errors, checker) {\n            var result = checker(obj);\n            result.length && errors.push(result);\n            return errors;\n        }, []);\n    }\n    \n    /**\n     * A curried version of {@link module:lamb.validate|validate} accepting a list of {@link module:lamb.checker|checkers} and\n     * returning a function expecting the object to validate.\n     * @example\n     * var hasContent = function (s) { return s.trim().length > 0; };\n     * var isAdult = function (age) { return age >= 18; };\n     * var userCheckers = [\n     *     _.checker(hasContent, \"Name is required\", [\"name\"]),\n     *     _.checker(hasContent, \"Surname is required\", [\"surname\"]),\n     *     _.checker(isAdult, \"Must be at least 18 years old\", [\"age\"])\n     * ];\n     * var validateUser = _.validateWith(userCheckers);\n     *\n     * var user1 = {name: \"john\", surname: \"doe\", age: 30};\n     * var user2 = {name: \"jane\", surname: \"\", age: 15};\n     *\n     * validateUser(user1) // => []\n     * validateUser(user2) // => [[\"Surname is required\", [\"surname\"]], [\"Must be at least 18 years old\", [\"age\"]]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @param {Function[]} checkers\n     * @returns {Function}\n     */\n    var validateWith = _curry(validate, 2, true);\n    \n    /**\n     * Generates an array with the values of the enumerable properties of the given object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.values(user) // => [\"john\", \"doe\", 30]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @returns {Array}\n     */\n    function values (obj) {\n        var result = [];\n    \n        for(var prop in obj) {\n            result.push(obj[prop]);\n        }\n    \n        return result;\n    }\n    \n    lamb.checker = checker;\n    lamb.fromPairs = fromPairs;\n    lamb.get = get;\n    lamb.getKey = getKey;\n    lamb.getWithPath = getWithPath;\n    lamb.has = has;\n    lamb.hasKey = hasKey;\n    lamb.hasKeyValue = hasKeyValue;\n    lamb.hasOwn = hasOwn;\n    lamb.hasOwnKey = hasOwnKey;\n    lamb.immutable = immutable;\n    lamb.make = make;\n    lamb.pairs = pairs;\n    lamb.pick = pick;\n    lamb.pickIf = pickIf;\n    lamb.skip = skip;\n    lamb.skipIf = skipIf;\n    lamb.tear = tear;\n    lamb.validate = validate;\n    lamb.validateWith = validateWith;\n    lamb.values = values;\n    \n    \n    function _getPadding (source, char, len) {\n        return repeat(char[0] || \" \", Math.ceil(len - source.length));\n    }\n    \n    /**\n     * Pads a string to the desired length with the given char starting from the beginning of the string.\n     * @example\n     * _.padLeft(\"foo\", \"-\", 0) // => \"foo\"\n     * _.padLeft(\"foo\", \"-\", -1) // => \"foo\"\n     * _.padLeft(\"foo\", \"-\", 5) // => \"--foo\"\n     * _.padLeft(\"foo\", \"-\", 3) // => \"foo\"\n     * _.padLeft(\"foo\", \"ab\", 7) // => \"aaaafoo\"\n     * _.padLeft(\"foo\", \"\", 5) // => \"  foo\"\n     * _.padLeft(\"\", \"-\", 5) // => \"-----\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {String} source\n     * @param {String} [char=\" \"] - The padding char. If a string is passed only the first char is used.\n     * @param {Number} len\n     * @returns {String}\n     */\n    function padLeft (source, char, len) {\n        return _getPadding(source, char, len) + source;\n    }\n    \n    /**\n     * Pads a string to the desired length with the given char starting from the end of the string.\n     * @example\n     * _.padRight(\"foo\", \"-\", 0) // => \"foo\"\n     * _.padRight(\"foo\", \"-\", -1) // => \"foo\"\n     * _.padRight(\"foo\", \"-\", 5) // => \"foo--\"\n     * _.padRight(\"foo\", \"-\", 3) // => \"foo\"\n     * _.padRight(\"foo\", \"ab\", 7) // => \"fooaaaa\"\n     * _.padRight(\"foo\", \"\", 5) // => \"foo  \"\n     * _.padRight(\"\", \"-\", 5) // => \"-----\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {String} source\n     * @param {String} [char=\" \"] - The padding char. If a string is passed only the first char is used.\n     * @param {Number} len\n     * @returns {String}\n     */\n    function padRight (source, char, len) {\n        return source + _getPadding(source, char, len);\n    }\n    \n    /**\n     * Builds a new string by repeating the source string the desired amount of times.<br/>\n     * Note that unlike the current ES6 proposal for [String.prototype.repeat]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat},\n     * this function doesn't throw a RangeError if <code>count</code> is negative, but returns an empty string instead.\n     * @example\n     * _.repeat(\"Hello\", -1) // => \"\"\n     * _.repeat(\"Hello\", 1) // => \"Hello\"\n     * _.repeat(\"Hello\", 3) // => \"HelloHelloHello\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {String} source\n     * @param {Number} count\n     * @returns {String}\n     */\n    function repeat (source, count) {\n        var result = \"\";\n    \n        for (var i = 0; i < count; i++) {\n            result += source;\n        }\n    \n        return result;\n    }\n    \n    /**\n     * Builds a predicate expecting a string to test against the given regular expression pattern.\n     * @example\n     * var hasNumbersOnly = _.testWith(/^\\d+$/);\n     *\n     * hasNumbersOnly(\"123\") // => true\n     * hasNumbersOnly(\"123 Kg\") // => false\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {RegExp} pattern\n     * @returns {Function}\n     */\n    function testWith (pattern) {\n        return _reProto.test.bind(pattern);\n    }\n    \n    lamb.padLeft = padLeft;\n    lamb.padRight = padRight;\n    lamb.repeat = repeat;\n    lamb.testWith = testWith;\n    \n    \n    /**\n     * Verifies if a value is <code>null</code> or <code>undefined</code>.\n     * @example\n     * _.isNil(NaN) // => false\n     * _.isNil({}) // => false\n     * _.isNil(null) // => true\n     * _.isNil(void 0) // => true\n     * _.isNil() // => true\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @function\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    var isNil = anyOf(isNull, isUndefined);\n    \n    /**\n     * Verifies if a value is <code>null</code>.\n     * @example\n     * _.isNull(null) // => true\n     * _.isNull(void 0) // => false\n     * _.isNull(false) // => false\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isNull (value) {\n        return value === null;\n    }\n    \n    /**\n     * Builds a predicate that expects a value to check against the specified type.\n     * @example\n     * var isString = _.isType(\"String\");\n     *\n     * isString(\"Hello\") // => true\n     * isString(new String(\"Hi\")) // => true\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @param {String} type\n     * @returns {Function}\n     */\n    function isType (type) {\n        return function (value) {\n            return typeOf(value) === type;\n        };\n    }\n    \n    /**\n     * Verifies if a value is <code>undefined</code>.\n     * @example\n     * _.isUndefined(null) // => false\n     * _.isUndefined(void 0) // => true\n     * _.isUndefined(false) // => false\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isUndefined (value) {\n        // using void because undefined could be theoretically shadowed\n        return value === void 0;\n    }\n    \n    /**\n     * Retrieves the \"type tag\" from the given value.\n     * @example\n     * _.typeOf(Object.prototype.toString) // => \"Function\"\n     * _.typeOf(/a/) // => \"RegExp\"\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @param {*} value\n     * @returns {String}\n     */\n    function typeOf (value) {\n        return _objectProto.toString.call(value).replace(/^\\[\\w+\\s+|\\]$/g, \"\");\n    }\n    \n    lamb.isNil = isNil;\n    lamb.isNull = isNull;\n    lamb.isType = isType;\n    lamb.isUndefined = isUndefined;\n    lamb.typeOf = typeOf;\n    \n    /* istanbul ignore next */\n    if (typeof exports === \"object\") {\n        module.exports = lamb;\n    } else if (typeof define === \"function\" && define.amd) {\n        define(function() { return lamb; });\n    } else {\n        host.lamb = lamb;\n    }\n}(this);\n\n/**\n * @callback AccumulatorCallback\n * @global\n * @param {*} previousValue The value returned it the last execution of the accumulator or, in the first iteration, the {@link module:lamb.reduce|initialValue} if supplied.\n * @param {*} currentValue The value being processed in the current iteration.\n * @param {Number} idx - The index of the element being processed.\n * @param {ArrayLike} arrayLike - The list being traversed.\n */\n\n/**\n * The built-in arguments object.\n * @typedef {arguments} arguments\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments|arguments} in Mozilla documentation.\n */\n\n/**\n * The built-in Array object.\n * @typedef {Array} Array\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array|Array} in Mozilla documentation.\n */\n\n/**\n * Any array-like object.\n * @typedef {Array|String|arguments|?} ArrayLike\n * @global\n */\n\n/**\n * The built-in Boolean object.\n * @typedef {Boolean} Boolean\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean|Boolean} in Mozilla documentation.\n */\n\n/**\n * The built-in Date object.\n * @typedef {Date} Date\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date|Date} in Mozilla documentation.\n */\n\n/**\n * The built-in Function object.\n * @typedef {Function} function\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function|Function} and\n *      {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions|Functions} in Mozilla documentation.\n */\n\n/**\n * @callback ListIteratorCallback\n * @global\n * @param {*} element - The element being evaluated.\n * @param {Number} idx - The index of the element within the list.\n * @param {ArrayLike} arrayLike - The list being traversed.\n */\n\n/**\n * The built-in Number object.\n * @typedef {Number} Number\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number} in Mozilla documentation.\n */\n\n/**\n * The built-in Object object.\n * @typedef {Object} Object\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object|Object} in Mozilla documentation.\n */\n\n/**\n * @callback ObjectIteratorCallback\n * @global\n * @param {*} value - The value of the current property.\n * @param {String} key - The property name.\n * @param {Object} source - The object being traversed.\n */\n\n/**\n * The built-in RegExp object.\n * @typedef {RegExp} RegExp\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp|RegExp} in Mozilla documentation.\n */\n\n/**\n * The built-in String object.\n * @typedef {String} String\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String|String} in Mozilla documentation.\n */\n"],"sourceRoot":"/source/"}