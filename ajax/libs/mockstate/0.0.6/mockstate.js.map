{"version":3,"sources":["../src/mockstate.js"],"names":["root","factory","define","amd","exports","module","dispatch","getState","setState","setActions","subscribe","middleware","emit","unsubscribe","Mockstate","global","localState","recoveryStateWhenOffline","addEventListener","undefined","localStorage","getItem","mockStoreState","JSON","parse","removeItem","e","recoveredState","setItem","stringify","_store","state","actions","components","store","component","handler","push","forEach","el","splice","index","callback","action","value","i","args","updateStoreData","updateStoreState","Promise","resolve","apply","concat","then","call","data","Object","assign","stateName"],"mappings":"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","file":"mockstate.js","sourcesContent":["; (function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    module.exports = {\n      dispatch: factory.dispatch\n      , getState: factory.getState\n      , setState: factory.setState\n      , setActions: factory.setActions\n      , subscribe: factory.subscribe\n      , middleware: factory.middleware\n      , emit: factory.emit\n      , unsubscribe: factory.unsubscribe\n    }\n  } else {\n    root.Mockstate = factory;\n  }\n} (this, function (global) {\n  /**\n   * @name Mockstate\n   * @description The object that will manage all application state\n   */\n  let Mockstate = {\n    /**\n     * Persists the store state on localStorage\n     * @name localState\n     */\n    localState: {\n      /**\n       * @name recoveryStateWhenOffline\n       * @description When the user will be offline, keep the store state safe.\n       */\n      recoveryStateWhenOffline: () => {\n        // verify if this === window\n        if (this.addEventListener !== undefined) {\n          /**\n           * When the page reloads, if the recovery state are present\n           * recovery the store state.\n           */\n          this.addEventListener(\"load\", () => {\n            // verify if the recored state are present when the page loads\n            if (localStorage.getItem('mockstate:StateToRecovery') !== null) {\n              Mockstate.mockStoreState = JSON.parse(localStorage.getItem('mockstate:StateToRecovery'));\n              // remove the temporary recovery state\n              localStorage.removeItem('mockstate:StateToRecovery');\n            };\n          });\n\n          // if the network connection back whithout the user reload the page, \n          // recovery the  state.\n          this.addEventListener('online', (e) => {\n            let recoveredState = JSON.parse(localStorage.getItem('mockstate:StateToRecovery'));\n            Mockstate.mockStoreState = recoveredState;\n\n            // remove the temporary recovery state\n            localStorage.removeItem('mockstate:StateToRecovery');\n          });\n\n          this.addEventListener('offline', (e) => {\n            /**\n             * when the network connection is offline, store the actual\n             * state on localStorage to be recovered when the connection\n             * become without reload the page or when reload in the same route,\n             * keeping the state and UI component safe.\n             */\n            localStorage.setItem('mockstate:StateToRecovery', JSON.stringify(Mockstate.mockStoreState));\n          });\n        }\n      }\n    },\n    /**\n     * The copy of initial store state, that will be used to work\n     * in application. Keeping the store state immutable.\n     */\n    mockStoreState: {},\n    /**\n     * @name _store\n     * @description The private store\n     */\n    _store: {\n      /**\n       * @name state\n       * @description The Store application state\n       */\n      state: {},\n      /**\n       * @name actions\n       * @description The Functions that will change the Store state\n       */\n      actions: {},\n      /**\n       * @name state\n       * @description The Components that was subscribed\n       */\n      components: [],\n      middleware: {}\n    },\n    /**\n     * @name store\n     * @description Public Store\n     */\n    store: {\n      /**\n       * @name subscribe\n       * @description Subscribe to call the handler function when the action will be triggered\n       * @param {Component} component The Component\n       * @param {Function} handler The function that will be called\n       **/\n      subscribe: (component, handler) => {\n        Mockstate._store.components.push({ component, handler });\n      },\n      unsubscribe: (component) => {\n        let components = Mockstate._store.components;\n        components.forEach(el, index => {\n          if (el === component) {\n            components.splice(index, 1);\n          }\n        });\n      },\n      /**\n       * @name middleware\n       * @description The middleware function that will be triggered\n       * every time when an action called.\n       * @param {Function} callback A function that will be called \n       **/\n      middleware: (callback) => {\n        Mockstate._store.middleware = callback;\n      },\n      /**\n       * @name emit\n       * @description Tell to store that something happend,\n       * and the handler function will be called.\n       * @return void\n       **/\n      emit: () => {\n        let state = { action:null, value:null};\n        let components = Mockstate._store.components;\n        components.forEach((el, i) => {\n          if (el.component !== undefined && typeof el.handler === \"function\") {\n            el.handler(state)\n          }\n        });\n      },\n      /**\n       * @name dispatch\n       * @description Dispatch an action to change\n       * the store state\n       * @param { string } action The action name\n       * @param { any } args Arguments sended to the action\n       */\n      dispatch: (action, ...args) => {\n        let state,\n          components = Mockstate._store.components;\n\n        let updateStoreData = () => {\n          let updateStoreState =\n            // actions don't need to return a promise\n            Promise.resolve(\n              Mockstate._store.actions[action].apply\n                (\n                null, [].concat(Mockstate.mockStoreState, args)\n                )\n            )\n              .then(value => {\n                let middleware = Mockstate._store.middleware;\n\n                // state that will be returned\n                let state = { action, value }\n\n                /**\n                 * has middleware?\n                 **/\n                if (typeof middleware === \"function\") {\n                  middleware.call(null, state, Mockstate.mockStoreState);\n                }\n\n                return state;\n\n              }).then( state => {\n                components.forEach( ( el, i) => {\n                  if (el.component !== undefined && typeof el.handler === \"function\") {\n                    el.handler(state)\n                  }\n                });\n                return state;\n              });\n\n          return updateStoreState;\n        };\n        return updateStoreData()\n      },\n      /**\n       * @name setState\n       * @description Sets the application data state\n       * @param {object} data Simple Object that contain the State\n       */\n      setState: (data) => {\n        // setting the immutable initial state\n        Object.assign(Mockstate._store.state, data);\n        Object.assign(Mockstate.mockStoreState, data);\n        Mockstate.localState.recoveryStateWhenOffline();\n      },\n      /**\n       * @name get\n       * @param {string} stateName The Store state name\n       */\n      getState: (stateName) => {\n        if (stateName === '*') {\n          return Mockstate.mockStoreState;\n        }\n        return Mockstate.mockStoreState[stateName];\n      },\n      /**\n       * @name setActions\n       * @description Sets the application Actions\n       * that will change the Store state\n       */\n      setActions: (data) => {\n        Object.assign(Mockstate._store.actions, data);\n      }\n    }\n  };\n  return Mockstate.store;\n} (this)));"]}