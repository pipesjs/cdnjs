var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a};!function(a,b){"function"==typeof define&&define.amd?define([],b):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports={dispatch:b.dispatch,getState:b.getState,setState:b.setState,setActions:b.setActions,subscribe:b.subscribe,middleware:b.middleware,unsubscribe:b.unsubscribe}:a.Mockstate=b}(this,function(a){var b=this,c={localState:{recoveryStateWhenOffline:function(){void 0!==b.addEventListener&&(b.addEventListener("load",function(){null!==localStorage.getItem("mockstate:StateToRecovery")&&(c.mockStoreState=JSON.parse(localStorage.getItem("mockstate:StateToRecovery")),localStorage.removeItem("mockstate:StateToRecovery"))}),b.addEventListener("online",function(a){var b=JSON.parse(localStorage.getItem("mockstate:StateToRecovery"));c.mockStoreState=b,localStorage.removeItem("mockstate:StateToRecovery")}),b.addEventListener("offline",function(a){localStorage.setItem("mockstate:StateToRecovery",JSON.stringify(c.mockStoreState))}))}},mockStoreState:{},_store:{state:{},actions:{},components:[],middleware:{}},store:{subscribe:function(a,b){c._store.components.push({component:a,handler:b})},unsubscribe:function(a){var b=c._store.components;b.forEach(el,function(c){el===a&&b.splice(c,1)})},middleware:function(a){c._store.middleware=a},dispatch:function(a){for(var b=arguments.length,d=Array(b>1?b-1:0),e=1;e<b;e++)d[e-1]=arguments[e];var f=function(){var b=Promise.resolve(c._store.actions[a].apply(null,[].concat(c.mockStoreState,d))).then(function(b){var d=c._store.middleware,e=c._store.components,f={action:a,value:b};return"function"==typeof d&&d.call(null,f,c.mockStoreState),e.forEach(function(a,b){void 0!==a.component&&"function"==typeof a.handler&&a.handler(f)}),f});return b};return f()},setState:function(a){Object.assign(c._store.state,a),Object.assign(c.mockStoreState,a),c.localState.recoveryStateWhenOffline()},getState:function(a){return"*"===a?c.mockStoreState:c.mockStoreState[a]},setActions:function(a){Object.assign(c._store.actions,a)}}};return c.store}(this));